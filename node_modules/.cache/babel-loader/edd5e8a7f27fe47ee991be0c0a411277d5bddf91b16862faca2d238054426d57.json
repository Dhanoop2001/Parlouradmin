{"ast":null,"code":"/*!\n  * vue-router v4.0.13\n  * (c) 2022 Eduardo San Martin Morote\n  * @license MIT\n  */\n'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.set.difference.v2.js\");\nrequire(\"core-js/modules/es.set.intersection.v2.js\");\nrequire(\"core-js/modules/es.set.is-disjoint-from.v2.js\");\nrequire(\"core-js/modules/es.set.is-subset-of.v2.js\");\nrequire(\"core-js/modules/es.set.is-superset-of.v2.js\");\nrequire(\"core-js/modules/es.set.symmetric-difference.v2.js\");\nrequire(\"core-js/modules/es.set.union.v2.js\");\nrequire(\"core-js/modules/esnext.iterator.constructor.js\");\nrequire(\"core-js/modules/esnext.iterator.every.js\");\nrequire(\"core-js/modules/esnext.iterator.filter.js\");\nrequire(\"core-js/modules/esnext.iterator.find.js\");\nrequire(\"core-js/modules/esnext.iterator.for-each.js\");\nrequire(\"core-js/modules/esnext.iterator.map.js\");\nrequire(\"core-js/modules/esnext.iterator.reduce.js\");\nrequire(\"core-js/modules/esnext.iterator.some.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar devtoolsApi = require('@vue/devtools-api');\nconst hasSymbol = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\nconst PolySymbol = name =>\n// vr = vue router\nhasSymbol ? Symbol('[vue-router]: ' + name) : '[vue-router]: ' + name;\n// rvlm = Router View Location Matched\n/**\r\n * RouteRecord being rendered by the closest ancestor Router View. Used for\r\n * `onBeforeRouteUpdate` and `onBeforeRouteLeave`. rvlm stands for Router View\r\n * Location Matched\r\n *\r\n * @internal\r\n */\nconst matchedRouteKey = /*#__PURE__*/PolySymbol('router view location matched');\n/**\r\n * Allows overriding the router view depth to control which component in\r\n * `matched` is rendered. rvd stands for Router View Depth\r\n *\r\n * @internal\r\n */\nconst viewDepthKey = /*#__PURE__*/PolySymbol('router view depth');\n/**\r\n * Allows overriding the router instance returned by `useRouter` in tests. r\r\n * stands for router\r\n *\r\n * @internal\r\n */\nconst routerKey = /*#__PURE__*/PolySymbol('router');\n/**\r\n * Allows overriding the current route returned by `useRoute` in tests. rl\r\n * stands for route location\r\n *\r\n * @internal\r\n */\nconst routeLocationKey = /*#__PURE__*/PolySymbol('route location');\n/**\r\n * Allows overriding the current route used by router-view. Internally this is\r\n * used when the `route` prop is passed.\r\n *\r\n * @internal\r\n */\nconst routerViewLocationKey = /*#__PURE__*/PolySymbol('router view location');\nconst isBrowser = typeof window !== 'undefined';\nfunction isESModule(obj) {\n  return obj.__esModule || hasSymbol && obj[Symbol.toStringTag] === 'Module';\n}\nconst assign = Object.assign;\nfunction applyToParams(fn, params) {\n  const newParams = {};\n  for (const key in params) {\n    const value = params[key];\n    newParams[key] = Array.isArray(value) ? value.map(fn) : fn(value);\n  }\n  return newParams;\n}\nconst noop = () => {};\nfunction warn(msg) {\n  // avoid using ...args as it breaks in older Edge builds\n  const args = Array.from(arguments).slice(1);\n  console.warn.apply(console, ['[Vue Router warn]: ' + msg].concat(args));\n}\nconst TRAILING_SLASH_RE = /\\/$/;\nconst removeTrailingSlash = path => path.replace(TRAILING_SLASH_RE, '');\n/**\r\n * Transforms an URI into a normalized history location\r\n *\r\n * @param parseQuery\r\n * @param location - URI to normalize\r\n * @param currentLocation - current absolute location. Allows resolving relative\r\n * paths. Must start with `/`. Defaults to `/`\r\n * @returns a normalized history location\r\n */\nfunction parseURL(parseQuery, location, currentLocation = '/') {\n  let path,\n    query = {},\n    searchString = '',\n    hash = '';\n  // Could use URL and URLSearchParams but IE 11 doesn't support it\n  const searchPos = location.indexOf('?');\n  const hashPos = location.indexOf('#', searchPos > -1 ? searchPos : 0);\n  if (searchPos > -1) {\n    path = location.slice(0, searchPos);\n    searchString = location.slice(searchPos + 1, hashPos > -1 ? hashPos : location.length);\n    query = parseQuery(searchString);\n  }\n  if (hashPos > -1) {\n    path = path || location.slice(0, hashPos);\n    // keep the # character\n    hash = location.slice(hashPos, location.length);\n  }\n  // no search and no query\n  path = resolveRelativePath(path != null ? path : location, currentLocation);\n  // empty path means a relative query or hash `?foo=f`, `#thing`\n  return {\n    fullPath: path + (searchString && '?') + searchString + hash,\n    path,\n    query,\n    hash\n  };\n}\n/**\r\n * Stringifies a URL object\r\n *\r\n * @param stringifyQuery\r\n * @param location\r\n */\nfunction stringifyURL(stringifyQuery, location) {\n  const query = location.query ? stringifyQuery(location.query) : '';\n  return location.path + (query && '?') + query + (location.hash || '');\n}\n/**\r\n * Strips off the base from the beginning of a location.pathname in a non\r\n * case-sensitive way.\r\n *\r\n * @param pathname - location.pathname\r\n * @param base - base to strip off\r\n */\nfunction stripBase(pathname, base) {\n  // no base or base is not found at the beginning\n  if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase())) return pathname;\n  return pathname.slice(base.length) || '/';\n}\n/**\r\n * Checks if two RouteLocation are equal. This means that both locations are\r\n * pointing towards the same {@link RouteRecord} and that all `params`, `query`\r\n * parameters and `hash` are the same\r\n *\r\n * @param a - first {@link RouteLocation}\r\n * @param b - second {@link RouteLocation}\r\n */\nfunction isSameRouteLocation(stringifyQuery, a, b) {\n  const aLastIndex = a.matched.length - 1;\n  const bLastIndex = b.matched.length - 1;\n  return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord(a.matched[aLastIndex], b.matched[bLastIndex]) && isSameRouteLocationParams(a.params, b.params) && stringifyQuery(a.query) === stringifyQuery(b.query) && a.hash === b.hash;\n}\n/**\r\n * Check if two `RouteRecords` are equal. Takes into account aliases: they are\r\n * considered equal to the `RouteRecord` they are aliasing.\r\n *\r\n * @param a - first {@link RouteRecord}\r\n * @param b - second {@link RouteRecord}\r\n */\nfunction isSameRouteRecord(a, b) {\n  // since the original record has an undefined value for aliasOf\n  // but all aliases point to the original record, this will always compare\n  // the original record\n  return (a.aliasOf || a) === (b.aliasOf || b);\n}\nfunction isSameRouteLocationParams(a, b) {\n  if (Object.keys(a).length !== Object.keys(b).length) return false;\n  for (const key in a) {\n    if (!isSameRouteLocationParamsValue(a[key], b[key])) return false;\n  }\n  return true;\n}\nfunction isSameRouteLocationParamsValue(a, b) {\n  return Array.isArray(a) ? isEquivalentArray(a, b) : Array.isArray(b) ? isEquivalentArray(b, a) : a === b;\n}\n/**\r\n * Check if two arrays are the same or if an array with one single entry is the\r\n * same as another primitive value. Used to check query and parameters\r\n *\r\n * @param a - array of values\r\n * @param b - array of values or a single value\r\n */\nfunction isEquivalentArray(a, b) {\n  return Array.isArray(b) ? a.length === b.length && a.every((value, i) => value === b[i]) : a.length === 1 && a[0] === b;\n}\n/**\r\n * Resolves a relative path that starts with `.`.\r\n *\r\n * @param to - path location we are resolving\r\n * @param from - currentLocation.path, should start with `/`\r\n */\nfunction resolveRelativePath(to, from) {\n  if (to.startsWith('/')) return to;\n  if (!from.startsWith('/')) {\n    warn(`Cannot resolve a relative location without an absolute path. Trying to resolve \"${to}\" from \"${from}\". It should look like \"/${from}\".`);\n    return to;\n  }\n  if (!to) return from;\n  const fromSegments = from.split('/');\n  const toSegments = to.split('/');\n  let position = fromSegments.length - 1;\n  let toPosition;\n  let segment;\n  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {\n    segment = toSegments[toPosition];\n    // can't go below zero\n    if (position === 1 || segment === '.') continue;\n    if (segment === '..') position--;\n    // found something that is not relative path\n    else break;\n  }\n  return fromSegments.slice(0, position).join('/') + '/' + toSegments.slice(toPosition - (toPosition === toSegments.length ? 1 : 0)).join('/');\n}\nvar NavigationType;\n(function (NavigationType) {\n  NavigationType[\"pop\"] = \"pop\";\n  NavigationType[\"push\"] = \"push\";\n})(NavigationType || (NavigationType = {}));\nvar NavigationDirection;\n(function (NavigationDirection) {\n  NavigationDirection[\"back\"] = \"back\";\n  NavigationDirection[\"forward\"] = \"forward\";\n  NavigationDirection[\"unknown\"] = \"\";\n})(NavigationDirection || (NavigationDirection = {}));\n/**\r\n * Starting location for Histories\r\n */\nconst START = '';\n// Generic utils\n/**\r\n * Normalizes a base by removing any trailing slash and reading the base tag if\r\n * present.\r\n *\r\n * @param base - base to normalize\r\n */\nfunction normalizeBase(base) {\n  if (!base) {\n    if (isBrowser) {\n      // respect <base> tag\n      const baseEl = document.querySelector('base');\n      base = baseEl && baseEl.getAttribute('href') || '/';\n      // strip full URL origin\n      base = base.replace(/^\\w+:\\/\\/[^\\/]+/, '');\n    } else {\n      base = '/';\n    }\n  }\n  // ensure leading slash when it was removed by the regex above avoid leading\n  // slash with hash because the file could be read from the disk like file://\n  // and the leading slash would cause problems\n  if (base[0] !== '/' && base[0] !== '#') base = '/' + base;\n  // remove the trailing slash so all other method can just do `base + fullPath`\n  // to build an href\n  return removeTrailingSlash(base);\n}\n// remove any character before the hash\nconst BEFORE_HASH_RE = /^[^#]+#/;\nfunction createHref(base, location) {\n  return base.replace(BEFORE_HASH_RE, '#') + location;\n}\nfunction getElementPosition(el, offset) {\n  const docRect = document.documentElement.getBoundingClientRect();\n  const elRect = el.getBoundingClientRect();\n  return {\n    behavior: offset.behavior,\n    left: elRect.left - docRect.left - (offset.left || 0),\n    top: elRect.top - docRect.top - (offset.top || 0)\n  };\n}\nconst computeScrollPosition = () => ({\n  left: window.pageXOffset,\n  top: window.pageYOffset\n});\nfunction scrollToPosition(position) {\n  let scrollToOptions;\n  if ('el' in position) {\n    const positionEl = position.el;\n    const isIdSelector = typeof positionEl === 'string' && positionEl.startsWith('#');\n    /**\r\n     * `id`s can accept pretty much any characters, including CSS combinators\r\n     * like `>` or `~`. It's still possible to retrieve elements using\r\n     * `document.getElementById('~')` but it needs to be escaped when using\r\n     * `document.querySelector('#\\\\~')` for it to be valid. The only\r\n     * requirements for `id`s are them to be unique on the page and to not be\r\n     * empty (`id=\"\"`). Because of that, when passing an id selector, it should\r\n     * be properly escaped for it to work with `querySelector`. We could check\r\n     * for the id selector to be simple (no CSS combinators `+ >~`) but that\r\n     * would make things inconsistent since they are valid characters for an\r\n     * `id` but would need to be escaped when using `querySelector`, breaking\r\n     * their usage and ending up in no selector returned. Selectors need to be\r\n     * escaped:\r\n     *\r\n     * - `#1-thing` becomes `#\\31 -thing`\r\n     * - `#with~symbols` becomes `#with\\\\~symbols`\r\n     *\r\n     * - More information about  the topic can be found at\r\n     *   https://mathiasbynens.be/notes/html5-id-class.\r\n     * - Practical example: https://mathiasbynens.be/demo/html5-id\r\n     */\n    if (typeof position.el === 'string') {\n      if (!isIdSelector || !document.getElementById(position.el.slice(1))) {\n        try {\n          const foundEl = document.querySelector(position.el);\n          if (isIdSelector && foundEl) {\n            warn(`The selector \"${position.el}\" should be passed as \"el: document.querySelector('${position.el}')\" because it starts with \"#\".`);\n            // return to avoid other warnings\n            return;\n          }\n        } catch (err) {\n          warn(`The selector \"${position.el}\" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`);\n          // return to avoid other warnings\n          return;\n        }\n      }\n    }\n    const el = typeof positionEl === 'string' ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;\n    if (!el) {\n      warn(`Couldn't find element using selector \"${position.el}\" returned by scrollBehavior.`);\n      return;\n    }\n    scrollToOptions = getElementPosition(el, position);\n  } else {\n    scrollToOptions = position;\n  }\n  if ('scrollBehavior' in document.documentElement.style) window.scrollTo(scrollToOptions);else {\n    window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);\n  }\n}\nfunction getScrollKey(path, delta) {\n  const position = history.state ? history.state.position - delta : -1;\n  return position + path;\n}\nconst scrollPositions = new Map();\nfunction saveScrollPosition(key, scrollPosition) {\n  scrollPositions.set(key, scrollPosition);\n}\nfunction getSavedScrollPosition(key) {\n  const scroll = scrollPositions.get(key);\n  // consume it so it's not used again\n  scrollPositions.delete(key);\n  return scroll;\n}\n// TODO: RFC about how to save scroll position\n/**\r\n * ScrollBehavior instance used by the router to compute and restore the scroll\r\n * position when navigating.\r\n */\n// export interface ScrollHandler<ScrollPositionEntry extends HistoryStateValue, ScrollPosition extends ScrollPositionEntry> {\n//   // returns a scroll position that can be saved in history\n//   compute(): ScrollPositionEntry\n//   // can take an extended ScrollPositionEntry\n//   scroll(position: ScrollPosition): void\n// }\n// export const scrollHandler: ScrollHandler<ScrollPosition> = {\n//   compute: computeScroll,\n//   scroll: scrollToPosition,\n// }\n\nlet createBaseLocation = () => location.protocol + '//' + location.host;\n/**\r\n * Creates a normalized history location from a window.location object\r\n * @param location -\r\n */\nfunction createCurrentLocation(base, location) {\n  const {\n    pathname,\n    search,\n    hash\n  } = location;\n  // allows hash bases like #, /#, #/, #!, #!/, /#!/, or even /folder#end\n  const hashPos = base.indexOf('#');\n  if (hashPos > -1) {\n    let slicePos = hash.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1;\n    let pathFromHash = hash.slice(slicePos);\n    // prepend the starting slash to hash so the url starts with /#\n    if (pathFromHash[0] !== '/') pathFromHash = '/' + pathFromHash;\n    return stripBase(pathFromHash, '');\n  }\n  const path = stripBase(pathname, base);\n  return path + search + hash;\n}\nfunction useHistoryListeners(base, historyState, currentLocation, replace) {\n  let listeners = [];\n  let teardowns = [];\n  // TODO: should it be a stack? a Dict. Check if the popstate listener\n  // can trigger twice\n  let pauseState = null;\n  const popStateHandler = ({\n    state\n  }) => {\n    const to = createCurrentLocation(base, location);\n    const from = currentLocation.value;\n    const fromState = historyState.value;\n    let delta = 0;\n    if (state) {\n      currentLocation.value = to;\n      historyState.value = state;\n      // ignore the popstate and reset the pauseState\n      if (pauseState && pauseState === from) {\n        pauseState = null;\n        return;\n      }\n      delta = fromState ? state.position - fromState.position : 0;\n    } else {\n      replace(to);\n    }\n    // console.log({ deltaFromCurrent })\n    // Here we could also revert the navigation by calling history.go(-delta)\n    // this listener will have to be adapted to not trigger again and to wait for the url\n    // to be updated before triggering the listeners. Some kind of validation function would also\n    // need to be passed to the listeners so the navigation can be accepted\n    // call all listeners\n    listeners.forEach(listener => {\n      listener(currentLocation.value, from, {\n        delta,\n        type: NavigationType.pop,\n        direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown\n      });\n    });\n  };\n  function pauseListeners() {\n    pauseState = currentLocation.value;\n  }\n  function listen(callback) {\n    // setup the listener and prepare teardown callbacks\n    listeners.push(callback);\n    const teardown = () => {\n      const index = listeners.indexOf(callback);\n      if (index > -1) listeners.splice(index, 1);\n    };\n    teardowns.push(teardown);\n    return teardown;\n  }\n  function beforeUnloadListener() {\n    const {\n      history\n    } = window;\n    if (!history.state) return;\n    history.replaceState(assign({}, history.state, {\n      scroll: computeScrollPosition()\n    }), '');\n  }\n  function destroy() {\n    for (const teardown of teardowns) teardown();\n    teardowns = [];\n    window.removeEventListener('popstate', popStateHandler);\n    window.removeEventListener('beforeunload', beforeUnloadListener);\n  }\n  // setup the listeners and prepare teardown callbacks\n  window.addEventListener('popstate', popStateHandler);\n  window.addEventListener('beforeunload', beforeUnloadListener);\n  return {\n    pauseListeners,\n    listen,\n    destroy\n  };\n}\n/**\r\n * Creates a state object\r\n */\nfunction buildState(back, current, forward, replaced = false, computeScroll = false) {\n  return {\n    back,\n    current,\n    forward,\n    replaced,\n    position: window.history.length,\n    scroll: computeScroll ? computeScrollPosition() : null\n  };\n}\nfunction useHistoryStateNavigation(base) {\n  const {\n    history,\n    location\n  } = window;\n  // private variables\n  const currentLocation = {\n    value: createCurrentLocation(base, location)\n  };\n  const historyState = {\n    value: history.state\n  };\n  // build current history entry as this is a fresh navigation\n  if (!historyState.value) {\n    changeLocation(currentLocation.value, {\n      back: null,\n      current: currentLocation.value,\n      forward: null,\n      // the length is off by one, we need to decrease it\n      position: history.length - 1,\n      replaced: true,\n      // don't add a scroll as the user may have an anchor and we want\n      // scrollBehavior to be triggered without a saved position\n      scroll: null\n    }, true);\n  }\n  function changeLocation(to, state, replace) {\n    /**\r\n     * if a base tag is provided and we are on a normal domain, we have to\r\n     * respect the provided `base` attribute because pushState() will use it and\r\n     * potentially erase anything before the `#` like at\r\n     * https://github.com/vuejs/router/issues/685 where a base of\r\n     * `/folder/#` but a base of `/` would erase the `/folder/` section. If\r\n     * there is no host, the `<base>` tag makes no sense and if there isn't a\r\n     * base tag we can just use everything after the `#`.\r\n     */\n    const hashIndex = base.indexOf('#');\n    const url = hashIndex > -1 ? (location.host && document.querySelector('base') ? base : base.slice(hashIndex)) + to : createBaseLocation() + base + to;\n    try {\n      // BROWSER QUIRK\n      // NOTE: Safari throws a SecurityError when calling this function 100 times in 30 seconds\n      history[replace ? 'replaceState' : 'pushState'](state, '', url);\n      historyState.value = state;\n    } catch (err) {\n      {\n        warn('Error with push/replace State', err);\n      }\n      // Force the navigation, this also resets the call count\n      location[replace ? 'replace' : 'assign'](url);\n    }\n  }\n  function replace(to, data) {\n    const state = assign({}, history.state, buildState(historyState.value.back,\n    // keep back and forward entries but override current position\n    to, historyState.value.forward, true), data, {\n      position: historyState.value.position\n    });\n    changeLocation(to, state, true);\n    currentLocation.value = to;\n  }\n  function push(to, data) {\n    // Add to current entry the information of where we are going\n    // as well as saving the current position\n    const currentState = assign({},\n    // use current history state to gracefully handle a wrong call to\n    // history.replaceState\n    // https://github.com/vuejs/router/issues/366\n    historyState.value, history.state, {\n      forward: to,\n      scroll: computeScrollPosition()\n    });\n    if (!history.state) {\n      warn(`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\\n\\n` + `history.replaceState(history.state, '', url)\\n\\n` + `You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.`);\n    }\n    changeLocation(currentState.current, currentState, true);\n    const state = assign({}, buildState(currentLocation.value, to, null), {\n      position: currentState.position + 1\n    }, data);\n    changeLocation(to, state, false);\n    currentLocation.value = to;\n  }\n  return {\n    location: currentLocation,\n    state: historyState,\n    push,\n    replace\n  };\n}\n/**\r\n * Creates an HTML5 history. Most common history for single page applications.\r\n *\r\n * @param base -\r\n */\nfunction createWebHistory(base) {\n  base = normalizeBase(base);\n  const historyNavigation = useHistoryStateNavigation(base);\n  const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);\n  function go(delta, triggerListeners = true) {\n    if (!triggerListeners) historyListeners.pauseListeners();\n    history.go(delta);\n  }\n  const routerHistory = assign({\n    // it's overridden right after\n    location: '',\n    base,\n    go,\n    createHref: createHref.bind(null, base)\n  }, historyNavigation, historyListeners);\n  Object.defineProperty(routerHistory, 'location', {\n    enumerable: true,\n    get: () => historyNavigation.location.value\n  });\n  Object.defineProperty(routerHistory, 'state', {\n    enumerable: true,\n    get: () => historyNavigation.state.value\n  });\n  return routerHistory;\n}\n\n/**\r\n * Creates a in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere.\r\n * It's up to the user to replace that location with the starter location by either calling `router.push` or `router.replace`.\r\n *\r\n * @param base - Base applied to all urls, defaults to '/'\r\n * @returns a history object that can be passed to the router constructor\r\n */\nfunction createMemoryHistory(base = '') {\n  let listeners = [];\n  let queue = [START];\n  let position = 0;\n  base = normalizeBase(base);\n  function setLocation(location) {\n    position++;\n    if (position === queue.length) {\n      // we are at the end, we can simply append a new entry\n      queue.push(location);\n    } else {\n      // we are in the middle, we remove everything from here in the queue\n      queue.splice(position);\n      queue.push(location);\n    }\n  }\n  function triggerListeners(to, from, {\n    direction,\n    delta\n  }) {\n    const info = {\n      direction,\n      delta,\n      type: NavigationType.pop\n    };\n    for (const callback of listeners) {\n      callback(to, from, info);\n    }\n  }\n  const routerHistory = {\n    // rewritten by Object.defineProperty\n    location: START,\n    // TODO: should be kept in queue\n    state: {},\n    base,\n    createHref: createHref.bind(null, base),\n    replace(to) {\n      // remove current entry and decrement position\n      queue.splice(position--, 1);\n      setLocation(to);\n    },\n    push(to, data) {\n      setLocation(to);\n    },\n    listen(callback) {\n      listeners.push(callback);\n      return () => {\n        const index = listeners.indexOf(callback);\n        if (index > -1) listeners.splice(index, 1);\n      };\n    },\n    destroy() {\n      listeners = [];\n      queue = [START];\n      position = 0;\n    },\n    go(delta, shouldTrigger = true) {\n      const from = this.location;\n      const direction =\n      // we are considering delta === 0 going forward, but in abstract mode\n      // using 0 for the delta doesn't make sense like it does in html5 where\n      // it reloads the page\n      delta < 0 ? NavigationDirection.back : NavigationDirection.forward;\n      position = Math.max(0, Math.min(position + delta, queue.length - 1));\n      if (shouldTrigger) {\n        triggerListeners(this.location, from, {\n          direction,\n          delta\n        });\n      }\n    }\n  };\n  Object.defineProperty(routerHistory, 'location', {\n    enumerable: true,\n    get: () => queue[position]\n  });\n  return routerHistory;\n}\n\n/**\r\n * Creates a hash history. Useful for web applications with no host (e.g.\r\n * `file://`) or when configuring a server to handle any URL is not possible.\r\n *\r\n * @param base - optional base to provide. Defaults to `location.pathname +\r\n * location.search` If there is a `<base>` tag in the `head`, its value will be\r\n * ignored in favor of this parameter **but note it affects all the\r\n * history.pushState() calls**, meaning that if you use a `<base>` tag, it's\r\n * `href` value **has to match this parameter** (ignoring anything after the\r\n * `#`).\r\n *\r\n * @example\r\n * ```js\r\n * // at https://example.com/folder\r\n * createWebHashHistory() // gives a url of `https://example.com/folder#`\r\n * createWebHashHistory('/folder/') // gives a url of `https://example.com/folder/#`\r\n * // if the `#` is provided in the base, it won't be added by `createWebHashHistory`\r\n * createWebHashHistory('/folder/#/app/') // gives a url of `https://example.com/folder/#/app/`\r\n * // you should avoid doing this because it changes the original url and breaks copying urls\r\n * createWebHashHistory('/other-folder/') // gives a url of `https://example.com/other-folder/#`\r\n *\r\n * // at file:///usr/etc/folder/index.html\r\n * // for locations with no `host`, the base is ignored\r\n * createWebHashHistory('/iAmIgnored') // gives a url of `file:///usr/etc/folder/index.html#`\r\n * ```\r\n */\nfunction createWebHashHistory(base) {\n  // Make sure this implementation is fine in terms of encoding, specially for IE11\n  // for `file://`, directly use the pathname and ignore the base\n  // location.pathname contains an initial `/` even at the root: `https://example.com`\n  base = location.host ? base || location.pathname + location.search : '';\n  // allow the user to provide a `#` in the middle: `/base/#/app`\n  if (!base.includes('#')) base += '#';\n  if (!base.endsWith('#/') && !base.endsWith('#')) {\n    warn(`A hash base must end with a \"#\":\\n\"${base}\" should be \"${base.replace(/#.*$/, '#')}\".`);\n  }\n  return createWebHistory(base);\n}\nfunction isRouteLocation(route) {\n  return typeof route === 'string' || route && typeof route === 'object';\n}\nfunction isRouteName(name) {\n  return typeof name === 'string' || typeof name === 'symbol';\n}\n\n/**\r\n * Initial route location where the router is. Can be used in navigation guards\r\n * to differentiate the initial navigation.\r\n *\r\n * @example\r\n * ```js\r\n * import { START_LOCATION } from 'vue-router'\r\n *\r\n * router.beforeEach((to, from) => {\r\n *   if (from === START_LOCATION) {\r\n *     // initial navigation\r\n *   }\r\n * })\r\n * ```\r\n */\nconst START_LOCATION_NORMALIZED = {\n  path: '/',\n  name: undefined,\n  params: {},\n  query: {},\n  hash: '',\n  fullPath: '/',\n  matched: [],\n  meta: {},\n  redirectedFrom: undefined\n};\nconst NavigationFailureSymbol = /*#__PURE__*/PolySymbol('navigation failure');\n/**\r\n * Enumeration with all possible types for navigation failures. Can be passed to\r\n * {@link isNavigationFailure} to check for specific failures.\r\n */\nexports.NavigationFailureType = void 0;\n(function (NavigationFailureType) {\n  /**\r\n   * An aborted navigation is a navigation that failed because a navigation\r\n   * guard returned `false` or called `next(false)`\r\n   */\n  NavigationFailureType[NavigationFailureType[\"aborted\"] = 4] = \"aborted\";\n  /**\r\n   * A cancelled navigation is a navigation that failed because a more recent\r\n   * navigation finished started (not necessarily finished).\r\n   */\n  NavigationFailureType[NavigationFailureType[\"cancelled\"] = 8] = \"cancelled\";\n  /**\r\n   * A duplicated navigation is a navigation that failed because it was\r\n   * initiated while already being at the exact same location.\r\n   */\n  NavigationFailureType[NavigationFailureType[\"duplicated\"] = 16] = \"duplicated\";\n})(exports.NavigationFailureType || (exports.NavigationFailureType = {}));\n// DEV only debug messages\nconst ErrorTypeMessages = {\n  [1 /* MATCHER_NOT_FOUND */]({\n    location,\n    currentLocation\n  }) {\n    return `No match for\\n ${JSON.stringify(location)}${currentLocation ? '\\nwhile being at\\n' + JSON.stringify(currentLocation) : ''}`;\n  },\n  [2 /* NAVIGATION_GUARD_REDIRECT */]({\n    from,\n    to\n  }) {\n    return `Redirected from \"${from.fullPath}\" to \"${stringifyRoute(to)}\" via a navigation guard.`;\n  },\n  [4 /* NAVIGATION_ABORTED */]({\n    from,\n    to\n  }) {\n    return `Navigation aborted from \"${from.fullPath}\" to \"${to.fullPath}\" via a navigation guard.`;\n  },\n  [8 /* NAVIGATION_CANCELLED */]({\n    from,\n    to\n  }) {\n    return `Navigation cancelled from \"${from.fullPath}\" to \"${to.fullPath}\" with a new navigation.`;\n  },\n  [16 /* NAVIGATION_DUPLICATED */]({\n    from,\n    to\n  }) {\n    return `Avoided redundant navigation to current location: \"${from.fullPath}\".`;\n  }\n};\nfunction createRouterError(type, params) {\n  // keep full error messages in cjs versions\n  {\n    return assign(new Error(ErrorTypeMessages[type](params)), {\n      type,\n      [NavigationFailureSymbol]: true\n    }, params);\n  }\n}\nfunction isNavigationFailure(error, type) {\n  return error instanceof Error && NavigationFailureSymbol in error && (type == null || !!(error.type & type));\n}\nconst propertiesToLog = ['params', 'query', 'hash'];\nfunction stringifyRoute(to) {\n  if (typeof to === 'string') return to;\n  if ('path' in to) return to.path;\n  const location = {};\n  for (const key of propertiesToLog) {\n    if (key in to) location[key] = to[key];\n  }\n  return JSON.stringify(location, null, 2);\n}\n\n// default pattern for a param: non greedy everything but /\nconst BASE_PARAM_PATTERN = '[^/]+?';\nconst BASE_PATH_PARSER_OPTIONS = {\n  sensitive: false,\n  strict: false,\n  start: true,\n  end: true\n};\n// Special Regex characters that must be escaped in static tokens\nconst REGEX_CHARS_RE = /[.+*?^${}()[\\]/\\\\]/g;\n/**\r\n * Creates a path parser from an array of Segments (a segment is an array of Tokens)\r\n *\r\n * @param segments - array of segments returned by tokenizePath\r\n * @param extraOptions - optional options for the regexp\r\n * @returns a PathParser\r\n */\nfunction tokensToParser(segments, extraOptions) {\n  const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions);\n  // the amount of scores is the same as the length of segments except for the root segment \"/\"\n  const score = [];\n  // the regexp as a string\n  let pattern = options.start ? '^' : '';\n  // extracted keys\n  const keys = [];\n  for (const segment of segments) {\n    // the root segment needs special treatment\n    const segmentScores = segment.length ? [] : [90 /* Root */];\n    // allow trailing slash\n    if (options.strict && !segment.length) pattern += '/';\n    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {\n      const token = segment[tokenIndex];\n      // resets the score if we are inside a sub segment /:a-other-:b\n      let subSegmentScore = 40 /* Segment */ + (options.sensitive ? 0.25 /* BonusCaseSensitive */ : 0);\n      if (token.type === 0 /* Static */) {\n        // prepend the slash if we are starting a new segment\n        if (!tokenIndex) pattern += '/';\n        pattern += token.value.replace(REGEX_CHARS_RE, '\\\\$&');\n        subSegmentScore += 40 /* Static */;\n      } else if (token.type === 1 /* Param */) {\n        const {\n          value,\n          repeatable,\n          optional,\n          regexp\n        } = token;\n        keys.push({\n          name: value,\n          repeatable,\n          optional\n        });\n        const re = regexp ? regexp : BASE_PARAM_PATTERN;\n        // the user provided a custom regexp /:id(\\\\d+)\n        if (re !== BASE_PARAM_PATTERN) {\n          subSegmentScore += 10 /* BonusCustomRegExp */;\n          // make sure the regexp is valid before using it\n          try {\n            new RegExp(`(${re})`);\n          } catch (err) {\n            throw new Error(`Invalid custom RegExp for param \"${value}\" (${re}): ` + err.message);\n          }\n        }\n        // when we repeat we must take care of the repeating leading slash\n        let subPattern = repeatable ? `((?:${re})(?:/(?:${re}))*)` : `(${re})`;\n        // prepend the slash if we are starting a new segment\n        if (!tokenIndex) subPattern =\n        // avoid an optional / if there are more segments e.g. /:p?-static\n        // or /:p?-:p2\n        optional && segment.length < 2 ? `(?:/${subPattern})` : '/' + subPattern;\n        if (optional) subPattern += '?';\n        pattern += subPattern;\n        subSegmentScore += 20 /* Dynamic */;\n        if (optional) subSegmentScore += -8 /* BonusOptional */;\n        if (repeatable) subSegmentScore += -20 /* BonusRepeatable */;\n        if (re === '.*') subSegmentScore += -50 /* BonusWildcard */;\n      }\n      segmentScores.push(subSegmentScore);\n    }\n    // an empty array like /home/ -> [[{home}], []]\n    // if (!segment.length) pattern += '/'\n    score.push(segmentScores);\n  }\n  // only apply the strict bonus to the last score\n  if (options.strict && options.end) {\n    const i = score.length - 1;\n    score[i][score[i].length - 1] += 0.7000000000000001 /* BonusStrict */;\n  }\n  // TODO: dev only warn double trailing slash\n  if (!options.strict) pattern += '/?';\n  if (options.end) pattern += '$';\n  // allow paths like /dynamic to only match dynamic or dynamic/... but not dynamic_something_else\n  else if (options.strict) pattern += '(?:/|$)';\n  const re = new RegExp(pattern, options.sensitive ? '' : 'i');\n  function parse(path) {\n    const match = path.match(re);\n    const params = {};\n    if (!match) return null;\n    for (let i = 1; i < match.length; i++) {\n      const value = match[i] || '';\n      const key = keys[i - 1];\n      params[key.name] = value && key.repeatable ? value.split('/') : value;\n    }\n    return params;\n  }\n  function stringify(params) {\n    let path = '';\n    // for optional parameters to allow to be empty\n    let avoidDuplicatedSlash = false;\n    for (const segment of segments) {\n      if (!avoidDuplicatedSlash || !path.endsWith('/')) path += '/';\n      avoidDuplicatedSlash = false;\n      for (const token of segment) {\n        if (token.type === 0 /* Static */) {\n          path += token.value;\n        } else if (token.type === 1 /* Param */) {\n          const {\n            value,\n            repeatable,\n            optional\n          } = token;\n          const param = value in params ? params[value] : '';\n          if (Array.isArray(param) && !repeatable) throw new Error(`Provided param \"${value}\" is an array but it is not repeatable (* or + modifiers)`);\n          const text = Array.isArray(param) ? param.join('/') : param;\n          if (!text) {\n            if (optional) {\n              // if we have more than one optional param like /:a?-static we\n              // don't need to care about the optional param\n              if (segment.length < 2) {\n                // remove the last slash as we could be at the end\n                if (path.endsWith('/')) path = path.slice(0, -1);\n                // do not append a slash on the next iteration\n                else avoidDuplicatedSlash = true;\n              }\n            } else throw new Error(`Missing required param \"${value}\"`);\n          }\n          path += text;\n        }\n      }\n    }\n    return path;\n  }\n  return {\n    re,\n    score,\n    keys,\n    parse,\n    stringify\n  };\n}\n/**\r\n * Compares an array of numbers as used in PathParser.score and returns a\r\n * number. This function can be used to `sort` an array\r\n *\r\n * @param a - first array of numbers\r\n * @param b - second array of numbers\r\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\r\n * should be sorted first\r\n */\nfunction compareScoreArray(a, b) {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    const diff = b[i] - a[i];\n    // only keep going if diff === 0\n    if (diff) return diff;\n    i++;\n  }\n  // if the last subsegment was Static, the shorter segments should be sorted first\n  // otherwise sort the longest segment first\n  if (a.length < b.length) {\n    return a.length === 1 && a[0] === 40 /* Static */ + 40 /* Segment */ ? -1 : 1;\n  } else if (a.length > b.length) {\n    return b.length === 1 && b[0] === 40 /* Static */ + 40 /* Segment */ ? 1 : -1;\n  }\n  return 0;\n}\n/**\r\n * Compare function that can be used with `sort` to sort an array of PathParser\r\n *\r\n * @param a - first PathParser\r\n * @param b - second PathParser\r\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\r\n */\nfunction comparePathParserScore(a, b) {\n  let i = 0;\n  const aScore = a.score;\n  const bScore = b.score;\n  while (i < aScore.length && i < bScore.length) {\n    const comp = compareScoreArray(aScore[i], bScore[i]);\n    // do not return if both are equal\n    if (comp) return comp;\n    i++;\n  }\n  // if a and b share the same score entries but b has more, sort b first\n  return bScore.length - aScore.length;\n  // this is the ternary version\n  // return aScore.length < bScore.length\n  //   ? 1\n  //   : aScore.length > bScore.length\n  //   ? -1\n  //   : 0\n}\nconst ROOT_TOKEN = {\n  type: 0 /* Static */,\n  value: ''\n};\nconst VALID_PARAM_RE = /[a-zA-Z0-9_]/;\n// After some profiling, the cache seems to be unnecessary because tokenizePath\n// (the slowest part of adding a route) is very fast\n// const tokenCache = new Map<string, Token[][]>()\nfunction tokenizePath(path) {\n  if (!path) return [[]];\n  if (path === '/') return [[ROOT_TOKEN]];\n  if (!path.startsWith('/')) {\n    throw new Error(`Route paths should start with a \"/\": \"${path}\" should be \"/${path}\".`);\n  }\n  // if (tokenCache.has(path)) return tokenCache.get(path)!\n  function crash(message) {\n    throw new Error(`ERR (${state})/\"${buffer}\": ${message}`);\n  }\n  let state = 0 /* Static */;\n  let previousState = state;\n  const tokens = [];\n  // the segment will always be valid because we get into the initial state\n  // with the leading /\n  let segment;\n  function finalizeSegment() {\n    if (segment) tokens.push(segment);\n    segment = [];\n  }\n  // index on the path\n  let i = 0;\n  // char at index\n  let char;\n  // buffer of the value read\n  let buffer = '';\n  // custom regexp for a param\n  let customRe = '';\n  function consumeBuffer() {\n    if (!buffer) return;\n    if (state === 0 /* Static */) {\n      segment.push({\n        type: 0 /* Static */,\n        value: buffer\n      });\n    } else if (state === 1 /* Param */ || state === 2 /* ParamRegExp */ || state === 3 /* ParamRegExpEnd */) {\n      if (segment.length > 1 && (char === '*' || char === '+')) crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);\n      segment.push({\n        type: 1 /* Param */,\n        value: buffer,\n        regexp: customRe,\n        repeatable: char === '*' || char === '+',\n        optional: char === '*' || char === '?'\n      });\n    } else {\n      crash('Invalid state to consume buffer');\n    }\n    buffer = '';\n  }\n  function addCharToBuffer() {\n    buffer += char;\n  }\n  while (i < path.length) {\n    char = path[i++];\n    if (char === '\\\\' && state !== 2 /* ParamRegExp */) {\n      previousState = state;\n      state = 4 /* EscapeNext */;\n      continue;\n    }\n    switch (state) {\n      case 0 /* Static */:\n        if (char === '/') {\n          if (buffer) {\n            consumeBuffer();\n          }\n          finalizeSegment();\n        } else if (char === ':') {\n          consumeBuffer();\n          state = 1 /* Param */;\n        } else {\n          addCharToBuffer();\n        }\n        break;\n      case 4 /* EscapeNext */:\n        addCharToBuffer();\n        state = previousState;\n        break;\n      case 1 /* Param */:\n        if (char === '(') {\n          state = 2 /* ParamRegExp */;\n        } else if (VALID_PARAM_RE.test(char)) {\n          addCharToBuffer();\n        } else {\n          consumeBuffer();\n          state = 0 /* Static */;\n          // go back one character if we were not modifying\n          if (char !== '*' && char !== '?' && char !== '+') i--;\n        }\n        break;\n      case 2 /* ParamRegExp */:\n        // TODO: is it worth handling nested regexp? like :p(?:prefix_([^/]+)_suffix)\n        // it already works by escaping the closing )\n        // https://paths.esm.dev/?p=AAMeJbiAwQEcDKbAoAAkP60PG2R6QAvgNaA6AFACM2ABuQBB#\n        // is this really something people need since you can also write\n        // /prefix_:p()_suffix\n        if (char === ')') {\n          // handle the escaped )\n          if (customRe[customRe.length - 1] == '\\\\') customRe = customRe.slice(0, -1) + char;else state = 3 /* ParamRegExpEnd */;\n        } else {\n          customRe += char;\n        }\n        break;\n      case 3 /* ParamRegExpEnd */:\n        // same as finalizing a param\n        consumeBuffer();\n        state = 0 /* Static */;\n        // go back one character if we were not modifying\n        if (char !== '*' && char !== '?' && char !== '+') i--;\n        customRe = '';\n        break;\n      default:\n        crash('Unknown state');\n        break;\n    }\n  }\n  if (state === 2 /* ParamRegExp */) crash(`Unfinished custom RegExp for param \"${buffer}\"`);\n  consumeBuffer();\n  finalizeSegment();\n  // tokenCache.set(path, tokens)\n  return tokens;\n}\nfunction createRouteRecordMatcher(record, parent, options) {\n  const parser = tokensToParser(tokenizePath(record.path), options);\n  // warn against params with the same name\n  {\n    const existingKeys = new Set();\n    for (const key of parser.keys) {\n      if (existingKeys.has(key.name)) warn(`Found duplicated params with name \"${key.name}\" for path \"${record.path}\". Only the last one will be available on \"$route.params\".`);\n      existingKeys.add(key.name);\n    }\n  }\n  const matcher = assign(parser, {\n    record,\n    parent,\n    // these needs to be populated by the parent\n    children: [],\n    alias: []\n  });\n  if (parent) {\n    // both are aliases or both are not aliases\n    // we don't want to mix them because the order is used when\n    // passing originalRecord in Matcher.addRoute\n    if (!matcher.record.aliasOf === !parent.record.aliasOf) parent.children.push(matcher);\n  }\n  return matcher;\n}\n\n/**\r\n * Creates a Router Matcher.\r\n *\r\n * @internal\r\n * @param routes - array of initial routes\r\n * @param globalOptions - global route options\r\n */\nfunction createRouterMatcher(routes, globalOptions) {\n  // normalized ordered array of matchers\n  const matchers = [];\n  const matcherMap = new Map();\n  globalOptions = mergeOptions({\n    strict: false,\n    end: true,\n    sensitive: false\n  }, globalOptions);\n  function getRecordMatcher(name) {\n    return matcherMap.get(name);\n  }\n  function addRoute(record, parent, originalRecord) {\n    // used later on to remove by name\n    const isRootAdd = !originalRecord;\n    const mainNormalizedRecord = normalizeRouteRecord(record);\n    // we might be the child of an alias\n    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;\n    const options = mergeOptions(globalOptions, record);\n    // generate an array of records to correctly handle aliases\n    const normalizedRecords = [mainNormalizedRecord];\n    if ('alias' in record) {\n      const aliases = typeof record.alias === 'string' ? [record.alias] : record.alias;\n      for (const alias of aliases) {\n        normalizedRecords.push(assign({}, mainNormalizedRecord, {\n          // this allows us to hold a copy of the `components` option\n          // so that async components cache is hold on the original record\n          components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,\n          path: alias,\n          // we might be the child of an alias\n          aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord\n          // the aliases are always of the same kind as the original since they\n          // are defined on the same record\n        }));\n      }\n    }\n    let matcher;\n    let originalMatcher;\n    for (const normalizedRecord of normalizedRecords) {\n      const {\n        path\n      } = normalizedRecord;\n      // Build up the path for nested routes if the child isn't an absolute\n      // route. Only add the / delimiter if the child path isn't empty and if the\n      // parent path doesn't have a trailing slash\n      if (parent && path[0] !== '/') {\n        const parentPath = parent.record.path;\n        const connectingSlash = parentPath[parentPath.length - 1] === '/' ? '' : '/';\n        normalizedRecord.path = parent.record.path + (path && connectingSlash + path);\n      }\n      if (normalizedRecord.path === '*') {\n        throw new Error('Catch all routes (\"*\") must now be defined using a param with a custom regexp.\\n' + 'See more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.');\n      }\n      // create the object before hand so it can be passed to children\n      matcher = createRouteRecordMatcher(normalizedRecord, parent, options);\n      if (parent && path[0] === '/') checkMissingParamsInAbsolutePath(matcher, parent);\n      // if we are an alias we must tell the original record that we exist\n      // so we can be removed\n      if (originalRecord) {\n        originalRecord.alias.push(matcher);\n        {\n          checkSameParams(originalRecord, matcher);\n        }\n      } else {\n        // otherwise, the first record is the original and others are aliases\n        originalMatcher = originalMatcher || matcher;\n        if (originalMatcher !== matcher) originalMatcher.alias.push(matcher);\n        // remove the route if named and only for the top record (avoid in nested calls)\n        // this works because the original record is the first one\n        if (isRootAdd && record.name && !isAliasRecord(matcher)) removeRoute(record.name);\n      }\n      if ('children' in mainNormalizedRecord) {\n        const children = mainNormalizedRecord.children;\n        for (let i = 0; i < children.length; i++) {\n          addRoute(children[i], matcher, originalRecord && originalRecord.children[i]);\n        }\n      }\n      // if there was no original record, then the first one was not an alias and all\n      // other alias (if any) need to reference this record when adding children\n      originalRecord = originalRecord || matcher;\n      // TODO: add normalized records for more flexibility\n      // if (parent && isAliasRecord(originalRecord)) {\n      //   parent.children.push(originalRecord)\n      // }\n      insertMatcher(matcher);\n    }\n    return originalMatcher ? () => {\n      // since other matchers are aliases, they should be removed by the original matcher\n      removeRoute(originalMatcher);\n    } : noop;\n  }\n  function removeRoute(matcherRef) {\n    if (isRouteName(matcherRef)) {\n      const matcher = matcherMap.get(matcherRef);\n      if (matcher) {\n        matcherMap.delete(matcherRef);\n        matchers.splice(matchers.indexOf(matcher), 1);\n        matcher.children.forEach(removeRoute);\n        matcher.alias.forEach(removeRoute);\n      }\n    } else {\n      const index = matchers.indexOf(matcherRef);\n      if (index > -1) {\n        matchers.splice(index, 1);\n        if (matcherRef.record.name) matcherMap.delete(matcherRef.record.name);\n        matcherRef.children.forEach(removeRoute);\n        matcherRef.alias.forEach(removeRoute);\n      }\n    }\n  }\n  function getRoutes() {\n    return matchers;\n  }\n  function insertMatcher(matcher) {\n    let i = 0;\n    while (i < matchers.length && comparePathParserScore(matcher, matchers[i]) >= 0 && (\n    // Adding children with empty path should still appear before the parent\n    // https://github.com/vuejs/router/issues/1124\n    matcher.record.path !== matchers[i].record.path || !isRecordChildOf(matcher, matchers[i]))) i++;\n    matchers.splice(i, 0, matcher);\n    // only add the original record to the name map\n    if (matcher.record.name && !isAliasRecord(matcher)) matcherMap.set(matcher.record.name, matcher);\n  }\n  function resolve(location, currentLocation) {\n    let matcher;\n    let params = {};\n    let path;\n    let name;\n    if ('name' in location && location.name) {\n      matcher = matcherMap.get(location.name);\n      if (!matcher) throw createRouterError(1 /* MATCHER_NOT_FOUND */, {\n        location\n      });\n      name = matcher.record.name;\n      params = assign(\n      // paramsFromLocation is a new object\n      paramsFromLocation(currentLocation.params,\n      // only keep params that exist in the resolved location\n      // TODO: only keep optional params coming from a parent record\n      matcher.keys.filter(k => !k.optional).map(k => k.name)), location.params);\n      // throws if cannot be stringified\n      path = matcher.stringify(params);\n    } else if ('path' in location) {\n      // no need to resolve the path with the matcher as it was provided\n      // this also allows the user to control the encoding\n      path = location.path;\n      if (!path.startsWith('/')) {\n        warn(`The Matcher cannot resolve relative paths but received \"${path}\". Unless you directly called \\`matcher.resolve(\"${path}\")\\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/router.`);\n      }\n      matcher = matchers.find(m => m.re.test(path));\n      // matcher should have a value after the loop\n      if (matcher) {\n        // TODO: dev warning of unused params if provided\n        // we know the matcher works because we tested the regexp\n        params = matcher.parse(path);\n        name = matcher.record.name;\n      }\n      // location is a relative path\n    } else {\n      // match by name or path of current route\n      matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers.find(m => m.re.test(currentLocation.path));\n      if (!matcher) throw createRouterError(1 /* MATCHER_NOT_FOUND */, {\n        location,\n        currentLocation\n      });\n      name = matcher.record.name;\n      // since we are navigating to the same location, we don't need to pick the\n      // params like when `name` is provided\n      params = assign({}, currentLocation.params, location.params);\n      path = matcher.stringify(params);\n    }\n    const matched = [];\n    let parentMatcher = matcher;\n    while (parentMatcher) {\n      // reversed order so parents are at the beginning\n      matched.unshift(parentMatcher.record);\n      parentMatcher = parentMatcher.parent;\n    }\n    return {\n      name,\n      path,\n      params,\n      matched,\n      meta: mergeMetaFields(matched)\n    };\n  }\n  // add initial routes\n  routes.forEach(route => addRoute(route));\n  return {\n    addRoute,\n    resolve,\n    removeRoute,\n    getRoutes,\n    getRecordMatcher\n  };\n}\nfunction paramsFromLocation(params, keys) {\n  const newParams = {};\n  for (const key of keys) {\n    if (key in params) newParams[key] = params[key];\n  }\n  return newParams;\n}\n/**\r\n * Normalizes a RouteRecordRaw. Creates a copy\r\n *\r\n * @param record\r\n * @returns the normalized version\r\n */\nfunction normalizeRouteRecord(record) {\n  return {\n    path: record.path,\n    redirect: record.redirect,\n    name: record.name,\n    meta: record.meta || {},\n    aliasOf: undefined,\n    beforeEnter: record.beforeEnter,\n    props: normalizeRecordProps(record),\n    children: record.children || [],\n    instances: {},\n    leaveGuards: new Set(),\n    updateGuards: new Set(),\n    enterCallbacks: {},\n    components: 'components' in record ? record.components || {} : {\n      default: record.component\n    }\n  };\n}\n/**\r\n * Normalize the optional `props` in a record to always be an object similar to\r\n * components. Also accept a boolean for components.\r\n * @param record\r\n */\nfunction normalizeRecordProps(record) {\n  const propsObject = {};\n  // props does not exist on redirect records but we can set false directly\n  const props = record.props || false;\n  if ('component' in record) {\n    propsObject.default = props;\n  } else {\n    // NOTE: we could also allow a function to be applied to every component.\n    // Would need user feedback for use cases\n    for (const name in record.components) propsObject[name] = typeof props === 'boolean' ? props : props[name];\n  }\n  return propsObject;\n}\n/**\r\n * Checks if a record or any of its parent is an alias\r\n * @param record\r\n */\nfunction isAliasRecord(record) {\n  while (record) {\n    if (record.record.aliasOf) return true;\n    record = record.parent;\n  }\n  return false;\n}\n/**\r\n * Merge meta fields of an array of records\r\n *\r\n * @param matched - array of matched records\r\n */\nfunction mergeMetaFields(matched) {\n  return matched.reduce((meta, record) => assign(meta, record.meta), {});\n}\nfunction mergeOptions(defaults, partialOptions) {\n  const options = {};\n  for (const key in defaults) {\n    options[key] = key in partialOptions ? partialOptions[key] : defaults[key];\n  }\n  return options;\n}\nfunction isSameParam(a, b) {\n  return a.name === b.name && a.optional === b.optional && a.repeatable === b.repeatable;\n}\n/**\r\n * Check if a path and its alias have the same required params\r\n *\r\n * @param a - original record\r\n * @param b - alias record\r\n */\nfunction checkSameParams(a, b) {\n  for (const key of a.keys) {\n    if (!key.optional && !b.keys.find(isSameParam.bind(null, key))) return warn(`Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" should have the exact same param named \"${key.name}\"`);\n  }\n  for (const key of b.keys) {\n    if (!key.optional && !a.keys.find(isSameParam.bind(null, key))) return warn(`Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" should have the exact same param named \"${key.name}\"`);\n  }\n}\nfunction checkMissingParamsInAbsolutePath(record, parent) {\n  for (const key of parent.keys) {\n    if (!record.keys.find(isSameParam.bind(null, key))) return warn(`Absolute path \"${record.record.path}\" should have the exact same param named \"${key.name}\" as its parent \"${parent.record.path}\".`);\n  }\n}\nfunction isRecordChildOf(record, parent) {\n  return parent.children.some(child => child === record || isRecordChildOf(record, child));\n}\n\n/**\r\n * Encoding Rules ␣ = Space Path: ␣ \" < > # ? { } Query: ␣ \" < > # & = Hash: ␣ \"\r\n * < > `\r\n *\r\n * On top of that, the RFC3986 (https://tools.ietf.org/html/rfc3986#section-2.2)\r\n * defines some extra characters to be encoded. Most browsers do not encode them\r\n * in encodeURI https://github.com/whatwg/url/issues/369, so it may be safer to\r\n * also encode `!'()*`. Leaving unencoded only ASCII alphanumeric(`a-zA-Z0-9`)\r\n * plus `-._~`. This extra safety should be applied to query by patching the\r\n * string returned by encodeURIComponent encodeURI also encodes `[\\]^`. `\\`\r\n * should be encoded to avoid ambiguity. Browsers (IE, FF, C) transform a `\\`\r\n * into a `/` if directly typed in. The _backtick_ (`````) should also be\r\n * encoded everywhere because some browsers like FF encode it when directly\r\n * written while others don't. Safari and IE don't encode ``\"<>{}``` in hash.\r\n */\n// const EXTRA_RESERVED_RE = /[!'()*]/g\n// const encodeReservedReplacer = (c: string) => '%' + c.charCodeAt(0).toString(16)\nconst HASH_RE = /#/g; // %23\nconst AMPERSAND_RE = /&/g; // %26\nconst SLASH_RE = /\\//g; // %2F\nconst EQUAL_RE = /=/g; // %3D\nconst IM_RE = /\\?/g; // %3F\nconst PLUS_RE = /\\+/g; // %2B\n/**\r\n * NOTE: It's not clear to me if we should encode the + symbol in queries, it\r\n * seems to be less flexible than not doing so and I can't find out the legacy\r\n * systems requiring this for regular requests like text/html. In the standard,\r\n * the encoding of the plus character is only mentioned for\r\n * application/x-www-form-urlencoded\r\n * (https://url.spec.whatwg.org/#urlencoded-parsing) and most browsers seems lo\r\n * leave the plus character as is in queries. To be more flexible, we allow the\r\n * plus character on the query but it can also be manually encoded by the user.\r\n *\r\n * Resources:\r\n * - https://url.spec.whatwg.org/#urlencoded-parsing\r\n * - https://stackoverflow.com/questions/1634271/url-encoding-the-space-character-or-20\r\n */\nconst ENC_BRACKET_OPEN_RE = /%5B/g; // [\nconst ENC_BRACKET_CLOSE_RE = /%5D/g; // ]\nconst ENC_CARET_RE = /%5E/g; // ^\nconst ENC_BACKTICK_RE = /%60/g; // `\nconst ENC_CURLY_OPEN_RE = /%7B/g; // {\nconst ENC_PIPE_RE = /%7C/g; // |\nconst ENC_CURLY_CLOSE_RE = /%7D/g; // }\nconst ENC_SPACE_RE = /%20/g; // }\n/**\r\n * Encode characters that need to be encoded on the path, search and hash\r\n * sections of the URL.\r\n *\r\n * @internal\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\nfunction commonEncode(text) {\n  return encodeURI('' + text).replace(ENC_PIPE_RE, '|').replace(ENC_BRACKET_OPEN_RE, '[').replace(ENC_BRACKET_CLOSE_RE, ']');\n}\n/**\r\n * Encode characters that need to be encoded on the hash section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\nfunction encodeHash(text) {\n  return commonEncode(text).replace(ENC_CURLY_OPEN_RE, '{').replace(ENC_CURLY_CLOSE_RE, '}').replace(ENC_CARET_RE, '^');\n}\n/**\r\n * Encode characters that need to be encoded query values on the query\r\n * section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\nfunction encodeQueryValue(text) {\n  return commonEncode(text)\n  // Encode the space as +, encode the + to differentiate it from the space\n  .replace(PLUS_RE, '%2B').replace(ENC_SPACE_RE, '+').replace(HASH_RE, '%23').replace(AMPERSAND_RE, '%26').replace(ENC_BACKTICK_RE, '`').replace(ENC_CURLY_OPEN_RE, '{').replace(ENC_CURLY_CLOSE_RE, '}').replace(ENC_CARET_RE, '^');\n}\n/**\r\n * Like `encodeQueryValue` but also encodes the `=` character.\r\n *\r\n * @param text - string to encode\r\n */\nfunction encodeQueryKey(text) {\n  return encodeQueryValue(text).replace(EQUAL_RE, '%3D');\n}\n/**\r\n * Encode characters that need to be encoded on the path section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\nfunction encodePath(text) {\n  return commonEncode(text).replace(HASH_RE, '%23').replace(IM_RE, '%3F');\n}\n/**\r\n * Encode characters that need to be encoded on the path section of the URL as a\r\n * param. This function encodes everything {@link encodePath} does plus the\r\n * slash (`/`) character. If `text` is `null` or `undefined`, returns an empty\r\n * string instead.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\nfunction encodeParam(text) {\n  return text == null ? '' : encodePath(text).replace(SLASH_RE, '%2F');\n}\n/**\r\n * Decode text using `decodeURIComponent`. Returns the original text if it\r\n * fails.\r\n *\r\n * @param text - string to decode\r\n * @returns decoded string\r\n */\nfunction decode(text) {\n  try {\n    return decodeURIComponent('' + text);\n  } catch (err) {\n    warn(`Error decoding \"${text}\". Using original value`);\n  }\n  return '' + text;\n}\n\n/**\r\n * Transforms a queryString into a {@link LocationQuery} object. Accept both, a\r\n * version with the leading `?` and without Should work as URLSearchParams\r\n\n * @internal\r\n *\r\n * @param search - search string to parse\r\n * @returns a query object\r\n */\nfunction parseQuery(search) {\n  const query = {};\n  // avoid creating an object with an empty key and empty value\n  // because of split('&')\n  if (search === '' || search === '?') return query;\n  const hasLeadingIM = search[0] === '?';\n  const searchParams = (hasLeadingIM ? search.slice(1) : search).split('&');\n  for (let i = 0; i < searchParams.length; ++i) {\n    // pre decode the + into space\n    const searchParam = searchParams[i].replace(PLUS_RE, ' ');\n    // allow the = character\n    const eqPos = searchParam.indexOf('=');\n    const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));\n    const value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));\n    if (key in query) {\n      // an extra variable for ts types\n      let currentValue = query[key];\n      if (!Array.isArray(currentValue)) {\n        currentValue = query[key] = [currentValue];\n      }\n      currentValue.push(value);\n    } else {\n      query[key] = value;\n    }\n  }\n  return query;\n}\n/**\r\n * Stringifies a {@link LocationQueryRaw} object. Like `URLSearchParams`, it\r\n * doesn't prepend a `?`\r\n *\r\n * @internal\r\n *\r\n * @param query - query object to stringify\r\n * @returns string version of the query without the leading `?`\r\n */\nfunction stringifyQuery(query) {\n  let search = '';\n  for (let key in query) {\n    const value = query[key];\n    key = encodeQueryKey(key);\n    if (value == null) {\n      // only null adds the value\n      if (value !== undefined) {\n        search += (search.length ? '&' : '') + key;\n      }\n      continue;\n    }\n    // keep null values\n    const values = Array.isArray(value) ? value.map(v => v && encodeQueryValue(v)) : [value && encodeQueryValue(value)];\n    values.forEach(value => {\n      // skip undefined values in arrays as if they were not present\n      // smaller code than using filter\n      if (value !== undefined) {\n        // only append & with non-empty search\n        search += (search.length ? '&' : '') + key;\n        if (value != null) search += '=' + value;\n      }\n    });\n  }\n  return search;\n}\n/**\r\n * Transforms a {@link LocationQueryRaw} into a {@link LocationQuery} by casting\r\n * numbers into strings, removing keys with an undefined value and replacing\r\n * undefined with null in arrays\r\n *\r\n * @param query - query object to normalize\r\n * @returns a normalized query object\r\n */\nfunction normalizeQuery(query) {\n  const normalizedQuery = {};\n  for (const key in query) {\n    const value = query[key];\n    if (value !== undefined) {\n      normalizedQuery[key] = Array.isArray(value) ? value.map(v => v == null ? null : '' + v) : value == null ? value : '' + value;\n    }\n  }\n  return normalizedQuery;\n}\n\n/**\r\n * Create a list of callbacks that can be reset. Used to create before and after navigation guards list\r\n */\nfunction useCallbacks() {\n  let handlers = [];\n  function add(handler) {\n    handlers.push(handler);\n    return () => {\n      const i = handlers.indexOf(handler);\n      if (i > -1) handlers.splice(i, 1);\n    };\n  }\n  function reset() {\n    handlers = [];\n  }\n  return {\n    add,\n    list: () => handlers,\n    reset\n  };\n}\nfunction registerGuard(record, name, guard) {\n  const removeFromList = () => {\n    record[name].delete(guard);\n  };\n  vue.onUnmounted(removeFromList);\n  vue.onDeactivated(removeFromList);\n  vue.onActivated(() => {\n    record[name].add(guard);\n  });\n  record[name].add(guard);\n}\n/**\r\n * Add a navigation guard that triggers whenever the component for the current\r\n * location is about to be left. Similar to {@link beforeRouteLeave} but can be\r\n * used in any component. The guard is removed when the component is unmounted.\r\n *\r\n * @param leaveGuard - {@link NavigationGuard}\r\n */\nfunction onBeforeRouteLeave(leaveGuard) {\n  if (!vue.getCurrentInstance()) {\n    warn('getCurrentInstance() returned null. onBeforeRouteLeave() must be called at the top of a setup function');\n    return;\n  }\n  const activeRecord = vue.inject(matchedRouteKey,\n  // to avoid warning\n  {}).value;\n  if (!activeRecord) {\n    warn('No active route record was found when calling `onBeforeRouteLeave()`. Make sure you call this function inside of a component child of <router-view>. Maybe you called it inside of App.vue?');\n    return;\n  }\n  registerGuard(activeRecord, 'leaveGuards', leaveGuard);\n}\n/**\r\n * Add a navigation guard that triggers whenever the current location is about\r\n * to be updated. Similar to {@link beforeRouteUpdate} but can be used in any\r\n * component. The guard is removed when the component is unmounted.\r\n *\r\n * @param updateGuard - {@link NavigationGuard}\r\n */\nfunction onBeforeRouteUpdate(updateGuard) {\n  if (!vue.getCurrentInstance()) {\n    warn('getCurrentInstance() returned null. onBeforeRouteUpdate() must be called at the top of a setup function');\n    return;\n  }\n  const activeRecord = vue.inject(matchedRouteKey,\n  // to avoid warning\n  {}).value;\n  if (!activeRecord) {\n    warn('No active route record was found when calling `onBeforeRouteUpdate()`. Make sure you call this function inside of a component child of <router-view>. Maybe you called it inside of App.vue?');\n    return;\n  }\n  registerGuard(activeRecord, 'updateGuards', updateGuard);\n}\nfunction guardToPromiseFn(guard, to, from, record, name) {\n  // keep a reference to the enterCallbackArray to prevent pushing callbacks if a new navigation took place\n  const enterCallbackArray = record && (\n  // name is defined if record is because of the function overload\n  record.enterCallbacks[name] = record.enterCallbacks[name] || []);\n  return () => new Promise((resolve, reject) => {\n    const next = valid => {\n      if (valid === false) reject(createRouterError(4 /* NAVIGATION_ABORTED */, {\n        from,\n        to\n      }));else if (valid instanceof Error) {\n        reject(valid);\n      } else if (isRouteLocation(valid)) {\n        reject(createRouterError(2 /* NAVIGATION_GUARD_REDIRECT */, {\n          from: to,\n          to: valid\n        }));\n      } else {\n        if (enterCallbackArray &&\n        // since enterCallbackArray is truthy, both record and name also are\n        record.enterCallbacks[name] === enterCallbackArray && typeof valid === 'function') enterCallbackArray.push(valid);\n        resolve();\n      }\n    };\n    // wrapping with Promise.resolve allows it to work with both async and sync guards\n    const guardReturn = guard.call(record && record.instances[name], to, from, canOnlyBeCalledOnce(next, to, from));\n    let guardCall = Promise.resolve(guardReturn);\n    if (guard.length < 3) guardCall = guardCall.then(next);\n    if (guard.length > 2) {\n      const message = `The \"next\" callback was never called inside of ${guard.name ? '\"' + guard.name + '\"' : ''}:\\n${guard.toString()}\\n. If you are returning a value instead of calling \"next\", make sure to remove the \"next\" parameter from your function.`;\n      if (typeof guardReturn === 'object' && 'then' in guardReturn) {\n        guardCall = guardCall.then(resolvedValue => {\n          // @ts-expect-error: _called is added at canOnlyBeCalledOnce\n          if (!next._called) {\n            warn(message);\n            return Promise.reject(new Error('Invalid navigation guard'));\n          }\n          return resolvedValue;\n        });\n        // TODO: test me!\n      } else if (guardReturn !== undefined) {\n        // @ts-expect-error: _called is added at canOnlyBeCalledOnce\n        if (!next._called) {\n          warn(message);\n          reject(new Error('Invalid navigation guard'));\n          return;\n        }\n      }\n    }\n    guardCall.catch(err => reject(err));\n  });\n}\nfunction canOnlyBeCalledOnce(next, to, from) {\n  let called = 0;\n  return function () {\n    if (called++ === 1) warn(`The \"next\" callback was called more than once in one navigation guard when going from \"${from.fullPath}\" to \"${to.fullPath}\". It should be called exactly one time in each navigation guard. This will fail in production.`);\n    // @ts-expect-error: we put it in the original one because it's easier to check\n    next._called = true;\n    if (called === 1) next.apply(null, arguments);\n  };\n}\nfunction extractComponentsGuards(matched, guardType, to, from) {\n  const guards = [];\n  for (const record of matched) {\n    for (const name in record.components) {\n      let rawComponent = record.components[name];\n      {\n        if (!rawComponent || typeof rawComponent !== 'object' && typeof rawComponent !== 'function') {\n          warn(`Component \"${name}\" in record with path \"${record.path}\" is not` + ` a valid component. Received \"${String(rawComponent)}\".`);\n          // throw to ensure we stop here but warn to ensure the message isn't\n          // missed by the user\n          throw new Error('Invalid route component');\n        } else if ('then' in rawComponent) {\n          // warn if user wrote import('/component.vue') instead of () =>\n          // import('./component.vue')\n          warn(`Component \"${name}\" in record with path \"${record.path}\" is a ` + `Promise instead of a function that returns a Promise. Did you ` + `write \"import('./MyPage.vue')\" instead of ` + `\"() => import('./MyPage.vue')\" ? This will break in ` + `production if not fixed.`);\n          const promise = rawComponent;\n          rawComponent = () => promise;\n        } else if (rawComponent.__asyncLoader &&\n        // warn only once per component\n        !rawComponent.__warnedDefineAsync) {\n          rawComponent.__warnedDefineAsync = true;\n          warn(`Component \"${name}\" in record with path \"${record.path}\" is defined ` + `using \"defineAsyncComponent()\". ` + `Write \"() => import('./MyPage.vue')\" instead of ` + `\"defineAsyncComponent(() => import('./MyPage.vue'))\".`);\n        }\n      }\n      // skip update and leave guards if the route component is not mounted\n      if (guardType !== 'beforeRouteEnter' && !record.instances[name]) continue;\n      if (isRouteComponent(rawComponent)) {\n        // __vccOpts is added by vue-class-component and contain the regular options\n        const options = rawComponent.__vccOpts || rawComponent;\n        const guard = options[guardType];\n        guard && guards.push(guardToPromiseFn(guard, to, from, record, name));\n      } else {\n        // start requesting the chunk already\n        let componentPromise = rawComponent();\n        if (!('catch' in componentPromise)) {\n          warn(`Component \"${name}\" in record with path \"${record.path}\" is a function that does not return a Promise. If you were passing a functional component, make sure to add a \"displayName\" to the component. This will break in production if not fixed.`);\n          componentPromise = Promise.resolve(componentPromise);\n        }\n        guards.push(() => componentPromise.then(resolved => {\n          if (!resolved) return Promise.reject(new Error(`Couldn't resolve component \"${name}\" at \"${record.path}\"`));\n          const resolvedComponent = isESModule(resolved) ? resolved.default : resolved;\n          // replace the function with the resolved component\n          record.components[name] = resolvedComponent;\n          // __vccOpts is added by vue-class-component and contain the regular options\n          const options = resolvedComponent.__vccOpts || resolvedComponent;\n          const guard = options[guardType];\n          return guard && guardToPromiseFn(guard, to, from, record, name)();\n        }));\n      }\n    }\n  }\n  return guards;\n}\n/**\r\n * Allows differentiating lazy components from functional components and vue-class-component\r\n *\r\n * @param component\r\n */\nfunction isRouteComponent(component) {\n  return typeof component === 'object' || 'displayName' in component || 'props' in component || '__vccOpts' in component;\n}\n\n// TODO: we could allow currentRoute as a prop to expose `isActive` and\n// `isExactActive` behavior should go through an RFC\nfunction useLink(props) {\n  const router = vue.inject(routerKey);\n  const currentRoute = vue.inject(routeLocationKey);\n  const route = vue.computed(() => router.resolve(vue.unref(props.to)));\n  const activeRecordIndex = vue.computed(() => {\n    const {\n      matched\n    } = route.value;\n    const {\n      length\n    } = matched;\n    const routeMatched = matched[length - 1];\n    const currentMatched = currentRoute.matched;\n    if (!routeMatched || !currentMatched.length) return -1;\n    const index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));\n    if (index > -1) return index;\n    // possible parent record\n    const parentRecordPath = getOriginalPath(matched[length - 2]);\n    return (\n      // we are dealing with nested routes\n      length > 1 &&\n      // if the parent and matched route have the same path, this link is\n      // referring to the empty child. Or we currently are on a different\n      // child of the same parent\n      getOriginalPath(routeMatched) === parentRecordPath &&\n      // avoid comparing the child with its parent\n      currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index\n    );\n  });\n  const isActive = vue.computed(() => activeRecordIndex.value > -1 && includesParams(currentRoute.params, route.value.params));\n  const isExactActive = vue.computed(() => activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams(currentRoute.params, route.value.params));\n  function navigate(e = {}) {\n    if (guardEvent(e)) {\n      return router[vue.unref(props.replace) ? 'replace' : 'push'](vue.unref(props.to)\n      // avoid uncaught errors are they are logged anyway\n      ).catch(noop);\n    }\n    return Promise.resolve();\n  }\n  // devtools only\n  if (isBrowser) {\n    const instance = vue.getCurrentInstance();\n    if (instance) {\n      const linkContextDevtools = {\n        route: route.value,\n        isActive: isActive.value,\n        isExactActive: isExactActive.value\n      };\n      // @ts-expect-error: this is internal\n      instance.__vrl_devtools = instance.__vrl_devtools || [];\n      // @ts-expect-error: this is internal\n      instance.__vrl_devtools.push(linkContextDevtools);\n      vue.watchEffect(() => {\n        linkContextDevtools.route = route.value;\n        linkContextDevtools.isActive = isActive.value;\n        linkContextDevtools.isExactActive = isExactActive.value;\n      }, {\n        flush: 'post'\n      });\n    }\n  }\n  return {\n    route,\n    href: vue.computed(() => route.value.href),\n    isActive,\n    isExactActive,\n    navigate\n  };\n}\nconst RouterLinkImpl = /*#__PURE__*/vue.defineComponent({\n  name: 'RouterLink',\n  props: {\n    to: {\n      type: [String, Object],\n      required: true\n    },\n    replace: Boolean,\n    activeClass: String,\n    // inactiveClass: String,\n    exactActiveClass: String,\n    custom: Boolean,\n    ariaCurrentValue: {\n      type: String,\n      default: 'page'\n    }\n  },\n  useLink,\n  setup(props, {\n    slots\n  }) {\n    const link = vue.reactive(useLink(props));\n    const {\n      options\n    } = vue.inject(routerKey);\n    const elClass = vue.computed(() => ({\n      [getLinkClass(props.activeClass, options.linkActiveClass, 'router-link-active')]: link.isActive,\n      // [getLinkClass(\n      //   props.inactiveClass,\n      //   options.linkInactiveClass,\n      //   'router-link-inactive'\n      // )]: !link.isExactActive,\n      [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, 'router-link-exact-active')]: link.isExactActive\n    }));\n    return () => {\n      const children = slots.default && slots.default(link);\n      return props.custom ? children : vue.h('a', {\n        'aria-current': link.isExactActive ? props.ariaCurrentValue : null,\n        href: link.href,\n        // this would override user added attrs but Vue will still add\n        // the listener so we end up triggering both\n        onClick: link.navigate,\n        class: elClass.value\n      }, children);\n    };\n  }\n});\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\r\n * Component to render a link that triggers a navigation on click.\r\n */\nconst RouterLink = RouterLinkImpl;\nfunction guardEvent(e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) return;\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) return;\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) return;\n  // don't redirect if `target=\"_blank\"`\n  // @ts-expect-error getAttribute does exist\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    // @ts-expect-error getAttribute exists\n    const target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) return;\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) e.preventDefault();\n  return true;\n}\nfunction includesParams(outer, inner) {\n  for (const key in inner) {\n    const innerValue = inner[key];\n    const outerValue = outer[key];\n    if (typeof innerValue === 'string') {\n      if (innerValue !== outerValue) return false;\n    } else {\n      if (!Array.isArray(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value, i) => value !== outerValue[i])) return false;\n    }\n  }\n  return true;\n}\n/**\r\n * Get the original path value of a record by following its aliasOf\r\n * @param record\r\n */\nfunction getOriginalPath(record) {\n  return record ? record.aliasOf ? record.aliasOf.path : record.path : '';\n}\n/**\r\n * Utility class to get the active class based on defaults.\r\n * @param propClass\r\n * @param globalClass\r\n * @param defaultClass\r\n */\nconst getLinkClass = (propClass, globalClass, defaultClass) => propClass != null ? propClass : globalClass != null ? globalClass : defaultClass;\nconst RouterViewImpl = /*#__PURE__*/vue.defineComponent({\n  name: 'RouterView',\n  // #674 we manually inherit them\n  inheritAttrs: false,\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    },\n    route: Object\n  },\n  setup(props, {\n    attrs,\n    slots\n  }) {\n    warnDeprecatedUsage();\n    const injectedRoute = vue.inject(routerViewLocationKey);\n    const routeToDisplay = vue.computed(() => props.route || injectedRoute.value);\n    const depth = vue.inject(viewDepthKey, 0);\n    const matchedRouteRef = vue.computed(() => routeToDisplay.value.matched[depth]);\n    vue.provide(viewDepthKey, depth + 1);\n    vue.provide(matchedRouteKey, matchedRouteRef);\n    vue.provide(routerViewLocationKey, routeToDisplay);\n    const viewRef = vue.ref();\n    // watch at the same time the component instance, the route record we are\n    // rendering, and the name\n    vue.watch(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to, name], [oldInstance, from, oldName]) => {\n      // copy reused instances\n      if (to) {\n        // this will update the instance for new instances as well as reused\n        // instances when navigating to a new route\n        to.instances[name] = instance;\n        // the component instance is reused for a different route or name so\n        // we copy any saved update or leave guards. With async setup, the\n        // mounting component will mount before the matchedRoute changes,\n        // making instance === oldInstance, so we check if guards have been\n        // added before. This works because we remove guards when\n        // unmounting/deactivating components\n        if (from && from !== to && instance && instance === oldInstance) {\n          if (!to.leaveGuards.size) {\n            to.leaveGuards = from.leaveGuards;\n          }\n          if (!to.updateGuards.size) {\n            to.updateGuards = from.updateGuards;\n          }\n        }\n      }\n      // trigger beforeRouteEnter next callbacks\n      if (instance && to && (\n      // if there is no instance but to and from are the same this might be\n      // the first visit\n      !from || !isSameRouteRecord(to, from) || !oldInstance)) {\n        (to.enterCallbacks[name] || []).forEach(callback => callback(instance));\n      }\n    }, {\n      flush: 'post'\n    });\n    return () => {\n      const route = routeToDisplay.value;\n      const matchedRoute = matchedRouteRef.value;\n      const ViewComponent = matchedRoute && matchedRoute.components[props.name];\n      // we need the value at the time we render because when we unmount, we\n      // navigated to a different location so the value is different\n      const currentName = props.name;\n      if (!ViewComponent) {\n        return normalizeSlot(slots.default, {\n          Component: ViewComponent,\n          route\n        });\n      }\n      // props from route configuration\n      const routePropsOption = matchedRoute.props[props.name];\n      const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === 'function' ? routePropsOption(route) : routePropsOption : null;\n      const onVnodeUnmounted = vnode => {\n        // remove the instance reference to prevent leak\n        if (vnode.component.isUnmounted) {\n          matchedRoute.instances[currentName] = null;\n        }\n      };\n      const component = vue.h(ViewComponent, assign({}, routeProps, attrs, {\n        onVnodeUnmounted,\n        ref: viewRef\n      }));\n      if (isBrowser && component.ref) {\n        // TODO: can display if it's an alias, its props\n        const info = {\n          depth,\n          name: matchedRoute.name,\n          path: matchedRoute.path,\n          meta: matchedRoute.meta\n        };\n        const internalInstances = Array.isArray(component.ref) ? component.ref.map(r => r.i) : [component.ref.i];\n        internalInstances.forEach(instance => {\n          // @ts-expect-error\n          instance.__vrv_devtools = info;\n        });\n      }\n      return (\n        // pass the vnode to the slot as a prop.\n        // h and <component :is=\"...\"> both accept vnodes\n        normalizeSlot(slots.default, {\n          Component: component,\n          route\n        }) || component\n      );\n    };\n  }\n});\nfunction normalizeSlot(slot, data) {\n  if (!slot) return null;\n  const slotContent = slot(data);\n  return slotContent.length === 1 ? slotContent[0] : slotContent;\n}\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\r\n * Component to display the current route the user is at.\r\n */\nconst RouterView = RouterViewImpl;\n// warn against deprecated usage with <transition> & <keep-alive>\n// due to functional component being no longer eager in Vue 3\nfunction warnDeprecatedUsage() {\n  const instance = vue.getCurrentInstance();\n  const parentName = instance.parent && instance.parent.type.name;\n  if (parentName && (parentName === 'KeepAlive' || parentName.includes('Transition'))) {\n    const comp = parentName === 'KeepAlive' ? 'keep-alive' : 'transition';\n    warn(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.\\n` + `Use slot props instead:\\n\\n` + `<router-view v-slot=\"{ Component }\">\\n` + `  <${comp}>\\n` + `    <component :is=\"Component\" />\\n` + `  </${comp}>\\n` + `</router-view>`);\n  }\n}\nfunction formatRouteLocation(routeLocation, tooltip) {\n  const copy = assign({}, routeLocation, {\n    // remove variables that can contain vue instances\n    matched: routeLocation.matched.map(matched => omit(matched, ['instances', 'children', 'aliasOf']))\n  });\n  return {\n    _custom: {\n      type: null,\n      readOnly: true,\n      display: routeLocation.fullPath,\n      tooltip,\n      value: copy\n    }\n  };\n}\nfunction formatDisplay(display) {\n  return {\n    _custom: {\n      display\n    }\n  };\n}\n// to support multiple router instances\nlet routerId = 0;\nfunction addDevtools(app, router, matcher) {\n  // Take over router.beforeEach and afterEach\n  // make sure we are not registering the devtool twice\n  if (router.__hasDevtools) return;\n  router.__hasDevtools = true;\n  // increment to support multiple router instances\n  const id = routerId++;\n  devtoolsApi.setupDevtoolsPlugin({\n    id: 'org.vuejs.router' + (id ? '.' + id : ''),\n    label: 'Vue Router',\n    packageName: 'vue-router',\n    homepage: 'https://router.vuejs.org',\n    logo: 'https://router.vuejs.org/logo.png',\n    componentStateTypes: ['Routing'],\n    app\n  }, api => {\n    // display state added by the router\n    api.on.inspectComponent((payload, ctx) => {\n      if (payload.instanceData) {\n        payload.instanceData.state.push({\n          type: 'Routing',\n          key: '$route',\n          editable: false,\n          value: formatRouteLocation(router.currentRoute.value, 'Current Route')\n        });\n      }\n    });\n    // mark router-link as active and display tags on router views\n    api.on.visitComponentTree(({\n      treeNode: node,\n      componentInstance\n    }) => {\n      if (componentInstance.__vrv_devtools) {\n        const info = componentInstance.__vrv_devtools;\n        node.tags.push({\n          label: (info.name ? `${info.name.toString()}: ` : '') + info.path,\n          textColor: 0,\n          tooltip: 'This component is rendered by &lt;router-view&gt;',\n          backgroundColor: PINK_500\n        });\n      }\n      // if multiple useLink are used\n      if (Array.isArray(componentInstance.__vrl_devtools)) {\n        componentInstance.__devtoolsApi = api;\n        componentInstance.__vrl_devtools.forEach(devtoolsData => {\n          let backgroundColor = ORANGE_400;\n          let tooltip = '';\n          if (devtoolsData.isExactActive) {\n            backgroundColor = LIME_500;\n            tooltip = 'This is exactly active';\n          } else if (devtoolsData.isActive) {\n            backgroundColor = BLUE_600;\n            tooltip = 'This link is active';\n          }\n          node.tags.push({\n            label: devtoolsData.route.path,\n            textColor: 0,\n            tooltip,\n            backgroundColor\n          });\n        });\n      }\n    });\n    vue.watch(router.currentRoute, () => {\n      // refresh active state\n      refreshRoutesView();\n      api.notifyComponentUpdate();\n      api.sendInspectorTree(routerInspectorId);\n      api.sendInspectorState(routerInspectorId);\n    });\n    const navigationsLayerId = 'router:navigations:' + id;\n    api.addTimelineLayer({\n      id: navigationsLayerId,\n      label: `Router${id ? ' ' + id : ''} Navigations`,\n      color: 0x40a8c4\n    });\n    // const errorsLayerId = 'router:errors'\n    // api.addTimelineLayer({\n    //   id: errorsLayerId,\n    //   label: 'Router Errors',\n    //   color: 0xea5455,\n    // })\n    router.onError((error, to) => {\n      api.addTimelineEvent({\n        layerId: navigationsLayerId,\n        event: {\n          title: 'Error during Navigation',\n          subtitle: to.fullPath,\n          logType: 'error',\n          time: Date.now(),\n          data: {\n            error\n          },\n          groupId: to.meta.__navigationId\n        }\n      });\n    });\n    // attached to `meta` and used to group events\n    let navigationId = 0;\n    router.beforeEach((to, from) => {\n      const data = {\n        guard: formatDisplay('beforeEach'),\n        from: formatRouteLocation(from, 'Current Location during this navigation'),\n        to: formatRouteLocation(to, 'Target location')\n      };\n      // Used to group navigations together, hide from devtools\n      Object.defineProperty(to.meta, '__navigationId', {\n        value: navigationId++\n      });\n      api.addTimelineEvent({\n        layerId: navigationsLayerId,\n        event: {\n          time: Date.now(),\n          title: 'Start of navigation',\n          subtitle: to.fullPath,\n          data,\n          groupId: to.meta.__navigationId\n        }\n      });\n    });\n    router.afterEach((to, from, failure) => {\n      const data = {\n        guard: formatDisplay('afterEach')\n      };\n      if (failure) {\n        data.failure = {\n          _custom: {\n            type: Error,\n            readOnly: true,\n            display: failure ? failure.message : '',\n            tooltip: 'Navigation Failure',\n            value: failure\n          }\n        };\n        data.status = formatDisplay('❌');\n      } else {\n        data.status = formatDisplay('✅');\n      }\n      // we set here to have the right order\n      data.from = formatRouteLocation(from, 'Current Location during this navigation');\n      data.to = formatRouteLocation(to, 'Target location');\n      api.addTimelineEvent({\n        layerId: navigationsLayerId,\n        event: {\n          title: 'End of navigation',\n          subtitle: to.fullPath,\n          time: Date.now(),\n          data,\n          logType: failure ? 'warning' : 'default',\n          groupId: to.meta.__navigationId\n        }\n      });\n    });\n    /**\r\n     * Inspector of Existing routes\r\n     */\n    const routerInspectorId = 'router-inspector:' + id;\n    api.addInspector({\n      id: routerInspectorId,\n      label: 'Routes' + (id ? ' ' + id : ''),\n      icon: 'book',\n      treeFilterPlaceholder: 'Search routes'\n    });\n    function refreshRoutesView() {\n      // the routes view isn't active\n      if (!activeRoutesPayload) return;\n      const payload = activeRoutesPayload;\n      // children routes will appear as nested\n      let routes = matcher.getRoutes().filter(route => !route.parent);\n      // reset match state to false\n      routes.forEach(resetMatchStateOnRouteRecord);\n      // apply a match state if there is a payload\n      if (payload.filter) {\n        routes = routes.filter(route =>\n        // save matches state based on the payload\n        isRouteMatching(route, payload.filter.toLowerCase()));\n      }\n      // mark active routes\n      routes.forEach(route => markRouteRecordActive(route, router.currentRoute.value));\n      payload.rootNodes = routes.map(formatRouteRecordForInspector);\n    }\n    let activeRoutesPayload;\n    api.on.getInspectorTree(payload => {\n      activeRoutesPayload = payload;\n      if (payload.app === app && payload.inspectorId === routerInspectorId) {\n        refreshRoutesView();\n      }\n    });\n    /**\r\n     * Display information about the currently selected route record\r\n     */\n    api.on.getInspectorState(payload => {\n      if (payload.app === app && payload.inspectorId === routerInspectorId) {\n        const routes = matcher.getRoutes();\n        const route = routes.find(route => route.record.__vd_id === payload.nodeId);\n        if (route) {\n          payload.state = {\n            options: formatRouteRecordMatcherForStateInspector(route)\n          };\n        }\n      }\n    });\n    api.sendInspectorTree(routerInspectorId);\n    api.sendInspectorState(routerInspectorId);\n  });\n}\nfunction modifierForKey(key) {\n  if (key.optional) {\n    return key.repeatable ? '*' : '?';\n  } else {\n    return key.repeatable ? '+' : '';\n  }\n}\nfunction formatRouteRecordMatcherForStateInspector(route) {\n  const {\n    record\n  } = route;\n  const fields = [{\n    editable: false,\n    key: 'path',\n    value: record.path\n  }];\n  if (record.name != null) {\n    fields.push({\n      editable: false,\n      key: 'name',\n      value: record.name\n    });\n  }\n  fields.push({\n    editable: false,\n    key: 'regexp',\n    value: route.re\n  });\n  if (route.keys.length) {\n    fields.push({\n      editable: false,\n      key: 'keys',\n      value: {\n        _custom: {\n          type: null,\n          readOnly: true,\n          display: route.keys.map(key => `${key.name}${modifierForKey(key)}`).join(' '),\n          tooltip: 'Param keys',\n          value: route.keys\n        }\n      }\n    });\n  }\n  if (record.redirect != null) {\n    fields.push({\n      editable: false,\n      key: 'redirect',\n      value: record.redirect\n    });\n  }\n  if (route.alias.length) {\n    fields.push({\n      editable: false,\n      key: 'aliases',\n      value: route.alias.map(alias => alias.record.path)\n    });\n  }\n  fields.push({\n    key: 'score',\n    editable: false,\n    value: {\n      _custom: {\n        type: null,\n        readOnly: true,\n        display: route.score.map(score => score.join(', ')).join(' | '),\n        tooltip: 'Score used to sort routes',\n        value: route.score\n      }\n    }\n  });\n  return fields;\n}\n/**\r\n * Extracted from tailwind palette\r\n */\nconst PINK_500 = 0xec4899;\nconst BLUE_600 = 0x2563eb;\nconst LIME_500 = 0x84cc16;\nconst CYAN_400 = 0x22d3ee;\nconst ORANGE_400 = 0xfb923c;\n// const GRAY_100 = 0xf4f4f5\nconst DARK = 0x666666;\nfunction formatRouteRecordForInspector(route) {\n  const tags = [];\n  const {\n    record\n  } = route;\n  if (record.name != null) {\n    tags.push({\n      label: String(record.name),\n      textColor: 0,\n      backgroundColor: CYAN_400\n    });\n  }\n  if (record.aliasOf) {\n    tags.push({\n      label: 'alias',\n      textColor: 0,\n      backgroundColor: ORANGE_400\n    });\n  }\n  if (route.__vd_match) {\n    tags.push({\n      label: 'matches',\n      textColor: 0,\n      backgroundColor: PINK_500\n    });\n  }\n  if (route.__vd_exactActive) {\n    tags.push({\n      label: 'exact',\n      textColor: 0,\n      backgroundColor: LIME_500\n    });\n  }\n  if (route.__vd_active) {\n    tags.push({\n      label: 'active',\n      textColor: 0,\n      backgroundColor: BLUE_600\n    });\n  }\n  if (record.redirect) {\n    tags.push({\n      label: 'redirect: ' + (typeof record.redirect === 'string' ? record.redirect : 'Object'),\n      textColor: 0xffffff,\n      backgroundColor: DARK\n    });\n  }\n  // add an id to be able to select it. Using the `path` is not possible because\n  // empty path children would collide with their parents\n  let id = record.__vd_id;\n  if (id == null) {\n    id = String(routeRecordId++);\n    record.__vd_id = id;\n  }\n  return {\n    id,\n    label: record.path,\n    tags,\n    children: route.children.map(formatRouteRecordForInspector)\n  };\n}\n//  incremental id for route records and inspector state\nlet routeRecordId = 0;\nconst EXTRACT_REGEXP_RE = /^\\/(.*)\\/([a-z]*)$/;\nfunction markRouteRecordActive(route, currentRoute) {\n  // no route will be active if matched is empty\n  // reset the matching state\n  const isExactActive = currentRoute.matched.length && isSameRouteRecord(currentRoute.matched[currentRoute.matched.length - 1], route.record);\n  route.__vd_exactActive = route.__vd_active = isExactActive;\n  if (!isExactActive) {\n    route.__vd_active = currentRoute.matched.some(match => isSameRouteRecord(match, route.record));\n  }\n  route.children.forEach(childRoute => markRouteRecordActive(childRoute, currentRoute));\n}\nfunction resetMatchStateOnRouteRecord(route) {\n  route.__vd_match = false;\n  route.children.forEach(resetMatchStateOnRouteRecord);\n}\nfunction isRouteMatching(route, filter) {\n  const found = String(route.re).match(EXTRACT_REGEXP_RE);\n  route.__vd_match = false;\n  if (!found || found.length < 3) {\n    return false;\n  }\n  // use a regexp without $ at the end to match nested routes better\n  const nonEndingRE = new RegExp(found[1].replace(/\\$$/, ''), found[2]);\n  if (nonEndingRE.test(filter)) {\n    // mark children as matches\n    route.children.forEach(child => isRouteMatching(child, filter));\n    // exception case: `/`\n    if (route.record.path !== '/' || filter === '/') {\n      route.__vd_match = route.re.test(filter);\n      return true;\n    }\n    // hide the / route\n    return false;\n  }\n  const path = route.record.path.toLowerCase();\n  const decodedPath = decode(path);\n  // also allow partial matching on the path\n  if (!filter.startsWith('/') && (decodedPath.includes(filter) || path.includes(filter))) return true;\n  if (decodedPath.startsWith(filter) || path.startsWith(filter)) return true;\n  if (route.record.name && String(route.record.name).includes(filter)) return true;\n  return route.children.some(child => isRouteMatching(child, filter));\n}\nfunction omit(obj, keys) {\n  const ret = {};\n  for (const key in obj) {\n    if (!keys.includes(key)) {\n      // @ts-expect-error\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}\n\n/**\r\n * Creates a Router instance that can be used by a Vue app.\r\n *\r\n * @param options - {@link RouterOptions}\r\n */\nfunction createRouter(options) {\n  const matcher = createRouterMatcher(options.routes, options);\n  const parseQuery$1 = options.parseQuery || parseQuery;\n  const stringifyQuery$1 = options.stringifyQuery || stringifyQuery;\n  const routerHistory = options.history;\n  if (!routerHistory) throw new Error('Provide the \"history\" option when calling \"createRouter()\":' + ' https://next.router.vuejs.org/api/#history.');\n  const beforeGuards = useCallbacks();\n  const beforeResolveGuards = useCallbacks();\n  const afterGuards = useCallbacks();\n  const currentRoute = vue.shallowRef(START_LOCATION_NORMALIZED);\n  let pendingLocation = START_LOCATION_NORMALIZED;\n  // leave the scrollRestoration if no scrollBehavior is provided\n  if (isBrowser && options.scrollBehavior && 'scrollRestoration' in history) {\n    history.scrollRestoration = 'manual';\n  }\n  const normalizeParams = applyToParams.bind(null, paramValue => '' + paramValue);\n  const encodeParams = applyToParams.bind(null, encodeParam);\n  const decodeParams =\n  // @ts-expect-error: intentionally avoid the type check\n  applyToParams.bind(null, decode);\n  function addRoute(parentOrRoute, route) {\n    let parent;\n    let record;\n    if (isRouteName(parentOrRoute)) {\n      parent = matcher.getRecordMatcher(parentOrRoute);\n      record = route;\n    } else {\n      record = parentOrRoute;\n    }\n    return matcher.addRoute(record, parent);\n  }\n  function removeRoute(name) {\n    const recordMatcher = matcher.getRecordMatcher(name);\n    if (recordMatcher) {\n      matcher.removeRoute(recordMatcher);\n    } else {\n      warn(`Cannot remove non-existent route \"${String(name)}\"`);\n    }\n  }\n  function getRoutes() {\n    return matcher.getRoutes().map(routeMatcher => routeMatcher.record);\n  }\n  function hasRoute(name) {\n    return !!matcher.getRecordMatcher(name);\n  }\n  function resolve(rawLocation, currentLocation) {\n    // const objectLocation = routerLocationAsObject(rawLocation)\n    // we create a copy to modify it later\n    currentLocation = assign({}, currentLocation || currentRoute.value);\n    if (typeof rawLocation === 'string') {\n      const locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);\n      const matchedRoute = matcher.resolve({\n        path: locationNormalized.path\n      }, currentLocation);\n      const href = routerHistory.createHref(locationNormalized.fullPath);\n      {\n        if (href.startsWith('//')) warn(`Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`);else if (!matchedRoute.matched.length) {\n          warn(`No match found for location with path \"${rawLocation}\"`);\n        }\n      }\n      // locationNormalized is always a new object\n      return assign(locationNormalized, matchedRoute, {\n        params: decodeParams(matchedRoute.params),\n        hash: decode(locationNormalized.hash),\n        redirectedFrom: undefined,\n        href\n      });\n    }\n    let matcherLocation;\n    // path could be relative in object as well\n    if ('path' in rawLocation) {\n      if ('params' in rawLocation && !('name' in rawLocation) &&\n      // @ts-expect-error: the type is never\n      Object.keys(rawLocation.params).length) {\n        warn(`Path \"${\n        // @ts-expect-error: the type is never\n        rawLocation.path}\" was passed with params but they will be ignored. Use a named route alongside params instead.`);\n      }\n      matcherLocation = assign({}, rawLocation, {\n        path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path\n      });\n    } else {\n      // remove any nullish param\n      const targetParams = assign({}, rawLocation.params);\n      for (const key in targetParams) {\n        if (targetParams[key] == null) {\n          delete targetParams[key];\n        }\n      }\n      // pass encoded values to the matcher so it can produce encoded path and fullPath\n      matcherLocation = assign({}, rawLocation, {\n        params: encodeParams(rawLocation.params)\n      });\n      // current location params are decoded, we need to encode them in case the\n      // matcher merges the params\n      currentLocation.params = encodeParams(currentLocation.params);\n    }\n    const matchedRoute = matcher.resolve(matcherLocation, currentLocation);\n    const hash = rawLocation.hash || '';\n    if (hash && !hash.startsWith('#')) {\n      warn(`A \\`hash\\` should always start with the character \"#\". Replace \"${hash}\" with \"#${hash}\".`);\n    }\n    // decoding them) the matcher might have merged current location params so\n    // we need to run the decoding again\n    matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));\n    const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {\n      hash: encodeHash(hash),\n      path: matchedRoute.path\n    }));\n    const href = routerHistory.createHref(fullPath);\n    {\n      if (href.startsWith('//')) {\n        warn(`Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`);\n      } else if (!matchedRoute.matched.length) {\n        warn(`No match found for location with path \"${'path' in rawLocation ? rawLocation.path : rawLocation}\"`);\n      }\n    }\n    return assign({\n      fullPath,\n      // keep the hash encoded so fullPath is effectively path + encodedQuery +\n      // hash\n      hash,\n      query:\n      // if the user is using a custom query lib like qs, we might have\n      // nested objects, so we keep the query as is, meaning it can contain\n      // numbers at `$route.query`, but at the point, the user will have to\n      // use their own type anyway.\n      // https://github.com/vuejs/router/issues/328#issuecomment-649481567\n      stringifyQuery$1 === stringifyQuery ? normalizeQuery(rawLocation.query) : rawLocation.query || {}\n    }, matchedRoute, {\n      redirectedFrom: undefined,\n      href\n    });\n  }\n  function locationAsObject(to) {\n    return typeof to === 'string' ? parseURL(parseQuery$1, to, currentRoute.value.path) : assign({}, to);\n  }\n  function checkCanceledNavigation(to, from) {\n    if (pendingLocation !== to) {\n      return createRouterError(8 /* NAVIGATION_CANCELLED */, {\n        from,\n        to\n      });\n    }\n  }\n  function push(to) {\n    return pushWithRedirect(to);\n  }\n  function replace(to) {\n    return push(assign(locationAsObject(to), {\n      replace: true\n    }));\n  }\n  function handleRedirectRecord(to) {\n    const lastMatched = to.matched[to.matched.length - 1];\n    if (lastMatched && lastMatched.redirect) {\n      const {\n        redirect\n      } = lastMatched;\n      let newTargetLocation = typeof redirect === 'function' ? redirect(to) : redirect;\n      if (typeof newTargetLocation === 'string') {\n        newTargetLocation = newTargetLocation.includes('?') || newTargetLocation.includes('#') ? newTargetLocation = locationAsObject(newTargetLocation) :\n        // force empty params\n        {\n          path: newTargetLocation\n        };\n        // @ts-expect-error: force empty params when a string is passed to let\n        // the router parse them again\n        newTargetLocation.params = {};\n      }\n      if (!('path' in newTargetLocation) && !('name' in newTargetLocation)) {\n        warn(`Invalid redirect found:\\n${JSON.stringify(newTargetLocation, null, 2)}\\n when navigating to \"${to.fullPath}\". A redirect must contain a name or path. This will break in production.`);\n        throw new Error('Invalid redirect');\n      }\n      return assign({\n        query: to.query,\n        hash: to.hash,\n        params: to.params\n      }, newTargetLocation);\n    }\n  }\n  function pushWithRedirect(to, redirectedFrom) {\n    const targetLocation = pendingLocation = resolve(to);\n    const from = currentRoute.value;\n    const data = to.state;\n    const force = to.force;\n    // to could be a string where `replace` is a function\n    const replace = to.replace === true;\n    const shouldRedirect = handleRedirectRecord(targetLocation);\n    if (shouldRedirect) return pushWithRedirect(assign(locationAsObject(shouldRedirect), {\n      state: data,\n      force,\n      replace\n    }),\n    // keep original redirectedFrom if it exists\n    redirectedFrom || targetLocation);\n    // if it was a redirect we already called `pushWithRedirect` above\n    const toLocation = targetLocation;\n    toLocation.redirectedFrom = redirectedFrom;\n    let failure;\n    if (!force && isSameRouteLocation(stringifyQuery$1, from, targetLocation)) {\n      failure = createRouterError(16 /* NAVIGATION_DUPLICATED */, {\n        to: toLocation,\n        from\n      });\n      // trigger scroll to allow scrolling to the same anchor\n      handleScroll(from, from,\n      // this is a push, the only way for it to be triggered from a\n      // history.listen is with a redirect, which makes it become a push\n      true,\n      // This cannot be the first navigation because the initial location\n      // cannot be manually navigated to\n      false);\n    }\n    return (failure ? Promise.resolve(failure) : navigate(toLocation, from)).catch(error => isNavigationFailure(error) ?\n    // navigation redirects still mark the router as ready\n    isNavigationFailure(error, 2 /* NAVIGATION_GUARD_REDIRECT */) ? error : markAsReady(error) // also returns the error\n    :\n    // reject any unknown error\n    triggerError(error, toLocation, from)).then(failure => {\n      if (failure) {\n        if (isNavigationFailure(failure, 2 /* NAVIGATION_GUARD_REDIRECT */)) {\n          if (\n          // we are redirecting to the same location we were already at\n          isSameRouteLocation(stringifyQuery$1, resolve(failure.to), toLocation) &&\n          // and we have done it a couple of times\n          redirectedFrom &&\n          // @ts-expect-error: added only in dev\n          (redirectedFrom._count = redirectedFrom._count ?\n          // @ts-expect-error\n          redirectedFrom._count + 1 : 1) > 10) {\n            warn(`Detected an infinite redirection in a navigation guard when going from \"${from.fullPath}\" to \"${toLocation.fullPath}\". Aborting to avoid a Stack Overflow. This will break in production if not fixed.`);\n            return Promise.reject(new Error('Infinite redirect in navigation guard'));\n          }\n          return pushWithRedirect(\n          // keep options\n          assign(locationAsObject(failure.to), {\n            state: data,\n            force,\n            replace\n          }),\n          // preserve the original redirectedFrom if any\n          redirectedFrom || toLocation);\n        }\n      } else {\n        // if we fail we don't finalize the navigation\n        failure = finalizeNavigation(toLocation, from, true, replace, data);\n      }\n      triggerAfterEach(toLocation, from, failure);\n      return failure;\n    });\n  }\n  /**\r\n   * Helper to reject and skip all navigation guards if a new navigation happened\r\n   * @param to\r\n   * @param from\r\n   */\n  function checkCanceledNavigationAndReject(to, from) {\n    const error = checkCanceledNavigation(to, from);\n    return error ? Promise.reject(error) : Promise.resolve();\n  }\n  // TODO: refactor the whole before guards by internally using router.beforeEach\n  function navigate(to, from) {\n    let guards;\n    const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to, from);\n    // all components here have been resolved once because we are leaving\n    guards = extractComponentsGuards(leavingRecords.reverse(), 'beforeRouteLeave', to, from);\n    // leavingRecords is already reversed\n    for (const record of leavingRecords) {\n      record.leaveGuards.forEach(guard => {\n        guards.push(guardToPromiseFn(guard, to, from));\n      });\n    }\n    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to, from);\n    guards.push(canceledNavigationCheck);\n    // run the queue of per route beforeRouteLeave guards\n    return runGuardQueue(guards).then(() => {\n      // check global guards beforeEach\n      guards = [];\n      for (const guard of beforeGuards.list()) {\n        guards.push(guardToPromiseFn(guard, to, from));\n      }\n      guards.push(canceledNavigationCheck);\n      return runGuardQueue(guards);\n    }).then(() => {\n      // check in components beforeRouteUpdate\n      guards = extractComponentsGuards(updatingRecords, 'beforeRouteUpdate', to, from);\n      for (const record of updatingRecords) {\n        record.updateGuards.forEach(guard => {\n          guards.push(guardToPromiseFn(guard, to, from));\n        });\n      }\n      guards.push(canceledNavigationCheck);\n      // run the queue of per route beforeEnter guards\n      return runGuardQueue(guards);\n    }).then(() => {\n      // check the route beforeEnter\n      guards = [];\n      for (const record of to.matched) {\n        // do not trigger beforeEnter on reused views\n        if (record.beforeEnter && !from.matched.includes(record)) {\n          if (Array.isArray(record.beforeEnter)) {\n            for (const beforeEnter of record.beforeEnter) guards.push(guardToPromiseFn(beforeEnter, to, from));\n          } else {\n            guards.push(guardToPromiseFn(record.beforeEnter, to, from));\n          }\n        }\n      }\n      guards.push(canceledNavigationCheck);\n      // run the queue of per route beforeEnter guards\n      return runGuardQueue(guards);\n    }).then(() => {\n      // NOTE: at this point to.matched is normalized and does not contain any () => Promise<Component>\n      // clear existing enterCallbacks, these are added by extractComponentsGuards\n      to.matched.forEach(record => record.enterCallbacks = {});\n      // check in-component beforeRouteEnter\n      guards = extractComponentsGuards(enteringRecords, 'beforeRouteEnter', to, from);\n      guards.push(canceledNavigationCheck);\n      // run the queue of per route beforeEnter guards\n      return runGuardQueue(guards);\n    }).then(() => {\n      // check global guards beforeResolve\n      guards = [];\n      for (const guard of beforeResolveGuards.list()) {\n        guards.push(guardToPromiseFn(guard, to, from));\n      }\n      guards.push(canceledNavigationCheck);\n      return runGuardQueue(guards);\n    })\n    // catch any navigation canceled\n    .catch(err => isNavigationFailure(err, 8 /* NAVIGATION_CANCELLED */) ? err : Promise.reject(err));\n  }\n  function triggerAfterEach(to, from, failure) {\n    // navigation is confirmed, call afterGuards\n    // TODO: wrap with error handlers\n    for (const guard of afterGuards.list()) guard(to, from, failure);\n  }\n  /**\r\n   * - Cleans up any navigation guards\r\n   * - Changes the url if necessary\r\n   * - Calls the scrollBehavior\r\n   */\n  function finalizeNavigation(toLocation, from, isPush, replace, data) {\n    // a more recent navigation took place\n    const error = checkCanceledNavigation(toLocation, from);\n    if (error) return error;\n    // only consider as push if it's not the first navigation\n    const isFirstNavigation = from === START_LOCATION_NORMALIZED;\n    const state = !isBrowser ? {} : history.state;\n    // change URL only if the user did a push/replace and if it's not the initial navigation because\n    // it's just reflecting the url\n    if (isPush) {\n      // on the initial navigation, we want to reuse the scroll position from\n      // history state if it exists\n      if (replace || isFirstNavigation) routerHistory.replace(toLocation.fullPath, assign({\n        scroll: isFirstNavigation && state && state.scroll\n      }, data));else routerHistory.push(toLocation.fullPath, data);\n    }\n    // accept current navigation\n    currentRoute.value = toLocation;\n    handleScroll(toLocation, from, isPush, isFirstNavigation);\n    markAsReady();\n  }\n  let removeHistoryListener;\n  // attach listener to history to trigger navigations\n  function setupListeners() {\n    removeHistoryListener = routerHistory.listen((to, _from, info) => {\n      // cannot be a redirect route because it was in history\n      const toLocation = resolve(to);\n      // due to dynamic routing, and to hash history with manual navigation\n      // (manually changing the url or calling history.hash = '#/somewhere'),\n      // there could be a redirect record in history\n      const shouldRedirect = handleRedirectRecord(toLocation);\n      if (shouldRedirect) {\n        pushWithRedirect(assign(shouldRedirect, {\n          replace: true\n        }), toLocation).catch(noop);\n        return;\n      }\n      pendingLocation = toLocation;\n      const from = currentRoute.value;\n      // TODO: should be moved to web history?\n      if (isBrowser) {\n        saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());\n      }\n      navigate(toLocation, from).catch(error => {\n        if (isNavigationFailure(error, 4 /* NAVIGATION_ABORTED */ | 8 /* NAVIGATION_CANCELLED */)) {\n          return error;\n        }\n        if (isNavigationFailure(error, 2 /* NAVIGATION_GUARD_REDIRECT */)) {\n          // Here we could call if (info.delta) routerHistory.go(-info.delta,\n          // false) but this is bug prone as we have no way to wait the\n          // navigation to be finished before calling pushWithRedirect. Using\n          // a setTimeout of 16ms seems to work but there is not guarantee for\n          // it to work on every browser. So Instead we do not restore the\n          // history entry and trigger a new navigation as requested by the\n          // navigation guard.\n          // the error is already handled by router.push we just want to avoid\n          // logging the error\n          pushWithRedirect(error.to, toLocation\n          // avoid an uncaught rejection, let push call triggerError\n          ).then(failure => {\n            // manual change in hash history #916 ending up in the URL not\n            // changing but it was changed by the manual url change, so we\n            // need to manually change it ourselves\n            if (isNavigationFailure(failure, 4 /* NAVIGATION_ABORTED */ | 16 /* NAVIGATION_DUPLICATED */) && !info.delta && info.type === NavigationType.pop) {\n              routerHistory.go(-1, false);\n            }\n          }).catch(noop);\n          // avoid the then branch\n          return Promise.reject();\n        }\n        // do not restore history on unknown direction\n        if (info.delta) routerHistory.go(-info.delta, false);\n        // unrecognized error, transfer to the global handler\n        return triggerError(error, toLocation, from);\n      }).then(failure => {\n        failure = failure || finalizeNavigation(\n        // after navigation, all matched components are resolved\n        toLocation, from, false);\n        // revert the navigation\n        if (failure) {\n          if (info.delta) {\n            routerHistory.go(-info.delta, false);\n          } else if (info.type === NavigationType.pop && isNavigationFailure(failure, 4 /* NAVIGATION_ABORTED */ | 16 /* NAVIGATION_DUPLICATED */)) {\n            // manual change in hash history #916\n            // it's like a push but lacks the information of the direction\n            routerHistory.go(-1, false);\n          }\n        }\n        triggerAfterEach(toLocation, from, failure);\n      }).catch(noop);\n    });\n  }\n  // Initialization and Errors\n  let readyHandlers = useCallbacks();\n  let errorHandlers = useCallbacks();\n  let ready;\n  /**\r\n   * Trigger errorHandlers added via onError and throws the error as well\r\n   *\r\n   * @param error - error to throw\r\n   * @param to - location we were navigating to when the error happened\r\n   * @param from - location we were navigating from when the error happened\r\n   * @returns the error as a rejected promise\r\n   */\n  function triggerError(error, to, from) {\n    markAsReady(error);\n    const list = errorHandlers.list();\n    if (list.length) {\n      list.forEach(handler => handler(error, to, from));\n    } else {\n      {\n        warn('uncaught error during route navigation:');\n      }\n      console.error(error);\n    }\n    return Promise.reject(error);\n  }\n  function isReady() {\n    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED) return Promise.resolve();\n    return new Promise((resolve, reject) => {\n      readyHandlers.add([resolve, reject]);\n    });\n  }\n  function markAsReady(err) {\n    if (!ready) {\n      // still not ready if an error happened\n      ready = !err;\n      setupListeners();\n      readyHandlers.list().forEach(([resolve, reject]) => err ? reject(err) : resolve());\n      readyHandlers.reset();\n    }\n    return err;\n  }\n  // Scroll behavior\n  function handleScroll(to, from, isPush, isFirstNavigation) {\n    const {\n      scrollBehavior\n    } = options;\n    if (!isBrowser || !scrollBehavior) return Promise.resolve();\n    const scrollPosition = !isPush && getSavedScrollPosition(getScrollKey(to.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;\n    return vue.nextTick().then(() => scrollBehavior(to, from, scrollPosition)).then(position => position && scrollToPosition(position)).catch(err => triggerError(err, to, from));\n  }\n  const go = delta => routerHistory.go(delta);\n  let started;\n  const installedApps = new Set();\n  const router = {\n    currentRoute,\n    addRoute,\n    removeRoute,\n    hasRoute,\n    getRoutes,\n    resolve,\n    options,\n    push,\n    replace,\n    go,\n    back: () => go(-1),\n    forward: () => go(1),\n    beforeEach: beforeGuards.add,\n    beforeResolve: beforeResolveGuards.add,\n    afterEach: afterGuards.add,\n    onError: errorHandlers.add,\n    isReady,\n    install(app) {\n      const router = this;\n      app.component('RouterLink', RouterLink);\n      app.component('RouterView', RouterView);\n      app.config.globalProperties.$router = router;\n      Object.defineProperty(app.config.globalProperties, '$route', {\n        enumerable: true,\n        get: () => vue.unref(currentRoute)\n      });\n      // this initial navigation is only necessary on client, on server it doesn't\n      // make sense because it will create an extra unnecessary navigation and could\n      // lead to problems\n      if (isBrowser &&\n      // used for the initial navigation client side to avoid pushing\n      // multiple times when the router is used in multiple apps\n      !started && currentRoute.value === START_LOCATION_NORMALIZED) {\n        // see above\n        started = true;\n        push(routerHistory.location).catch(err => {\n          warn('Unexpected error when starting the router:', err);\n        });\n      }\n      const reactiveRoute = {};\n      for (const key in START_LOCATION_NORMALIZED) {\n        // @ts-expect-error: the key matches\n        reactiveRoute[key] = vue.computed(() => currentRoute.value[key]);\n      }\n      app.provide(routerKey, router);\n      app.provide(routeLocationKey, vue.reactive(reactiveRoute));\n      app.provide(routerViewLocationKey, currentRoute);\n      const unmountApp = app.unmount;\n      installedApps.add(app);\n      app.unmount = function () {\n        installedApps.delete(app);\n        // the router is not attached to an app anymore\n        if (installedApps.size < 1) {\n          // invalidate the current navigation\n          pendingLocation = START_LOCATION_NORMALIZED;\n          removeHistoryListener && removeHistoryListener();\n          currentRoute.value = START_LOCATION_NORMALIZED;\n          started = false;\n          ready = false;\n        }\n        unmountApp();\n      };\n      if (isBrowser) {\n        addDevtools(app, router, matcher);\n      }\n    }\n  };\n  return router;\n}\nfunction runGuardQueue(guards) {\n  return guards.reduce((promise, guard) => promise.then(() => guard()), Promise.resolve());\n}\nfunction extractChangingRecords(to, from) {\n  const leavingRecords = [];\n  const updatingRecords = [];\n  const enteringRecords = [];\n  const len = Math.max(from.matched.length, to.matched.length);\n  for (let i = 0; i < len; i++) {\n    const recordFrom = from.matched[i];\n    if (recordFrom) {\n      if (to.matched.find(record => isSameRouteRecord(record, recordFrom))) updatingRecords.push(recordFrom);else leavingRecords.push(recordFrom);\n    }\n    const recordTo = to.matched[i];\n    if (recordTo) {\n      // the type doesn't matter because we are comparing per reference\n      if (!from.matched.find(record => isSameRouteRecord(record, recordTo))) {\n        enteringRecords.push(recordTo);\n      }\n    }\n  }\n  return [leavingRecords, updatingRecords, enteringRecords];\n}\n\n/**\r\n * Returns the router instance. Equivalent to using `$router` inside\r\n * templates.\r\n */\nfunction useRouter() {\n  return vue.inject(routerKey);\n}\n/**\r\n * Returns the current route location. Equivalent to using `$route` inside\r\n * templates.\r\n */\nfunction useRoute() {\n  return vue.inject(routeLocationKey);\n}\nexports.RouterLink = RouterLink;\nexports.RouterView = RouterView;\nexports.START_LOCATION = START_LOCATION_NORMALIZED;\nexports.createMemoryHistory = createMemoryHistory;\nexports.createRouter = createRouter;\nexports.createRouterMatcher = createRouterMatcher;\nexports.createWebHashHistory = createWebHashHistory;\nexports.createWebHistory = createWebHistory;\nexports.isNavigationFailure = isNavigationFailure;\nexports.matchedRouteKey = matchedRouteKey;\nexports.onBeforeRouteLeave = onBeforeRouteLeave;\nexports.onBeforeRouteUpdate = onBeforeRouteUpdate;\nexports.parseQuery = parseQuery;\nexports.routeLocationKey = routeLocationKey;\nexports.routerKey = routerKey;\nexports.routerViewLocationKey = routerViewLocationKey;\nexports.stringifyQuery = stringifyQuery;\nexports.useLink = useLink;\nexports.useRoute = useRoute;\nexports.useRouter = useRouter;\nexports.viewDepthKey = viewDepthKey;","map":{"version":3,"names":["require","Object","defineProperty","exports","value","vue","devtoolsApi","hasSymbol","Symbol","toStringTag","PolySymbol","name","matchedRouteKey","viewDepthKey","routerKey","routeLocationKey","routerViewLocationKey","isBrowser","window","isESModule","obj","__esModule","assign","applyToParams","fn","params","newParams","key","Array","isArray","map","noop","warn","msg","args","from","arguments","slice","console","apply","concat","TRAILING_SLASH_RE","removeTrailingSlash","path","replace","parseURL","parseQuery","location","currentLocation","query","searchString","hash","searchPos","indexOf","hashPos","length","resolveRelativePath","fullPath","stringifyURL","stringifyQuery","stripBase","pathname","base","toLowerCase","startsWith","isSameRouteLocation","a","b","aLastIndex","matched","bLastIndex","isSameRouteRecord","isSameRouteLocationParams","aliasOf","keys","isSameRouteLocationParamsValue","isEquivalentArray","every","i","to","fromSegments","split","toSegments","position","toPosition","segment","join","NavigationType","NavigationDirection","START","normalizeBase","baseEl","document","querySelector","getAttribute","BEFORE_HASH_RE","createHref","getElementPosition","el","offset","docRect","documentElement","getBoundingClientRect","elRect","behavior","left","top","computeScrollPosition","pageXOffset","pageYOffset","scrollToPosition","scrollToOptions","positionEl","isIdSelector","getElementById","foundEl","err","style","scrollTo","getScrollKey","delta","history","state","scrollPositions","Map","saveScrollPosition","scrollPosition","set","getSavedScrollPosition","scroll","get","delete","createBaseLocation","protocol","host","createCurrentLocation","search","slicePos","includes","pathFromHash","useHistoryListeners","historyState","listeners","teardowns","pauseState","popStateHandler","fromState","forEach","listener","type","pop","direction","forward","back","unknown","pauseListeners","listen","callback","push","teardown","index","splice","beforeUnloadListener","replaceState","destroy","removeEventListener","addEventListener","buildState","current","replaced","computeScroll","useHistoryStateNavigation","changeLocation","hashIndex","url","data","currentState","createWebHistory","historyNavigation","historyListeners","go","triggerListeners","routerHistory","bind","enumerable","createMemoryHistory","queue","setLocation","info","shouldTrigger","Math","max","min","createWebHashHistory","endsWith","isRouteLocation","route","isRouteName","START_LOCATION_NORMALIZED","undefined","meta","redirectedFrom","NavigationFailureSymbol","NavigationFailureType","ErrorTypeMessages","JSON","stringify","stringifyRoute","createRouterError","Error","isNavigationFailure","error","propertiesToLog","BASE_PARAM_PATTERN","BASE_PATH_PARSER_OPTIONS","sensitive","strict","start","end","REGEX_CHARS_RE","tokensToParser","segments","extraOptions","options","score","pattern","segmentScores","tokenIndex","token","subSegmentScore","repeatable","optional","regexp","re","RegExp","message","subPattern","parse","match","avoidDuplicatedSlash","param","text","compareScoreArray","diff","comparePathParserScore","aScore","bScore","comp","ROOT_TOKEN","VALID_PARAM_RE","tokenizePath","crash","buffer","previousState","tokens","finalizeSegment","char","customRe","consumeBuffer","addCharToBuffer","test","createRouteRecordMatcher","record","parent","parser","existingKeys","Set","has","add","matcher","children","alias","createRouterMatcher","routes","globalOptions","matchers","matcherMap","mergeOptions","getRecordMatcher","addRoute","originalRecord","isRootAdd","mainNormalizedRecord","normalizeRouteRecord","normalizedRecords","aliases","components","originalMatcher","normalizedRecord","parentPath","connectingSlash","checkMissingParamsInAbsolutePath","checkSameParams","isAliasRecord","removeRoute","insertMatcher","matcherRef","getRoutes","isRecordChildOf","resolve","paramsFromLocation","filter","k","find","m","parentMatcher","unshift","mergeMetaFields","redirect","beforeEnter","props","normalizeRecordProps","instances","leaveGuards","updateGuards","enterCallbacks","default","component","propsObject","reduce","defaults","partialOptions","isSameParam","some","child","HASH_RE","AMPERSAND_RE","SLASH_RE","EQUAL_RE","IM_RE","PLUS_RE","ENC_BRACKET_OPEN_RE","ENC_BRACKET_CLOSE_RE","ENC_CARET_RE","ENC_BACKTICK_RE","ENC_CURLY_OPEN_RE","ENC_PIPE_RE","ENC_CURLY_CLOSE_RE","ENC_SPACE_RE","commonEncode","encodeURI","encodeHash","encodeQueryValue","encodeQueryKey","encodePath","encodeParam","decode","decodeURIComponent","hasLeadingIM","searchParams","searchParam","eqPos","currentValue","values","v","normalizeQuery","normalizedQuery","useCallbacks","handlers","handler","reset","list","registerGuard","guard","removeFromList","onUnmounted","onDeactivated","onActivated","onBeforeRouteLeave","leaveGuard","getCurrentInstance","activeRecord","inject","onBeforeRouteUpdate","updateGuard","guardToPromiseFn","enterCallbackArray","Promise","reject","next","valid","guardReturn","call","canOnlyBeCalledOnce","guardCall","then","toString","resolvedValue","_called","catch","called","extractComponentsGuards","guardType","guards","rawComponent","String","promise","__asyncLoader","__warnedDefineAsync","isRouteComponent","__vccOpts","componentPromise","resolved","resolvedComponent","useLink","router","currentRoute","computed","unref","activeRecordIndex","routeMatched","currentMatched","findIndex","parentRecordPath","getOriginalPath","isActive","includesParams","isExactActive","navigate","e","guardEvent","instance","linkContextDevtools","__vrl_devtools","watchEffect","flush","href","RouterLinkImpl","defineComponent","required","Boolean","activeClass","exactActiveClass","custom","ariaCurrentValue","setup","slots","link","reactive","elClass","getLinkClass","linkActiveClass","linkExactActiveClass","h","onClick","class","RouterLink","metaKey","altKey","ctrlKey","shiftKey","defaultPrevented","button","currentTarget","target","preventDefault","outer","inner","innerValue","outerValue","propClass","globalClass","defaultClass","RouterViewImpl","inheritAttrs","attrs","warnDeprecatedUsage","injectedRoute","routeToDisplay","depth","matchedRouteRef","provide","viewRef","ref","watch","oldInstance","oldName","size","matchedRoute","ViewComponent","currentName","normalizeSlot","Component","routePropsOption","routeProps","onVnodeUnmounted","vnode","isUnmounted","internalInstances","r","__vrv_devtools","slot","slotContent","RouterView","parentName","formatRouteLocation","routeLocation","tooltip","copy","omit","_custom","readOnly","display","formatDisplay","routerId","addDevtools","app","__hasDevtools","id","setupDevtoolsPlugin","label","packageName","homepage","logo","componentStateTypes","api","on","inspectComponent","payload","ctx","instanceData","editable","visitComponentTree","treeNode","node","componentInstance","tags","textColor","backgroundColor","PINK_500","__devtoolsApi","devtoolsData","ORANGE_400","LIME_500","BLUE_600","refreshRoutesView","notifyComponentUpdate","sendInspectorTree","routerInspectorId","sendInspectorState","navigationsLayerId","addTimelineLayer","color","onError","addTimelineEvent","layerId","event","title","subtitle","logType","time","Date","now","groupId","__navigationId","navigationId","beforeEach","afterEach","failure","status","addInspector","icon","treeFilterPlaceholder","activeRoutesPayload","resetMatchStateOnRouteRecord","isRouteMatching","markRouteRecordActive","rootNodes","formatRouteRecordForInspector","getInspectorTree","inspectorId","getInspectorState","__vd_id","nodeId","formatRouteRecordMatcherForStateInspector","modifierForKey","fields","CYAN_400","DARK","__vd_match","__vd_exactActive","__vd_active","routeRecordId","EXTRACT_REGEXP_RE","childRoute","found","nonEndingRE","decodedPath","ret","createRouter","parseQuery$1","stringifyQuery$1","beforeGuards","beforeResolveGuards","afterGuards","shallowRef","pendingLocation","scrollBehavior","scrollRestoration","normalizeParams","paramValue","encodeParams","decodeParams","parentOrRoute","recordMatcher","routeMatcher","hasRoute","rawLocation","locationNormalized","matcherLocation","targetParams","locationAsObject","checkCanceledNavigation","pushWithRedirect","handleRedirectRecord","lastMatched","newTargetLocation","targetLocation","force","shouldRedirect","toLocation","handleScroll","markAsReady","triggerError","_count","finalizeNavigation","triggerAfterEach","checkCanceledNavigationAndReject","leavingRecords","updatingRecords","enteringRecords","extractChangingRecords","reverse","canceledNavigationCheck","runGuardQueue","isPush","isFirstNavigation","removeHistoryListener","setupListeners","_from","readyHandlers","errorHandlers","ready","isReady","nextTick","started","installedApps","beforeResolve","install","config","globalProperties","$router","reactiveRoute","unmountApp","unmount","len","recordFrom","recordTo","useRouter","useRoute","START_LOCATION"],"sources":["C:/Users/HP-15/Desktop/parlouradmin/parlouradmin/node_modules/vue-router/dist/vue-router.cjs.js"],"sourcesContent":["/*!\n  * vue-router v4.0.13\n  * (c) 2022 Eduardo San Martin Morote\n  * @license MIT\n  */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar vue = require('vue');\nvar devtoolsApi = require('@vue/devtools-api');\n\nconst hasSymbol = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\r\nconst PolySymbol = (name) => \r\n// vr = vue router\r\nhasSymbol\r\n    ? Symbol('[vue-router]: ' + name )\r\n    : ('[vue-router]: ' ) + name;\r\n// rvlm = Router View Location Matched\r\n/**\r\n * RouteRecord being rendered by the closest ancestor Router View. Used for\r\n * `onBeforeRouteUpdate` and `onBeforeRouteLeave`. rvlm stands for Router View\r\n * Location Matched\r\n *\r\n * @internal\r\n */\r\nconst matchedRouteKey = /*#__PURE__*/ PolySymbol('router view location matched' );\r\n/**\r\n * Allows overriding the router view depth to control which component in\r\n * `matched` is rendered. rvd stands for Router View Depth\r\n *\r\n * @internal\r\n */\r\nconst viewDepthKey = /*#__PURE__*/ PolySymbol('router view depth' );\r\n/**\r\n * Allows overriding the router instance returned by `useRouter` in tests. r\r\n * stands for router\r\n *\r\n * @internal\r\n */\r\nconst routerKey = /*#__PURE__*/ PolySymbol('router' );\r\n/**\r\n * Allows overriding the current route returned by `useRoute` in tests. rl\r\n * stands for route location\r\n *\r\n * @internal\r\n */\r\nconst routeLocationKey = /*#__PURE__*/ PolySymbol('route location' );\r\n/**\r\n * Allows overriding the current route used by router-view. Internally this is\r\n * used when the `route` prop is passed.\r\n *\r\n * @internal\r\n */\r\nconst routerViewLocationKey = /*#__PURE__*/ PolySymbol('router view location' );\n\nconst isBrowser = typeof window !== 'undefined';\n\nfunction isESModule(obj) {\r\n    return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module');\r\n}\r\nconst assign = Object.assign;\r\nfunction applyToParams(fn, params) {\r\n    const newParams = {};\r\n    for (const key in params) {\r\n        const value = params[key];\r\n        newParams[key] = Array.isArray(value) ? value.map(fn) : fn(value);\r\n    }\r\n    return newParams;\r\n}\r\nconst noop = () => { };\n\nfunction warn(msg) {\r\n    // avoid using ...args as it breaks in older Edge builds\r\n    const args = Array.from(arguments).slice(1);\r\n    console.warn.apply(console, ['[Vue Router warn]: ' + msg].concat(args));\r\n}\n\nconst TRAILING_SLASH_RE = /\\/$/;\r\nconst removeTrailingSlash = (path) => path.replace(TRAILING_SLASH_RE, '');\r\n/**\r\n * Transforms an URI into a normalized history location\r\n *\r\n * @param parseQuery\r\n * @param location - URI to normalize\r\n * @param currentLocation - current absolute location. Allows resolving relative\r\n * paths. Must start with `/`. Defaults to `/`\r\n * @returns a normalized history location\r\n */\r\nfunction parseURL(parseQuery, location, currentLocation = '/') {\r\n    let path, query = {}, searchString = '', hash = '';\r\n    // Could use URL and URLSearchParams but IE 11 doesn't support it\r\n    const searchPos = location.indexOf('?');\r\n    const hashPos = location.indexOf('#', searchPos > -1 ? searchPos : 0);\r\n    if (searchPos > -1) {\r\n        path = location.slice(0, searchPos);\r\n        searchString = location.slice(searchPos + 1, hashPos > -1 ? hashPos : location.length);\r\n        query = parseQuery(searchString);\r\n    }\r\n    if (hashPos > -1) {\r\n        path = path || location.slice(0, hashPos);\r\n        // keep the # character\r\n        hash = location.slice(hashPos, location.length);\r\n    }\r\n    // no search and no query\r\n    path = resolveRelativePath(path != null ? path : location, currentLocation);\r\n    // empty path means a relative query or hash `?foo=f`, `#thing`\r\n    return {\r\n        fullPath: path + (searchString && '?') + searchString + hash,\r\n        path,\r\n        query,\r\n        hash,\r\n    };\r\n}\r\n/**\r\n * Stringifies a URL object\r\n *\r\n * @param stringifyQuery\r\n * @param location\r\n */\r\nfunction stringifyURL(stringifyQuery, location) {\r\n    const query = location.query ? stringifyQuery(location.query) : '';\r\n    return location.path + (query && '?') + query + (location.hash || '');\r\n}\r\n/**\r\n * Strips off the base from the beginning of a location.pathname in a non\r\n * case-sensitive way.\r\n *\r\n * @param pathname - location.pathname\r\n * @param base - base to strip off\r\n */\r\nfunction stripBase(pathname, base) {\r\n    // no base or base is not found at the beginning\r\n    if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))\r\n        return pathname;\r\n    return pathname.slice(base.length) || '/';\r\n}\r\n/**\r\n * Checks if two RouteLocation are equal. This means that both locations are\r\n * pointing towards the same {@link RouteRecord} and that all `params`, `query`\r\n * parameters and `hash` are the same\r\n *\r\n * @param a - first {@link RouteLocation}\r\n * @param b - second {@link RouteLocation}\r\n */\r\nfunction isSameRouteLocation(stringifyQuery, a, b) {\r\n    const aLastIndex = a.matched.length - 1;\r\n    const bLastIndex = b.matched.length - 1;\r\n    return (aLastIndex > -1 &&\r\n        aLastIndex === bLastIndex &&\r\n        isSameRouteRecord(a.matched[aLastIndex], b.matched[bLastIndex]) &&\r\n        isSameRouteLocationParams(a.params, b.params) &&\r\n        stringifyQuery(a.query) === stringifyQuery(b.query) &&\r\n        a.hash === b.hash);\r\n}\r\n/**\r\n * Check if two `RouteRecords` are equal. Takes into account aliases: they are\r\n * considered equal to the `RouteRecord` they are aliasing.\r\n *\r\n * @param a - first {@link RouteRecord}\r\n * @param b - second {@link RouteRecord}\r\n */\r\nfunction isSameRouteRecord(a, b) {\r\n    // since the original record has an undefined value for aliasOf\r\n    // but all aliases point to the original record, this will always compare\r\n    // the original record\r\n    return (a.aliasOf || a) === (b.aliasOf || b);\r\n}\r\nfunction isSameRouteLocationParams(a, b) {\r\n    if (Object.keys(a).length !== Object.keys(b).length)\r\n        return false;\r\n    for (const key in a) {\r\n        if (!isSameRouteLocationParamsValue(a[key], b[key]))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nfunction isSameRouteLocationParamsValue(a, b) {\r\n    return Array.isArray(a)\r\n        ? isEquivalentArray(a, b)\r\n        : Array.isArray(b)\r\n            ? isEquivalentArray(b, a)\r\n            : a === b;\r\n}\r\n/**\r\n * Check if two arrays are the same or if an array with one single entry is the\r\n * same as another primitive value. Used to check query and parameters\r\n *\r\n * @param a - array of values\r\n * @param b - array of values or a single value\r\n */\r\nfunction isEquivalentArray(a, b) {\r\n    return Array.isArray(b)\r\n        ? a.length === b.length && a.every((value, i) => value === b[i])\r\n        : a.length === 1 && a[0] === b;\r\n}\r\n/**\r\n * Resolves a relative path that starts with `.`.\r\n *\r\n * @param to - path location we are resolving\r\n * @param from - currentLocation.path, should start with `/`\r\n */\r\nfunction resolveRelativePath(to, from) {\r\n    if (to.startsWith('/'))\r\n        return to;\r\n    if (!from.startsWith('/')) {\r\n        warn(`Cannot resolve a relative location without an absolute path. Trying to resolve \"${to}\" from \"${from}\". It should look like \"/${from}\".`);\r\n        return to;\r\n    }\r\n    if (!to)\r\n        return from;\r\n    const fromSegments = from.split('/');\r\n    const toSegments = to.split('/');\r\n    let position = fromSegments.length - 1;\r\n    let toPosition;\r\n    let segment;\r\n    for (toPosition = 0; toPosition < toSegments.length; toPosition++) {\r\n        segment = toSegments[toPosition];\r\n        // can't go below zero\r\n        if (position === 1 || segment === '.')\r\n            continue;\r\n        if (segment === '..')\r\n            position--;\r\n        // found something that is not relative path\r\n        else\r\n            break;\r\n    }\r\n    return (fromSegments.slice(0, position).join('/') +\r\n        '/' +\r\n        toSegments\r\n            .slice(toPosition - (toPosition === toSegments.length ? 1 : 0))\r\n            .join('/'));\r\n}\n\nvar NavigationType;\r\n(function (NavigationType) {\r\n    NavigationType[\"pop\"] = \"pop\";\r\n    NavigationType[\"push\"] = \"push\";\r\n})(NavigationType || (NavigationType = {}));\r\nvar NavigationDirection;\r\n(function (NavigationDirection) {\r\n    NavigationDirection[\"back\"] = \"back\";\r\n    NavigationDirection[\"forward\"] = \"forward\";\r\n    NavigationDirection[\"unknown\"] = \"\";\r\n})(NavigationDirection || (NavigationDirection = {}));\r\n/**\r\n * Starting location for Histories\r\n */\r\nconst START = '';\r\n// Generic utils\r\n/**\r\n * Normalizes a base by removing any trailing slash and reading the base tag if\r\n * present.\r\n *\r\n * @param base - base to normalize\r\n */\r\nfunction normalizeBase(base) {\r\n    if (!base) {\r\n        if (isBrowser) {\r\n            // respect <base> tag\r\n            const baseEl = document.querySelector('base');\r\n            base = (baseEl && baseEl.getAttribute('href')) || '/';\r\n            // strip full URL origin\r\n            base = base.replace(/^\\w+:\\/\\/[^\\/]+/, '');\r\n        }\r\n        else {\r\n            base = '/';\r\n        }\r\n    }\r\n    // ensure leading slash when it was removed by the regex above avoid leading\r\n    // slash with hash because the file could be read from the disk like file://\r\n    // and the leading slash would cause problems\r\n    if (base[0] !== '/' && base[0] !== '#')\r\n        base = '/' + base;\r\n    // remove the trailing slash so all other method can just do `base + fullPath`\r\n    // to build an href\r\n    return removeTrailingSlash(base);\r\n}\r\n// remove any character before the hash\r\nconst BEFORE_HASH_RE = /^[^#]+#/;\r\nfunction createHref(base, location) {\r\n    return base.replace(BEFORE_HASH_RE, '#') + location;\r\n}\n\nfunction getElementPosition(el, offset) {\r\n    const docRect = document.documentElement.getBoundingClientRect();\r\n    const elRect = el.getBoundingClientRect();\r\n    return {\r\n        behavior: offset.behavior,\r\n        left: elRect.left - docRect.left - (offset.left || 0),\r\n        top: elRect.top - docRect.top - (offset.top || 0),\r\n    };\r\n}\r\nconst computeScrollPosition = () => ({\r\n    left: window.pageXOffset,\r\n    top: window.pageYOffset,\r\n});\r\nfunction scrollToPosition(position) {\r\n    let scrollToOptions;\r\n    if ('el' in position) {\r\n        const positionEl = position.el;\r\n        const isIdSelector = typeof positionEl === 'string' && positionEl.startsWith('#');\r\n        /**\r\n         * `id`s can accept pretty much any characters, including CSS combinators\r\n         * like `>` or `~`. It's still possible to retrieve elements using\r\n         * `document.getElementById('~')` but it needs to be escaped when using\r\n         * `document.querySelector('#\\\\~')` for it to be valid. The only\r\n         * requirements for `id`s are them to be unique on the page and to not be\r\n         * empty (`id=\"\"`). Because of that, when passing an id selector, it should\r\n         * be properly escaped for it to work with `querySelector`. We could check\r\n         * for the id selector to be simple (no CSS combinators `+ >~`) but that\r\n         * would make things inconsistent since they are valid characters for an\r\n         * `id` but would need to be escaped when using `querySelector`, breaking\r\n         * their usage and ending up in no selector returned. Selectors need to be\r\n         * escaped:\r\n         *\r\n         * - `#1-thing` becomes `#\\31 -thing`\r\n         * - `#with~symbols` becomes `#with\\\\~symbols`\r\n         *\r\n         * - More information about  the topic can be found at\r\n         *   https://mathiasbynens.be/notes/html5-id-class.\r\n         * - Practical example: https://mathiasbynens.be/demo/html5-id\r\n         */\r\n        if (typeof position.el === 'string') {\r\n            if (!isIdSelector || !document.getElementById(position.el.slice(1))) {\r\n                try {\r\n                    const foundEl = document.querySelector(position.el);\r\n                    if (isIdSelector && foundEl) {\r\n                        warn(`The selector \"${position.el}\" should be passed as \"el: document.querySelector('${position.el}')\" because it starts with \"#\".`);\r\n                        // return to avoid other warnings\r\n                        return;\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    warn(`The selector \"${position.el}\" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`);\r\n                    // return to avoid other warnings\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        const el = typeof positionEl === 'string'\r\n            ? isIdSelector\r\n                ? document.getElementById(positionEl.slice(1))\r\n                : document.querySelector(positionEl)\r\n            : positionEl;\r\n        if (!el) {\r\n            warn(`Couldn't find element using selector \"${position.el}\" returned by scrollBehavior.`);\r\n            return;\r\n        }\r\n        scrollToOptions = getElementPosition(el, position);\r\n    }\r\n    else {\r\n        scrollToOptions = position;\r\n    }\r\n    if ('scrollBehavior' in document.documentElement.style)\r\n        window.scrollTo(scrollToOptions);\r\n    else {\r\n        window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);\r\n    }\r\n}\r\nfunction getScrollKey(path, delta) {\r\n    const position = history.state ? history.state.position - delta : -1;\r\n    return position + path;\r\n}\r\nconst scrollPositions = new Map();\r\nfunction saveScrollPosition(key, scrollPosition) {\r\n    scrollPositions.set(key, scrollPosition);\r\n}\r\nfunction getSavedScrollPosition(key) {\r\n    const scroll = scrollPositions.get(key);\r\n    // consume it so it's not used again\r\n    scrollPositions.delete(key);\r\n    return scroll;\r\n}\r\n// TODO: RFC about how to save scroll position\r\n/**\r\n * ScrollBehavior instance used by the router to compute and restore the scroll\r\n * position when navigating.\r\n */\r\n// export interface ScrollHandler<ScrollPositionEntry extends HistoryStateValue, ScrollPosition extends ScrollPositionEntry> {\r\n//   // returns a scroll position that can be saved in history\r\n//   compute(): ScrollPositionEntry\r\n//   // can take an extended ScrollPositionEntry\r\n//   scroll(position: ScrollPosition): void\r\n// }\r\n// export const scrollHandler: ScrollHandler<ScrollPosition> = {\r\n//   compute: computeScroll,\r\n//   scroll: scrollToPosition,\r\n// }\n\nlet createBaseLocation = () => location.protocol + '//' + location.host;\r\n/**\r\n * Creates a normalized history location from a window.location object\r\n * @param location -\r\n */\r\nfunction createCurrentLocation(base, location) {\r\n    const { pathname, search, hash } = location;\r\n    // allows hash bases like #, /#, #/, #!, #!/, /#!/, or even /folder#end\r\n    const hashPos = base.indexOf('#');\r\n    if (hashPos > -1) {\r\n        let slicePos = hash.includes(base.slice(hashPos))\r\n            ? base.slice(hashPos).length\r\n            : 1;\r\n        let pathFromHash = hash.slice(slicePos);\r\n        // prepend the starting slash to hash so the url starts with /#\r\n        if (pathFromHash[0] !== '/')\r\n            pathFromHash = '/' + pathFromHash;\r\n        return stripBase(pathFromHash, '');\r\n    }\r\n    const path = stripBase(pathname, base);\r\n    return path + search + hash;\r\n}\r\nfunction useHistoryListeners(base, historyState, currentLocation, replace) {\r\n    let listeners = [];\r\n    let teardowns = [];\r\n    // TODO: should it be a stack? a Dict. Check if the popstate listener\r\n    // can trigger twice\r\n    let pauseState = null;\r\n    const popStateHandler = ({ state, }) => {\r\n        const to = createCurrentLocation(base, location);\r\n        const from = currentLocation.value;\r\n        const fromState = historyState.value;\r\n        let delta = 0;\r\n        if (state) {\r\n            currentLocation.value = to;\r\n            historyState.value = state;\r\n            // ignore the popstate and reset the pauseState\r\n            if (pauseState && pauseState === from) {\r\n                pauseState = null;\r\n                return;\r\n            }\r\n            delta = fromState ? state.position - fromState.position : 0;\r\n        }\r\n        else {\r\n            replace(to);\r\n        }\r\n        // console.log({ deltaFromCurrent })\r\n        // Here we could also revert the navigation by calling history.go(-delta)\r\n        // this listener will have to be adapted to not trigger again and to wait for the url\r\n        // to be updated before triggering the listeners. Some kind of validation function would also\r\n        // need to be passed to the listeners so the navigation can be accepted\r\n        // call all listeners\r\n        listeners.forEach(listener => {\r\n            listener(currentLocation.value, from, {\r\n                delta,\r\n                type: NavigationType.pop,\r\n                direction: delta\r\n                    ? delta > 0\r\n                        ? NavigationDirection.forward\r\n                        : NavigationDirection.back\r\n                    : NavigationDirection.unknown,\r\n            });\r\n        });\r\n    };\r\n    function pauseListeners() {\r\n        pauseState = currentLocation.value;\r\n    }\r\n    function listen(callback) {\r\n        // setup the listener and prepare teardown callbacks\r\n        listeners.push(callback);\r\n        const teardown = () => {\r\n            const index = listeners.indexOf(callback);\r\n            if (index > -1)\r\n                listeners.splice(index, 1);\r\n        };\r\n        teardowns.push(teardown);\r\n        return teardown;\r\n    }\r\n    function beforeUnloadListener() {\r\n        const { history } = window;\r\n        if (!history.state)\r\n            return;\r\n        history.replaceState(assign({}, history.state, { scroll: computeScrollPosition() }), '');\r\n    }\r\n    function destroy() {\r\n        for (const teardown of teardowns)\r\n            teardown();\r\n        teardowns = [];\r\n        window.removeEventListener('popstate', popStateHandler);\r\n        window.removeEventListener('beforeunload', beforeUnloadListener);\r\n    }\r\n    // setup the listeners and prepare teardown callbacks\r\n    window.addEventListener('popstate', popStateHandler);\r\n    window.addEventListener('beforeunload', beforeUnloadListener);\r\n    return {\r\n        pauseListeners,\r\n        listen,\r\n        destroy,\r\n    };\r\n}\r\n/**\r\n * Creates a state object\r\n */\r\nfunction buildState(back, current, forward, replaced = false, computeScroll = false) {\r\n    return {\r\n        back,\r\n        current,\r\n        forward,\r\n        replaced,\r\n        position: window.history.length,\r\n        scroll: computeScroll ? computeScrollPosition() : null,\r\n    };\r\n}\r\nfunction useHistoryStateNavigation(base) {\r\n    const { history, location } = window;\r\n    // private variables\r\n    const currentLocation = {\r\n        value: createCurrentLocation(base, location),\r\n    };\r\n    const historyState = { value: history.state };\r\n    // build current history entry as this is a fresh navigation\r\n    if (!historyState.value) {\r\n        changeLocation(currentLocation.value, {\r\n            back: null,\r\n            current: currentLocation.value,\r\n            forward: null,\r\n            // the length is off by one, we need to decrease it\r\n            position: history.length - 1,\r\n            replaced: true,\r\n            // don't add a scroll as the user may have an anchor and we want\r\n            // scrollBehavior to be triggered without a saved position\r\n            scroll: null,\r\n        }, true);\r\n    }\r\n    function changeLocation(to, state, replace) {\r\n        /**\r\n         * if a base tag is provided and we are on a normal domain, we have to\r\n         * respect the provided `base` attribute because pushState() will use it and\r\n         * potentially erase anything before the `#` like at\r\n         * https://github.com/vuejs/router/issues/685 where a base of\r\n         * `/folder/#` but a base of `/` would erase the `/folder/` section. If\r\n         * there is no host, the `<base>` tag makes no sense and if there isn't a\r\n         * base tag we can just use everything after the `#`.\r\n         */\r\n        const hashIndex = base.indexOf('#');\r\n        const url = hashIndex > -1\r\n            ? (location.host && document.querySelector('base')\r\n                ? base\r\n                : base.slice(hashIndex)) + to\r\n            : createBaseLocation() + base + to;\r\n        try {\r\n            // BROWSER QUIRK\r\n            // NOTE: Safari throws a SecurityError when calling this function 100 times in 30 seconds\r\n            history[replace ? 'replaceState' : 'pushState'](state, '', url);\r\n            historyState.value = state;\r\n        }\r\n        catch (err) {\r\n            {\r\n                warn('Error with push/replace State', err);\r\n            }\r\n            // Force the navigation, this also resets the call count\r\n            location[replace ? 'replace' : 'assign'](url);\r\n        }\r\n    }\r\n    function replace(to, data) {\r\n        const state = assign({}, history.state, buildState(historyState.value.back, \r\n        // keep back and forward entries but override current position\r\n        to, historyState.value.forward, true), data, { position: historyState.value.position });\r\n        changeLocation(to, state, true);\r\n        currentLocation.value = to;\r\n    }\r\n    function push(to, data) {\r\n        // Add to current entry the information of where we are going\r\n        // as well as saving the current position\r\n        const currentState = assign({}, \r\n        // use current history state to gracefully handle a wrong call to\r\n        // history.replaceState\r\n        // https://github.com/vuejs/router/issues/366\r\n        historyState.value, history.state, {\r\n            forward: to,\r\n            scroll: computeScrollPosition(),\r\n        });\r\n        if (!history.state) {\r\n            warn(`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\\n\\n` +\r\n                `history.replaceState(history.state, '', url)\\n\\n` +\r\n                `You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.`);\r\n        }\r\n        changeLocation(currentState.current, currentState, true);\r\n        const state = assign({}, buildState(currentLocation.value, to, null), { position: currentState.position + 1 }, data);\r\n        changeLocation(to, state, false);\r\n        currentLocation.value = to;\r\n    }\r\n    return {\r\n        location: currentLocation,\r\n        state: historyState,\r\n        push,\r\n        replace,\r\n    };\r\n}\r\n/**\r\n * Creates an HTML5 history. Most common history for single page applications.\r\n *\r\n * @param base -\r\n */\r\nfunction createWebHistory(base) {\r\n    base = normalizeBase(base);\r\n    const historyNavigation = useHistoryStateNavigation(base);\r\n    const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);\r\n    function go(delta, triggerListeners = true) {\r\n        if (!triggerListeners)\r\n            historyListeners.pauseListeners();\r\n        history.go(delta);\r\n    }\r\n    const routerHistory = assign({\r\n        // it's overridden right after\r\n        location: '',\r\n        base,\r\n        go,\r\n        createHref: createHref.bind(null, base),\r\n    }, historyNavigation, historyListeners);\r\n    Object.defineProperty(routerHistory, 'location', {\r\n        enumerable: true,\r\n        get: () => historyNavigation.location.value,\r\n    });\r\n    Object.defineProperty(routerHistory, 'state', {\r\n        enumerable: true,\r\n        get: () => historyNavigation.state.value,\r\n    });\r\n    return routerHistory;\r\n}\n\n/**\r\n * Creates a in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere.\r\n * It's up to the user to replace that location with the starter location by either calling `router.push` or `router.replace`.\r\n *\r\n * @param base - Base applied to all urls, defaults to '/'\r\n * @returns a history object that can be passed to the router constructor\r\n */\r\nfunction createMemoryHistory(base = '') {\r\n    let listeners = [];\r\n    let queue = [START];\r\n    let position = 0;\r\n    base = normalizeBase(base);\r\n    function setLocation(location) {\r\n        position++;\r\n        if (position === queue.length) {\r\n            // we are at the end, we can simply append a new entry\r\n            queue.push(location);\r\n        }\r\n        else {\r\n            // we are in the middle, we remove everything from here in the queue\r\n            queue.splice(position);\r\n            queue.push(location);\r\n        }\r\n    }\r\n    function triggerListeners(to, from, { direction, delta }) {\r\n        const info = {\r\n            direction,\r\n            delta,\r\n            type: NavigationType.pop,\r\n        };\r\n        for (const callback of listeners) {\r\n            callback(to, from, info);\r\n        }\r\n    }\r\n    const routerHistory = {\r\n        // rewritten by Object.defineProperty\r\n        location: START,\r\n        // TODO: should be kept in queue\r\n        state: {},\r\n        base,\r\n        createHref: createHref.bind(null, base),\r\n        replace(to) {\r\n            // remove current entry and decrement position\r\n            queue.splice(position--, 1);\r\n            setLocation(to);\r\n        },\r\n        push(to, data) {\r\n            setLocation(to);\r\n        },\r\n        listen(callback) {\r\n            listeners.push(callback);\r\n            return () => {\r\n                const index = listeners.indexOf(callback);\r\n                if (index > -1)\r\n                    listeners.splice(index, 1);\r\n            };\r\n        },\r\n        destroy() {\r\n            listeners = [];\r\n            queue = [START];\r\n            position = 0;\r\n        },\r\n        go(delta, shouldTrigger = true) {\r\n            const from = this.location;\r\n            const direction = \r\n            // we are considering delta === 0 going forward, but in abstract mode\r\n            // using 0 for the delta doesn't make sense like it does in html5 where\r\n            // it reloads the page\r\n            delta < 0 ? NavigationDirection.back : NavigationDirection.forward;\r\n            position = Math.max(0, Math.min(position + delta, queue.length - 1));\r\n            if (shouldTrigger) {\r\n                triggerListeners(this.location, from, {\r\n                    direction,\r\n                    delta,\r\n                });\r\n            }\r\n        },\r\n    };\r\n    Object.defineProperty(routerHistory, 'location', {\r\n        enumerable: true,\r\n        get: () => queue[position],\r\n    });\r\n    return routerHistory;\r\n}\n\n/**\r\n * Creates a hash history. Useful for web applications with no host (e.g.\r\n * `file://`) or when configuring a server to handle any URL is not possible.\r\n *\r\n * @param base - optional base to provide. Defaults to `location.pathname +\r\n * location.search` If there is a `<base>` tag in the `head`, its value will be\r\n * ignored in favor of this parameter **but note it affects all the\r\n * history.pushState() calls**, meaning that if you use a `<base>` tag, it's\r\n * `href` value **has to match this parameter** (ignoring anything after the\r\n * `#`).\r\n *\r\n * @example\r\n * ```js\r\n * // at https://example.com/folder\r\n * createWebHashHistory() // gives a url of `https://example.com/folder#`\r\n * createWebHashHistory('/folder/') // gives a url of `https://example.com/folder/#`\r\n * // if the `#` is provided in the base, it won't be added by `createWebHashHistory`\r\n * createWebHashHistory('/folder/#/app/') // gives a url of `https://example.com/folder/#/app/`\r\n * // you should avoid doing this because it changes the original url and breaks copying urls\r\n * createWebHashHistory('/other-folder/') // gives a url of `https://example.com/other-folder/#`\r\n *\r\n * // at file:///usr/etc/folder/index.html\r\n * // for locations with no `host`, the base is ignored\r\n * createWebHashHistory('/iAmIgnored') // gives a url of `file:///usr/etc/folder/index.html#`\r\n * ```\r\n */\r\nfunction createWebHashHistory(base) {\r\n    // Make sure this implementation is fine in terms of encoding, specially for IE11\r\n    // for `file://`, directly use the pathname and ignore the base\r\n    // location.pathname contains an initial `/` even at the root: `https://example.com`\r\n    base = location.host ? base || location.pathname + location.search : '';\r\n    // allow the user to provide a `#` in the middle: `/base/#/app`\r\n    if (!base.includes('#'))\r\n        base += '#';\r\n    if (!base.endsWith('#/') && !base.endsWith('#')) {\r\n        warn(`A hash base must end with a \"#\":\\n\"${base}\" should be \"${base.replace(/#.*$/, '#')}\".`);\r\n    }\r\n    return createWebHistory(base);\r\n}\n\nfunction isRouteLocation(route) {\r\n    return typeof route === 'string' || (route && typeof route === 'object');\r\n}\r\nfunction isRouteName(name) {\r\n    return typeof name === 'string' || typeof name === 'symbol';\r\n}\n\n/**\r\n * Initial route location where the router is. Can be used in navigation guards\r\n * to differentiate the initial navigation.\r\n *\r\n * @example\r\n * ```js\r\n * import { START_LOCATION } from 'vue-router'\r\n *\r\n * router.beforeEach((to, from) => {\r\n *   if (from === START_LOCATION) {\r\n *     // initial navigation\r\n *   }\r\n * })\r\n * ```\r\n */\r\nconst START_LOCATION_NORMALIZED = {\r\n    path: '/',\r\n    name: undefined,\r\n    params: {},\r\n    query: {},\r\n    hash: '',\r\n    fullPath: '/',\r\n    matched: [],\r\n    meta: {},\r\n    redirectedFrom: undefined,\r\n};\n\nconst NavigationFailureSymbol = /*#__PURE__*/ PolySymbol('navigation failure' );\r\n/**\r\n * Enumeration with all possible types for navigation failures. Can be passed to\r\n * {@link isNavigationFailure} to check for specific failures.\r\n */\r\nexports.NavigationFailureType = void 0;\r\n(function (NavigationFailureType) {\r\n    /**\r\n     * An aborted navigation is a navigation that failed because a navigation\r\n     * guard returned `false` or called `next(false)`\r\n     */\r\n    NavigationFailureType[NavigationFailureType[\"aborted\"] = 4] = \"aborted\";\r\n    /**\r\n     * A cancelled navigation is a navigation that failed because a more recent\r\n     * navigation finished started (not necessarily finished).\r\n     */\r\n    NavigationFailureType[NavigationFailureType[\"cancelled\"] = 8] = \"cancelled\";\r\n    /**\r\n     * A duplicated navigation is a navigation that failed because it was\r\n     * initiated while already being at the exact same location.\r\n     */\r\n    NavigationFailureType[NavigationFailureType[\"duplicated\"] = 16] = \"duplicated\";\r\n})(exports.NavigationFailureType || (exports.NavigationFailureType = {}));\r\n// DEV only debug messages\r\nconst ErrorTypeMessages = {\r\n    [1 /* MATCHER_NOT_FOUND */]({ location, currentLocation }) {\r\n        return `No match for\\n ${JSON.stringify(location)}${currentLocation\r\n            ? '\\nwhile being at\\n' + JSON.stringify(currentLocation)\r\n            : ''}`;\r\n    },\r\n    [2 /* NAVIGATION_GUARD_REDIRECT */]({ from, to, }) {\r\n        return `Redirected from \"${from.fullPath}\" to \"${stringifyRoute(to)}\" via a navigation guard.`;\r\n    },\r\n    [4 /* NAVIGATION_ABORTED */]({ from, to }) {\r\n        return `Navigation aborted from \"${from.fullPath}\" to \"${to.fullPath}\" via a navigation guard.`;\r\n    },\r\n    [8 /* NAVIGATION_CANCELLED */]({ from, to }) {\r\n        return `Navigation cancelled from \"${from.fullPath}\" to \"${to.fullPath}\" with a new navigation.`;\r\n    },\r\n    [16 /* NAVIGATION_DUPLICATED */]({ from, to }) {\r\n        return `Avoided redundant navigation to current location: \"${from.fullPath}\".`;\r\n    },\r\n};\r\nfunction createRouterError(type, params) {\r\n    // keep full error messages in cjs versions\r\n    {\r\n        return assign(new Error(ErrorTypeMessages[type](params)), {\r\n            type,\r\n            [NavigationFailureSymbol]: true,\r\n        }, params);\r\n    }\r\n}\r\nfunction isNavigationFailure(error, type) {\r\n    return (error instanceof Error &&\r\n        NavigationFailureSymbol in error &&\r\n        (type == null || !!(error.type & type)));\r\n}\r\nconst propertiesToLog = ['params', 'query', 'hash'];\r\nfunction stringifyRoute(to) {\r\n    if (typeof to === 'string')\r\n        return to;\r\n    if ('path' in to)\r\n        return to.path;\r\n    const location = {};\r\n    for (const key of propertiesToLog) {\r\n        if (key in to)\r\n            location[key] = to[key];\r\n    }\r\n    return JSON.stringify(location, null, 2);\r\n}\n\n// default pattern for a param: non greedy everything but /\r\nconst BASE_PARAM_PATTERN = '[^/]+?';\r\nconst BASE_PATH_PARSER_OPTIONS = {\r\n    sensitive: false,\r\n    strict: false,\r\n    start: true,\r\n    end: true,\r\n};\r\n// Special Regex characters that must be escaped in static tokens\r\nconst REGEX_CHARS_RE = /[.+*?^${}()[\\]/\\\\]/g;\r\n/**\r\n * Creates a path parser from an array of Segments (a segment is an array of Tokens)\r\n *\r\n * @param segments - array of segments returned by tokenizePath\r\n * @param extraOptions - optional options for the regexp\r\n * @returns a PathParser\r\n */\r\nfunction tokensToParser(segments, extraOptions) {\r\n    const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions);\r\n    // the amount of scores is the same as the length of segments except for the root segment \"/\"\r\n    const score = [];\r\n    // the regexp as a string\r\n    let pattern = options.start ? '^' : '';\r\n    // extracted keys\r\n    const keys = [];\r\n    for (const segment of segments) {\r\n        // the root segment needs special treatment\r\n        const segmentScores = segment.length ? [] : [90 /* Root */];\r\n        // allow trailing slash\r\n        if (options.strict && !segment.length)\r\n            pattern += '/';\r\n        for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {\r\n            const token = segment[tokenIndex];\r\n            // resets the score if we are inside a sub segment /:a-other-:b\r\n            let subSegmentScore = 40 /* Segment */ +\r\n                (options.sensitive ? 0.25 /* BonusCaseSensitive */ : 0);\r\n            if (token.type === 0 /* Static */) {\r\n                // prepend the slash if we are starting a new segment\r\n                if (!tokenIndex)\r\n                    pattern += '/';\r\n                pattern += token.value.replace(REGEX_CHARS_RE, '\\\\$&');\r\n                subSegmentScore += 40 /* Static */;\r\n            }\r\n            else if (token.type === 1 /* Param */) {\r\n                const { value, repeatable, optional, regexp } = token;\r\n                keys.push({\r\n                    name: value,\r\n                    repeatable,\r\n                    optional,\r\n                });\r\n                const re = regexp ? regexp : BASE_PARAM_PATTERN;\r\n                // the user provided a custom regexp /:id(\\\\d+)\r\n                if (re !== BASE_PARAM_PATTERN) {\r\n                    subSegmentScore += 10 /* BonusCustomRegExp */;\r\n                    // make sure the regexp is valid before using it\r\n                    try {\r\n                        new RegExp(`(${re})`);\r\n                    }\r\n                    catch (err) {\r\n                        throw new Error(`Invalid custom RegExp for param \"${value}\" (${re}): ` +\r\n                            err.message);\r\n                    }\r\n                }\r\n                // when we repeat we must take care of the repeating leading slash\r\n                let subPattern = repeatable ? `((?:${re})(?:/(?:${re}))*)` : `(${re})`;\r\n                // prepend the slash if we are starting a new segment\r\n                if (!tokenIndex)\r\n                    subPattern =\r\n                        // avoid an optional / if there are more segments e.g. /:p?-static\r\n                        // or /:p?-:p2\r\n                        optional && segment.length < 2\r\n                            ? `(?:/${subPattern})`\r\n                            : '/' + subPattern;\r\n                if (optional)\r\n                    subPattern += '?';\r\n                pattern += subPattern;\r\n                subSegmentScore += 20 /* Dynamic */;\r\n                if (optional)\r\n                    subSegmentScore += -8 /* BonusOptional */;\r\n                if (repeatable)\r\n                    subSegmentScore += -20 /* BonusRepeatable */;\r\n                if (re === '.*')\r\n                    subSegmentScore += -50 /* BonusWildcard */;\r\n            }\r\n            segmentScores.push(subSegmentScore);\r\n        }\r\n        // an empty array like /home/ -> [[{home}], []]\r\n        // if (!segment.length) pattern += '/'\r\n        score.push(segmentScores);\r\n    }\r\n    // only apply the strict bonus to the last score\r\n    if (options.strict && options.end) {\r\n        const i = score.length - 1;\r\n        score[i][score[i].length - 1] += 0.7000000000000001 /* BonusStrict */;\r\n    }\r\n    // TODO: dev only warn double trailing slash\r\n    if (!options.strict)\r\n        pattern += '/?';\r\n    if (options.end)\r\n        pattern += '$';\r\n    // allow paths like /dynamic to only match dynamic or dynamic/... but not dynamic_something_else\r\n    else if (options.strict)\r\n        pattern += '(?:/|$)';\r\n    const re = new RegExp(pattern, options.sensitive ? '' : 'i');\r\n    function parse(path) {\r\n        const match = path.match(re);\r\n        const params = {};\r\n        if (!match)\r\n            return null;\r\n        for (let i = 1; i < match.length; i++) {\r\n            const value = match[i] || '';\r\n            const key = keys[i - 1];\r\n            params[key.name] = value && key.repeatable ? value.split('/') : value;\r\n        }\r\n        return params;\r\n    }\r\n    function stringify(params) {\r\n        let path = '';\r\n        // for optional parameters to allow to be empty\r\n        let avoidDuplicatedSlash = false;\r\n        for (const segment of segments) {\r\n            if (!avoidDuplicatedSlash || !path.endsWith('/'))\r\n                path += '/';\r\n            avoidDuplicatedSlash = false;\r\n            for (const token of segment) {\r\n                if (token.type === 0 /* Static */) {\r\n                    path += token.value;\r\n                }\r\n                else if (token.type === 1 /* Param */) {\r\n                    const { value, repeatable, optional } = token;\r\n                    const param = value in params ? params[value] : '';\r\n                    if (Array.isArray(param) && !repeatable)\r\n                        throw new Error(`Provided param \"${value}\" is an array but it is not repeatable (* or + modifiers)`);\r\n                    const text = Array.isArray(param) ? param.join('/') : param;\r\n                    if (!text) {\r\n                        if (optional) {\r\n                            // if we have more than one optional param like /:a?-static we\r\n                            // don't need to care about the optional param\r\n                            if (segment.length < 2) {\r\n                                // remove the last slash as we could be at the end\r\n                                if (path.endsWith('/'))\r\n                                    path = path.slice(0, -1);\r\n                                // do not append a slash on the next iteration\r\n                                else\r\n                                    avoidDuplicatedSlash = true;\r\n                            }\r\n                        }\r\n                        else\r\n                            throw new Error(`Missing required param \"${value}\"`);\r\n                    }\r\n                    path += text;\r\n                }\r\n            }\r\n        }\r\n        return path;\r\n    }\r\n    return {\r\n        re,\r\n        score,\r\n        keys,\r\n        parse,\r\n        stringify,\r\n    };\r\n}\r\n/**\r\n * Compares an array of numbers as used in PathParser.score and returns a\r\n * number. This function can be used to `sort` an array\r\n *\r\n * @param a - first array of numbers\r\n * @param b - second array of numbers\r\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\r\n * should be sorted first\r\n */\r\nfunction compareScoreArray(a, b) {\r\n    let i = 0;\r\n    while (i < a.length && i < b.length) {\r\n        const diff = b[i] - a[i];\r\n        // only keep going if diff === 0\r\n        if (diff)\r\n            return diff;\r\n        i++;\r\n    }\r\n    // if the last subsegment was Static, the shorter segments should be sorted first\r\n    // otherwise sort the longest segment first\r\n    if (a.length < b.length) {\r\n        return a.length === 1 && a[0] === 40 /* Static */ + 40 /* Segment */\r\n            ? -1\r\n            : 1;\r\n    }\r\n    else if (a.length > b.length) {\r\n        return b.length === 1 && b[0] === 40 /* Static */ + 40 /* Segment */\r\n            ? 1\r\n            : -1;\r\n    }\r\n    return 0;\r\n}\r\n/**\r\n * Compare function that can be used with `sort` to sort an array of PathParser\r\n *\r\n * @param a - first PathParser\r\n * @param b - second PathParser\r\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\r\n */\r\nfunction comparePathParserScore(a, b) {\r\n    let i = 0;\r\n    const aScore = a.score;\r\n    const bScore = b.score;\r\n    while (i < aScore.length && i < bScore.length) {\r\n        const comp = compareScoreArray(aScore[i], bScore[i]);\r\n        // do not return if both are equal\r\n        if (comp)\r\n            return comp;\r\n        i++;\r\n    }\r\n    // if a and b share the same score entries but b has more, sort b first\r\n    return bScore.length - aScore.length;\r\n    // this is the ternary version\r\n    // return aScore.length < bScore.length\r\n    //   ? 1\r\n    //   : aScore.length > bScore.length\r\n    //   ? -1\r\n    //   : 0\r\n}\n\nconst ROOT_TOKEN = {\r\n    type: 0 /* Static */,\r\n    value: '',\r\n};\r\nconst VALID_PARAM_RE = /[a-zA-Z0-9_]/;\r\n// After some profiling, the cache seems to be unnecessary because tokenizePath\r\n// (the slowest part of adding a route) is very fast\r\n// const tokenCache = new Map<string, Token[][]>()\r\nfunction tokenizePath(path) {\r\n    if (!path)\r\n        return [[]];\r\n    if (path === '/')\r\n        return [[ROOT_TOKEN]];\r\n    if (!path.startsWith('/')) {\r\n        throw new Error(`Route paths should start with a \"/\": \"${path}\" should be \"/${path}\".`\r\n            );\r\n    }\r\n    // if (tokenCache.has(path)) return tokenCache.get(path)!\r\n    function crash(message) {\r\n        throw new Error(`ERR (${state})/\"${buffer}\": ${message}`);\r\n    }\r\n    let state = 0 /* Static */;\r\n    let previousState = state;\r\n    const tokens = [];\r\n    // the segment will always be valid because we get into the initial state\r\n    // with the leading /\r\n    let segment;\r\n    function finalizeSegment() {\r\n        if (segment)\r\n            tokens.push(segment);\r\n        segment = [];\r\n    }\r\n    // index on the path\r\n    let i = 0;\r\n    // char at index\r\n    let char;\r\n    // buffer of the value read\r\n    let buffer = '';\r\n    // custom regexp for a param\r\n    let customRe = '';\r\n    function consumeBuffer() {\r\n        if (!buffer)\r\n            return;\r\n        if (state === 0 /* Static */) {\r\n            segment.push({\r\n                type: 0 /* Static */,\r\n                value: buffer,\r\n            });\r\n        }\r\n        else if (state === 1 /* Param */ ||\r\n            state === 2 /* ParamRegExp */ ||\r\n            state === 3 /* ParamRegExpEnd */) {\r\n            if (segment.length > 1 && (char === '*' || char === '+'))\r\n                crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);\r\n            segment.push({\r\n                type: 1 /* Param */,\r\n                value: buffer,\r\n                regexp: customRe,\r\n                repeatable: char === '*' || char === '+',\r\n                optional: char === '*' || char === '?',\r\n            });\r\n        }\r\n        else {\r\n            crash('Invalid state to consume buffer');\r\n        }\r\n        buffer = '';\r\n    }\r\n    function addCharToBuffer() {\r\n        buffer += char;\r\n    }\r\n    while (i < path.length) {\r\n        char = path[i++];\r\n        if (char === '\\\\' && state !== 2 /* ParamRegExp */) {\r\n            previousState = state;\r\n            state = 4 /* EscapeNext */;\r\n            continue;\r\n        }\r\n        switch (state) {\r\n            case 0 /* Static */:\r\n                if (char === '/') {\r\n                    if (buffer) {\r\n                        consumeBuffer();\r\n                    }\r\n                    finalizeSegment();\r\n                }\r\n                else if (char === ':') {\r\n                    consumeBuffer();\r\n                    state = 1 /* Param */;\r\n                }\r\n                else {\r\n                    addCharToBuffer();\r\n                }\r\n                break;\r\n            case 4 /* EscapeNext */:\r\n                addCharToBuffer();\r\n                state = previousState;\r\n                break;\r\n            case 1 /* Param */:\r\n                if (char === '(') {\r\n                    state = 2 /* ParamRegExp */;\r\n                }\r\n                else if (VALID_PARAM_RE.test(char)) {\r\n                    addCharToBuffer();\r\n                }\r\n                else {\r\n                    consumeBuffer();\r\n                    state = 0 /* Static */;\r\n                    // go back one character if we were not modifying\r\n                    if (char !== '*' && char !== '?' && char !== '+')\r\n                        i--;\r\n                }\r\n                break;\r\n            case 2 /* ParamRegExp */:\r\n                // TODO: is it worth handling nested regexp? like :p(?:prefix_([^/]+)_suffix)\r\n                // it already works by escaping the closing )\r\n                // https://paths.esm.dev/?p=AAMeJbiAwQEcDKbAoAAkP60PG2R6QAvgNaA6AFACM2ABuQBB#\r\n                // is this really something people need since you can also write\r\n                // /prefix_:p()_suffix\r\n                if (char === ')') {\r\n                    // handle the escaped )\r\n                    if (customRe[customRe.length - 1] == '\\\\')\r\n                        customRe = customRe.slice(0, -1) + char;\r\n                    else\r\n                        state = 3 /* ParamRegExpEnd */;\r\n                }\r\n                else {\r\n                    customRe += char;\r\n                }\r\n                break;\r\n            case 3 /* ParamRegExpEnd */:\r\n                // same as finalizing a param\r\n                consumeBuffer();\r\n                state = 0 /* Static */;\r\n                // go back one character if we were not modifying\r\n                if (char !== '*' && char !== '?' && char !== '+')\r\n                    i--;\r\n                customRe = '';\r\n                break;\r\n            default:\r\n                crash('Unknown state');\r\n                break;\r\n        }\r\n    }\r\n    if (state === 2 /* ParamRegExp */)\r\n        crash(`Unfinished custom RegExp for param \"${buffer}\"`);\r\n    consumeBuffer();\r\n    finalizeSegment();\r\n    // tokenCache.set(path, tokens)\r\n    return tokens;\r\n}\n\nfunction createRouteRecordMatcher(record, parent, options) {\r\n    const parser = tokensToParser(tokenizePath(record.path), options);\r\n    // warn against params with the same name\r\n    {\r\n        const existingKeys = new Set();\r\n        for (const key of parser.keys) {\r\n            if (existingKeys.has(key.name))\r\n                warn(`Found duplicated params with name \"${key.name}\" for path \"${record.path}\". Only the last one will be available on \"$route.params\".`);\r\n            existingKeys.add(key.name);\r\n        }\r\n    }\r\n    const matcher = assign(parser, {\r\n        record,\r\n        parent,\r\n        // these needs to be populated by the parent\r\n        children: [],\r\n        alias: [],\r\n    });\r\n    if (parent) {\r\n        // both are aliases or both are not aliases\r\n        // we don't want to mix them because the order is used when\r\n        // passing originalRecord in Matcher.addRoute\r\n        if (!matcher.record.aliasOf === !parent.record.aliasOf)\r\n            parent.children.push(matcher);\r\n    }\r\n    return matcher;\r\n}\n\n/**\r\n * Creates a Router Matcher.\r\n *\r\n * @internal\r\n * @param routes - array of initial routes\r\n * @param globalOptions - global route options\r\n */\r\nfunction createRouterMatcher(routes, globalOptions) {\r\n    // normalized ordered array of matchers\r\n    const matchers = [];\r\n    const matcherMap = new Map();\r\n    globalOptions = mergeOptions({ strict: false, end: true, sensitive: false }, globalOptions);\r\n    function getRecordMatcher(name) {\r\n        return matcherMap.get(name);\r\n    }\r\n    function addRoute(record, parent, originalRecord) {\r\n        // used later on to remove by name\r\n        const isRootAdd = !originalRecord;\r\n        const mainNormalizedRecord = normalizeRouteRecord(record);\r\n        // we might be the child of an alias\r\n        mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;\r\n        const options = mergeOptions(globalOptions, record);\r\n        // generate an array of records to correctly handle aliases\r\n        const normalizedRecords = [\r\n            mainNormalizedRecord,\r\n        ];\r\n        if ('alias' in record) {\r\n            const aliases = typeof record.alias === 'string' ? [record.alias] : record.alias;\r\n            for (const alias of aliases) {\r\n                normalizedRecords.push(assign({}, mainNormalizedRecord, {\r\n                    // this allows us to hold a copy of the `components` option\r\n                    // so that async components cache is hold on the original record\r\n                    components: originalRecord\r\n                        ? originalRecord.record.components\r\n                        : mainNormalizedRecord.components,\r\n                    path: alias,\r\n                    // we might be the child of an alias\r\n                    aliasOf: originalRecord\r\n                        ? originalRecord.record\r\n                        : mainNormalizedRecord,\r\n                    // the aliases are always of the same kind as the original since they\r\n                    // are defined on the same record\r\n                }));\r\n            }\r\n        }\r\n        let matcher;\r\n        let originalMatcher;\r\n        for (const normalizedRecord of normalizedRecords) {\r\n            const { path } = normalizedRecord;\r\n            // Build up the path for nested routes if the child isn't an absolute\r\n            // route. Only add the / delimiter if the child path isn't empty and if the\r\n            // parent path doesn't have a trailing slash\r\n            if (parent && path[0] !== '/') {\r\n                const parentPath = parent.record.path;\r\n                const connectingSlash = parentPath[parentPath.length - 1] === '/' ? '' : '/';\r\n                normalizedRecord.path =\r\n                    parent.record.path + (path && connectingSlash + path);\r\n            }\r\n            if (normalizedRecord.path === '*') {\r\n                throw new Error('Catch all routes (\"*\") must now be defined using a param with a custom regexp.\\n' +\r\n                    'See more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.');\r\n            }\r\n            // create the object before hand so it can be passed to children\r\n            matcher = createRouteRecordMatcher(normalizedRecord, parent, options);\r\n            if (parent && path[0] === '/')\r\n                checkMissingParamsInAbsolutePath(matcher, parent);\r\n            // if we are an alias we must tell the original record that we exist\r\n            // so we can be removed\r\n            if (originalRecord) {\r\n                originalRecord.alias.push(matcher);\r\n                {\r\n                    checkSameParams(originalRecord, matcher);\r\n                }\r\n            }\r\n            else {\r\n                // otherwise, the first record is the original and others are aliases\r\n                originalMatcher = originalMatcher || matcher;\r\n                if (originalMatcher !== matcher)\r\n                    originalMatcher.alias.push(matcher);\r\n                // remove the route if named and only for the top record (avoid in nested calls)\r\n                // this works because the original record is the first one\r\n                if (isRootAdd && record.name && !isAliasRecord(matcher))\r\n                    removeRoute(record.name);\r\n            }\r\n            if ('children' in mainNormalizedRecord) {\r\n                const children = mainNormalizedRecord.children;\r\n                for (let i = 0; i < children.length; i++) {\r\n                    addRoute(children[i], matcher, originalRecord && originalRecord.children[i]);\r\n                }\r\n            }\r\n            // if there was no original record, then the first one was not an alias and all\r\n            // other alias (if any) need to reference this record when adding children\r\n            originalRecord = originalRecord || matcher;\r\n            // TODO: add normalized records for more flexibility\r\n            // if (parent && isAliasRecord(originalRecord)) {\r\n            //   parent.children.push(originalRecord)\r\n            // }\r\n            insertMatcher(matcher);\r\n        }\r\n        return originalMatcher\r\n            ? () => {\r\n                // since other matchers are aliases, they should be removed by the original matcher\r\n                removeRoute(originalMatcher);\r\n            }\r\n            : noop;\r\n    }\r\n    function removeRoute(matcherRef) {\r\n        if (isRouteName(matcherRef)) {\r\n            const matcher = matcherMap.get(matcherRef);\r\n            if (matcher) {\r\n                matcherMap.delete(matcherRef);\r\n                matchers.splice(matchers.indexOf(matcher), 1);\r\n                matcher.children.forEach(removeRoute);\r\n                matcher.alias.forEach(removeRoute);\r\n            }\r\n        }\r\n        else {\r\n            const index = matchers.indexOf(matcherRef);\r\n            if (index > -1) {\r\n                matchers.splice(index, 1);\r\n                if (matcherRef.record.name)\r\n                    matcherMap.delete(matcherRef.record.name);\r\n                matcherRef.children.forEach(removeRoute);\r\n                matcherRef.alias.forEach(removeRoute);\r\n            }\r\n        }\r\n    }\r\n    function getRoutes() {\r\n        return matchers;\r\n    }\r\n    function insertMatcher(matcher) {\r\n        let i = 0;\r\n        while (i < matchers.length &&\r\n            comparePathParserScore(matcher, matchers[i]) >= 0 &&\r\n            // Adding children with empty path should still appear before the parent\r\n            // https://github.com/vuejs/router/issues/1124\r\n            (matcher.record.path !== matchers[i].record.path ||\r\n                !isRecordChildOf(matcher, matchers[i])))\r\n            i++;\r\n        matchers.splice(i, 0, matcher);\r\n        // only add the original record to the name map\r\n        if (matcher.record.name && !isAliasRecord(matcher))\r\n            matcherMap.set(matcher.record.name, matcher);\r\n    }\r\n    function resolve(location, currentLocation) {\r\n        let matcher;\r\n        let params = {};\r\n        let path;\r\n        let name;\r\n        if ('name' in location && location.name) {\r\n            matcher = matcherMap.get(location.name);\r\n            if (!matcher)\r\n                throw createRouterError(1 /* MATCHER_NOT_FOUND */, {\r\n                    location,\r\n                });\r\n            name = matcher.record.name;\r\n            params = assign(\r\n            // paramsFromLocation is a new object\r\n            paramsFromLocation(currentLocation.params, \r\n            // only keep params that exist in the resolved location\r\n            // TODO: only keep optional params coming from a parent record\r\n            matcher.keys.filter(k => !k.optional).map(k => k.name)), location.params);\r\n            // throws if cannot be stringified\r\n            path = matcher.stringify(params);\r\n        }\r\n        else if ('path' in location) {\r\n            // no need to resolve the path with the matcher as it was provided\r\n            // this also allows the user to control the encoding\r\n            path = location.path;\r\n            if (!path.startsWith('/')) {\r\n                warn(`The Matcher cannot resolve relative paths but received \"${path}\". Unless you directly called \\`matcher.resolve(\"${path}\")\\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/router.`);\r\n            }\r\n            matcher = matchers.find(m => m.re.test(path));\r\n            // matcher should have a value after the loop\r\n            if (matcher) {\r\n                // TODO: dev warning of unused params if provided\r\n                // we know the matcher works because we tested the regexp\r\n                params = matcher.parse(path);\r\n                name = matcher.record.name;\r\n            }\r\n            // location is a relative path\r\n        }\r\n        else {\r\n            // match by name or path of current route\r\n            matcher = currentLocation.name\r\n                ? matcherMap.get(currentLocation.name)\r\n                : matchers.find(m => m.re.test(currentLocation.path));\r\n            if (!matcher)\r\n                throw createRouterError(1 /* MATCHER_NOT_FOUND */, {\r\n                    location,\r\n                    currentLocation,\r\n                });\r\n            name = matcher.record.name;\r\n            // since we are navigating to the same location, we don't need to pick the\r\n            // params like when `name` is provided\r\n            params = assign({}, currentLocation.params, location.params);\r\n            path = matcher.stringify(params);\r\n        }\r\n        const matched = [];\r\n        let parentMatcher = matcher;\r\n        while (parentMatcher) {\r\n            // reversed order so parents are at the beginning\r\n            matched.unshift(parentMatcher.record);\r\n            parentMatcher = parentMatcher.parent;\r\n        }\r\n        return {\r\n            name,\r\n            path,\r\n            params,\r\n            matched,\r\n            meta: mergeMetaFields(matched),\r\n        };\r\n    }\r\n    // add initial routes\r\n    routes.forEach(route => addRoute(route));\r\n    return { addRoute, resolve, removeRoute, getRoutes, getRecordMatcher };\r\n}\r\nfunction paramsFromLocation(params, keys) {\r\n    const newParams = {};\r\n    for (const key of keys) {\r\n        if (key in params)\r\n            newParams[key] = params[key];\r\n    }\r\n    return newParams;\r\n}\r\n/**\r\n * Normalizes a RouteRecordRaw. Creates a copy\r\n *\r\n * @param record\r\n * @returns the normalized version\r\n */\r\nfunction normalizeRouteRecord(record) {\r\n    return {\r\n        path: record.path,\r\n        redirect: record.redirect,\r\n        name: record.name,\r\n        meta: record.meta || {},\r\n        aliasOf: undefined,\r\n        beforeEnter: record.beforeEnter,\r\n        props: normalizeRecordProps(record),\r\n        children: record.children || [],\r\n        instances: {},\r\n        leaveGuards: new Set(),\r\n        updateGuards: new Set(),\r\n        enterCallbacks: {},\r\n        components: 'components' in record\r\n            ? record.components || {}\r\n            : { default: record.component },\r\n    };\r\n}\r\n/**\r\n * Normalize the optional `props` in a record to always be an object similar to\r\n * components. Also accept a boolean for components.\r\n * @param record\r\n */\r\nfunction normalizeRecordProps(record) {\r\n    const propsObject = {};\r\n    // props does not exist on redirect records but we can set false directly\r\n    const props = record.props || false;\r\n    if ('component' in record) {\r\n        propsObject.default = props;\r\n    }\r\n    else {\r\n        // NOTE: we could also allow a function to be applied to every component.\r\n        // Would need user feedback for use cases\r\n        for (const name in record.components)\r\n            propsObject[name] = typeof props === 'boolean' ? props : props[name];\r\n    }\r\n    return propsObject;\r\n}\r\n/**\r\n * Checks if a record or any of its parent is an alias\r\n * @param record\r\n */\r\nfunction isAliasRecord(record) {\r\n    while (record) {\r\n        if (record.record.aliasOf)\r\n            return true;\r\n        record = record.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Merge meta fields of an array of records\r\n *\r\n * @param matched - array of matched records\r\n */\r\nfunction mergeMetaFields(matched) {\r\n    return matched.reduce((meta, record) => assign(meta, record.meta), {});\r\n}\r\nfunction mergeOptions(defaults, partialOptions) {\r\n    const options = {};\r\n    for (const key in defaults) {\r\n        options[key] = key in partialOptions ? partialOptions[key] : defaults[key];\r\n    }\r\n    return options;\r\n}\r\nfunction isSameParam(a, b) {\r\n    return (a.name === b.name &&\r\n        a.optional === b.optional &&\r\n        a.repeatable === b.repeatable);\r\n}\r\n/**\r\n * Check if a path and its alias have the same required params\r\n *\r\n * @param a - original record\r\n * @param b - alias record\r\n */\r\nfunction checkSameParams(a, b) {\r\n    for (const key of a.keys) {\r\n        if (!key.optional && !b.keys.find(isSameParam.bind(null, key)))\r\n            return warn(`Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" should have the exact same param named \"${key.name}\"`);\r\n    }\r\n    for (const key of b.keys) {\r\n        if (!key.optional && !a.keys.find(isSameParam.bind(null, key)))\r\n            return warn(`Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" should have the exact same param named \"${key.name}\"`);\r\n    }\r\n}\r\nfunction checkMissingParamsInAbsolutePath(record, parent) {\r\n    for (const key of parent.keys) {\r\n        if (!record.keys.find(isSameParam.bind(null, key)))\r\n            return warn(`Absolute path \"${record.record.path}\" should have the exact same param named \"${key.name}\" as its parent \"${parent.record.path}\".`);\r\n    }\r\n}\r\nfunction isRecordChildOf(record, parent) {\r\n    return parent.children.some(child => child === record || isRecordChildOf(record, child));\r\n}\n\n/**\r\n * Encoding Rules ␣ = Space Path: ␣ \" < > # ? { } Query: ␣ \" < > # & = Hash: ␣ \"\r\n * < > `\r\n *\r\n * On top of that, the RFC3986 (https://tools.ietf.org/html/rfc3986#section-2.2)\r\n * defines some extra characters to be encoded. Most browsers do not encode them\r\n * in encodeURI https://github.com/whatwg/url/issues/369, so it may be safer to\r\n * also encode `!'()*`. Leaving unencoded only ASCII alphanumeric(`a-zA-Z0-9`)\r\n * plus `-._~`. This extra safety should be applied to query by patching the\r\n * string returned by encodeURIComponent encodeURI also encodes `[\\]^`. `\\`\r\n * should be encoded to avoid ambiguity. Browsers (IE, FF, C) transform a `\\`\r\n * into a `/` if directly typed in. The _backtick_ (`````) should also be\r\n * encoded everywhere because some browsers like FF encode it when directly\r\n * written while others don't. Safari and IE don't encode ``\"<>{}``` in hash.\r\n */\r\n// const EXTRA_RESERVED_RE = /[!'()*]/g\r\n// const encodeReservedReplacer = (c: string) => '%' + c.charCodeAt(0).toString(16)\r\nconst HASH_RE = /#/g; // %23\r\nconst AMPERSAND_RE = /&/g; // %26\r\nconst SLASH_RE = /\\//g; // %2F\r\nconst EQUAL_RE = /=/g; // %3D\r\nconst IM_RE = /\\?/g; // %3F\r\nconst PLUS_RE = /\\+/g; // %2B\r\n/**\r\n * NOTE: It's not clear to me if we should encode the + symbol in queries, it\r\n * seems to be less flexible than not doing so and I can't find out the legacy\r\n * systems requiring this for regular requests like text/html. In the standard,\r\n * the encoding of the plus character is only mentioned for\r\n * application/x-www-form-urlencoded\r\n * (https://url.spec.whatwg.org/#urlencoded-parsing) and most browsers seems lo\r\n * leave the plus character as is in queries. To be more flexible, we allow the\r\n * plus character on the query but it can also be manually encoded by the user.\r\n *\r\n * Resources:\r\n * - https://url.spec.whatwg.org/#urlencoded-parsing\r\n * - https://stackoverflow.com/questions/1634271/url-encoding-the-space-character-or-20\r\n */\r\nconst ENC_BRACKET_OPEN_RE = /%5B/g; // [\r\nconst ENC_BRACKET_CLOSE_RE = /%5D/g; // ]\r\nconst ENC_CARET_RE = /%5E/g; // ^\r\nconst ENC_BACKTICK_RE = /%60/g; // `\r\nconst ENC_CURLY_OPEN_RE = /%7B/g; // {\r\nconst ENC_PIPE_RE = /%7C/g; // |\r\nconst ENC_CURLY_CLOSE_RE = /%7D/g; // }\r\nconst ENC_SPACE_RE = /%20/g; // }\r\n/**\r\n * Encode characters that need to be encoded on the path, search and hash\r\n * sections of the URL.\r\n *\r\n * @internal\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction commonEncode(text) {\r\n    return encodeURI('' + text)\r\n        .replace(ENC_PIPE_RE, '|')\r\n        .replace(ENC_BRACKET_OPEN_RE, '[')\r\n        .replace(ENC_BRACKET_CLOSE_RE, ']');\r\n}\r\n/**\r\n * Encode characters that need to be encoded on the hash section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction encodeHash(text) {\r\n    return commonEncode(text)\r\n        .replace(ENC_CURLY_OPEN_RE, '{')\r\n        .replace(ENC_CURLY_CLOSE_RE, '}')\r\n        .replace(ENC_CARET_RE, '^');\r\n}\r\n/**\r\n * Encode characters that need to be encoded query values on the query\r\n * section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction encodeQueryValue(text) {\r\n    return (commonEncode(text)\r\n        // Encode the space as +, encode the + to differentiate it from the space\r\n        .replace(PLUS_RE, '%2B')\r\n        .replace(ENC_SPACE_RE, '+')\r\n        .replace(HASH_RE, '%23')\r\n        .replace(AMPERSAND_RE, '%26')\r\n        .replace(ENC_BACKTICK_RE, '`')\r\n        .replace(ENC_CURLY_OPEN_RE, '{')\r\n        .replace(ENC_CURLY_CLOSE_RE, '}')\r\n        .replace(ENC_CARET_RE, '^'));\r\n}\r\n/**\r\n * Like `encodeQueryValue` but also encodes the `=` character.\r\n *\r\n * @param text - string to encode\r\n */\r\nfunction encodeQueryKey(text) {\r\n    return encodeQueryValue(text).replace(EQUAL_RE, '%3D');\r\n}\r\n/**\r\n * Encode characters that need to be encoded on the path section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction encodePath(text) {\r\n    return commonEncode(text).replace(HASH_RE, '%23').replace(IM_RE, '%3F');\r\n}\r\n/**\r\n * Encode characters that need to be encoded on the path section of the URL as a\r\n * param. This function encodes everything {@link encodePath} does plus the\r\n * slash (`/`) character. If `text` is `null` or `undefined`, returns an empty\r\n * string instead.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction encodeParam(text) {\r\n    return text == null ? '' : encodePath(text).replace(SLASH_RE, '%2F');\r\n}\r\n/**\r\n * Decode text using `decodeURIComponent`. Returns the original text if it\r\n * fails.\r\n *\r\n * @param text - string to decode\r\n * @returns decoded string\r\n */\r\nfunction decode(text) {\r\n    try {\r\n        return decodeURIComponent('' + text);\r\n    }\r\n    catch (err) {\r\n        warn(`Error decoding \"${text}\". Using original value`);\r\n    }\r\n    return '' + text;\r\n}\n\n/**\r\n * Transforms a queryString into a {@link LocationQuery} object. Accept both, a\r\n * version with the leading `?` and without Should work as URLSearchParams\r\n\n * @internal\r\n *\r\n * @param search - search string to parse\r\n * @returns a query object\r\n */\r\nfunction parseQuery(search) {\r\n    const query = {};\r\n    // avoid creating an object with an empty key and empty value\r\n    // because of split('&')\r\n    if (search === '' || search === '?')\r\n        return query;\r\n    const hasLeadingIM = search[0] === '?';\r\n    const searchParams = (hasLeadingIM ? search.slice(1) : search).split('&');\r\n    for (let i = 0; i < searchParams.length; ++i) {\r\n        // pre decode the + into space\r\n        const searchParam = searchParams[i].replace(PLUS_RE, ' ');\r\n        // allow the = character\r\n        const eqPos = searchParam.indexOf('=');\r\n        const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));\r\n        const value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));\r\n        if (key in query) {\r\n            // an extra variable for ts types\r\n            let currentValue = query[key];\r\n            if (!Array.isArray(currentValue)) {\r\n                currentValue = query[key] = [currentValue];\r\n            }\r\n            currentValue.push(value);\r\n        }\r\n        else {\r\n            query[key] = value;\r\n        }\r\n    }\r\n    return query;\r\n}\r\n/**\r\n * Stringifies a {@link LocationQueryRaw} object. Like `URLSearchParams`, it\r\n * doesn't prepend a `?`\r\n *\r\n * @internal\r\n *\r\n * @param query - query object to stringify\r\n * @returns string version of the query without the leading `?`\r\n */\r\nfunction stringifyQuery(query) {\r\n    let search = '';\r\n    for (let key in query) {\r\n        const value = query[key];\r\n        key = encodeQueryKey(key);\r\n        if (value == null) {\r\n            // only null adds the value\r\n            if (value !== undefined) {\r\n                search += (search.length ? '&' : '') + key;\r\n            }\r\n            continue;\r\n        }\r\n        // keep null values\r\n        const values = Array.isArray(value)\r\n            ? value.map(v => v && encodeQueryValue(v))\r\n            : [value && encodeQueryValue(value)];\r\n        values.forEach(value => {\r\n            // skip undefined values in arrays as if they were not present\r\n            // smaller code than using filter\r\n            if (value !== undefined) {\r\n                // only append & with non-empty search\r\n                search += (search.length ? '&' : '') + key;\r\n                if (value != null)\r\n                    search += '=' + value;\r\n            }\r\n        });\r\n    }\r\n    return search;\r\n}\r\n/**\r\n * Transforms a {@link LocationQueryRaw} into a {@link LocationQuery} by casting\r\n * numbers into strings, removing keys with an undefined value and replacing\r\n * undefined with null in arrays\r\n *\r\n * @param query - query object to normalize\r\n * @returns a normalized query object\r\n */\r\nfunction normalizeQuery(query) {\r\n    const normalizedQuery = {};\r\n    for (const key in query) {\r\n        const value = query[key];\r\n        if (value !== undefined) {\r\n            normalizedQuery[key] = Array.isArray(value)\r\n                ? value.map(v => (v == null ? null : '' + v))\r\n                : value == null\r\n                    ? value\r\n                    : '' + value;\r\n        }\r\n    }\r\n    return normalizedQuery;\r\n}\n\n/**\r\n * Create a list of callbacks that can be reset. Used to create before and after navigation guards list\r\n */\r\nfunction useCallbacks() {\r\n    let handlers = [];\r\n    function add(handler) {\r\n        handlers.push(handler);\r\n        return () => {\r\n            const i = handlers.indexOf(handler);\r\n            if (i > -1)\r\n                handlers.splice(i, 1);\r\n        };\r\n    }\r\n    function reset() {\r\n        handlers = [];\r\n    }\r\n    return {\r\n        add,\r\n        list: () => handlers,\r\n        reset,\r\n    };\r\n}\n\nfunction registerGuard(record, name, guard) {\r\n    const removeFromList = () => {\r\n        record[name].delete(guard);\r\n    };\r\n    vue.onUnmounted(removeFromList);\r\n    vue.onDeactivated(removeFromList);\r\n    vue.onActivated(() => {\r\n        record[name].add(guard);\r\n    });\r\n    record[name].add(guard);\r\n}\r\n/**\r\n * Add a navigation guard that triggers whenever the component for the current\r\n * location is about to be left. Similar to {@link beforeRouteLeave} but can be\r\n * used in any component. The guard is removed when the component is unmounted.\r\n *\r\n * @param leaveGuard - {@link NavigationGuard}\r\n */\r\nfunction onBeforeRouteLeave(leaveGuard) {\r\n    if (!vue.getCurrentInstance()) {\r\n        warn('getCurrentInstance() returned null. onBeforeRouteLeave() must be called at the top of a setup function');\r\n        return;\r\n    }\r\n    const activeRecord = vue.inject(matchedRouteKey, \r\n    // to avoid warning\r\n    {}).value;\r\n    if (!activeRecord) {\r\n        warn('No active route record was found when calling `onBeforeRouteLeave()`. Make sure you call this function inside of a component child of <router-view>. Maybe you called it inside of App.vue?');\r\n        return;\r\n    }\r\n    registerGuard(activeRecord, 'leaveGuards', leaveGuard);\r\n}\r\n/**\r\n * Add a navigation guard that triggers whenever the current location is about\r\n * to be updated. Similar to {@link beforeRouteUpdate} but can be used in any\r\n * component. The guard is removed when the component is unmounted.\r\n *\r\n * @param updateGuard - {@link NavigationGuard}\r\n */\r\nfunction onBeforeRouteUpdate(updateGuard) {\r\n    if (!vue.getCurrentInstance()) {\r\n        warn('getCurrentInstance() returned null. onBeforeRouteUpdate() must be called at the top of a setup function');\r\n        return;\r\n    }\r\n    const activeRecord = vue.inject(matchedRouteKey, \r\n    // to avoid warning\r\n    {}).value;\r\n    if (!activeRecord) {\r\n        warn('No active route record was found when calling `onBeforeRouteUpdate()`. Make sure you call this function inside of a component child of <router-view>. Maybe you called it inside of App.vue?');\r\n        return;\r\n    }\r\n    registerGuard(activeRecord, 'updateGuards', updateGuard);\r\n}\r\nfunction guardToPromiseFn(guard, to, from, record, name) {\r\n    // keep a reference to the enterCallbackArray to prevent pushing callbacks if a new navigation took place\r\n    const enterCallbackArray = record &&\r\n        // name is defined if record is because of the function overload\r\n        (record.enterCallbacks[name] = record.enterCallbacks[name] || []);\r\n    return () => new Promise((resolve, reject) => {\r\n        const next = (valid) => {\r\n            if (valid === false)\r\n                reject(createRouterError(4 /* NAVIGATION_ABORTED */, {\r\n                    from,\r\n                    to,\r\n                }));\r\n            else if (valid instanceof Error) {\r\n                reject(valid);\r\n            }\r\n            else if (isRouteLocation(valid)) {\r\n                reject(createRouterError(2 /* NAVIGATION_GUARD_REDIRECT */, {\r\n                    from: to,\r\n                    to: valid,\r\n                }));\r\n            }\r\n            else {\r\n                if (enterCallbackArray &&\r\n                    // since enterCallbackArray is truthy, both record and name also are\r\n                    record.enterCallbacks[name] === enterCallbackArray &&\r\n                    typeof valid === 'function')\r\n                    enterCallbackArray.push(valid);\r\n                resolve();\r\n            }\r\n        };\r\n        // wrapping with Promise.resolve allows it to work with both async and sync guards\r\n        const guardReturn = guard.call(record && record.instances[name], to, from, canOnlyBeCalledOnce(next, to, from) );\r\n        let guardCall = Promise.resolve(guardReturn);\r\n        if (guard.length < 3)\r\n            guardCall = guardCall.then(next);\r\n        if (guard.length > 2) {\r\n            const message = `The \"next\" callback was never called inside of ${guard.name ? '\"' + guard.name + '\"' : ''}:\\n${guard.toString()}\\n. If you are returning a value instead of calling \"next\", make sure to remove the \"next\" parameter from your function.`;\r\n            if (typeof guardReturn === 'object' && 'then' in guardReturn) {\r\n                guardCall = guardCall.then(resolvedValue => {\r\n                    // @ts-expect-error: _called is added at canOnlyBeCalledOnce\r\n                    if (!next._called) {\r\n                        warn(message);\r\n                        return Promise.reject(new Error('Invalid navigation guard'));\r\n                    }\r\n                    return resolvedValue;\r\n                });\r\n                // TODO: test me!\r\n            }\r\n            else if (guardReturn !== undefined) {\r\n                // @ts-expect-error: _called is added at canOnlyBeCalledOnce\r\n                if (!next._called) {\r\n                    warn(message);\r\n                    reject(new Error('Invalid navigation guard'));\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        guardCall.catch(err => reject(err));\r\n    });\r\n}\r\nfunction canOnlyBeCalledOnce(next, to, from) {\r\n    let called = 0;\r\n    return function () {\r\n        if (called++ === 1)\r\n            warn(`The \"next\" callback was called more than once in one navigation guard when going from \"${from.fullPath}\" to \"${to.fullPath}\". It should be called exactly one time in each navigation guard. This will fail in production.`);\r\n        // @ts-expect-error: we put it in the original one because it's easier to check\r\n        next._called = true;\r\n        if (called === 1)\r\n            next.apply(null, arguments);\r\n    };\r\n}\r\nfunction extractComponentsGuards(matched, guardType, to, from) {\r\n    const guards = [];\r\n    for (const record of matched) {\r\n        for (const name in record.components) {\r\n            let rawComponent = record.components[name];\r\n            {\r\n                if (!rawComponent ||\r\n                    (typeof rawComponent !== 'object' &&\r\n                        typeof rawComponent !== 'function')) {\r\n                    warn(`Component \"${name}\" in record with path \"${record.path}\" is not` +\r\n                        ` a valid component. Received \"${String(rawComponent)}\".`);\r\n                    // throw to ensure we stop here but warn to ensure the message isn't\r\n                    // missed by the user\r\n                    throw new Error('Invalid route component');\r\n                }\r\n                else if ('then' in rawComponent) {\r\n                    // warn if user wrote import('/component.vue') instead of () =>\r\n                    // import('./component.vue')\r\n                    warn(`Component \"${name}\" in record with path \"${record.path}\" is a ` +\r\n                        `Promise instead of a function that returns a Promise. Did you ` +\r\n                        `write \"import('./MyPage.vue')\" instead of ` +\r\n                        `\"() => import('./MyPage.vue')\" ? This will break in ` +\r\n                        `production if not fixed.`);\r\n                    const promise = rawComponent;\r\n                    rawComponent = () => promise;\r\n                }\r\n                else if (rawComponent.__asyncLoader &&\r\n                    // warn only once per component\r\n                    !rawComponent.__warnedDefineAsync) {\r\n                    rawComponent.__warnedDefineAsync = true;\r\n                    warn(`Component \"${name}\" in record with path \"${record.path}\" is defined ` +\r\n                        `using \"defineAsyncComponent()\". ` +\r\n                        `Write \"() => import('./MyPage.vue')\" instead of ` +\r\n                        `\"defineAsyncComponent(() => import('./MyPage.vue'))\".`);\r\n                }\r\n            }\r\n            // skip update and leave guards if the route component is not mounted\r\n            if (guardType !== 'beforeRouteEnter' && !record.instances[name])\r\n                continue;\r\n            if (isRouteComponent(rawComponent)) {\r\n                // __vccOpts is added by vue-class-component and contain the regular options\r\n                const options = rawComponent.__vccOpts || rawComponent;\r\n                const guard = options[guardType];\r\n                guard && guards.push(guardToPromiseFn(guard, to, from, record, name));\r\n            }\r\n            else {\r\n                // start requesting the chunk already\r\n                let componentPromise = rawComponent();\r\n                if (!('catch' in componentPromise)) {\r\n                    warn(`Component \"${name}\" in record with path \"${record.path}\" is a function that does not return a Promise. If you were passing a functional component, make sure to add a \"displayName\" to the component. This will break in production if not fixed.`);\r\n                    componentPromise = Promise.resolve(componentPromise);\r\n                }\r\n                guards.push(() => componentPromise.then(resolved => {\r\n                    if (!resolved)\r\n                        return Promise.reject(new Error(`Couldn't resolve component \"${name}\" at \"${record.path}\"`));\r\n                    const resolvedComponent = isESModule(resolved)\r\n                        ? resolved.default\r\n                        : resolved;\r\n                    // replace the function with the resolved component\r\n                    record.components[name] = resolvedComponent;\r\n                    // __vccOpts is added by vue-class-component and contain the regular options\r\n                    const options = resolvedComponent.__vccOpts || resolvedComponent;\r\n                    const guard = options[guardType];\r\n                    return guard && guardToPromiseFn(guard, to, from, record, name)();\r\n                }));\r\n            }\r\n        }\r\n    }\r\n    return guards;\r\n}\r\n/**\r\n * Allows differentiating lazy components from functional components and vue-class-component\r\n *\r\n * @param component\r\n */\r\nfunction isRouteComponent(component) {\r\n    return (typeof component === 'object' ||\r\n        'displayName' in component ||\r\n        'props' in component ||\r\n        '__vccOpts' in component);\r\n}\n\n// TODO: we could allow currentRoute as a prop to expose `isActive` and\r\n// `isExactActive` behavior should go through an RFC\r\nfunction useLink(props) {\r\n    const router = vue.inject(routerKey);\r\n    const currentRoute = vue.inject(routeLocationKey);\r\n    const route = vue.computed(() => router.resolve(vue.unref(props.to)));\r\n    const activeRecordIndex = vue.computed(() => {\r\n        const { matched } = route.value;\r\n        const { length } = matched;\r\n        const routeMatched = matched[length - 1];\r\n        const currentMatched = currentRoute.matched;\r\n        if (!routeMatched || !currentMatched.length)\r\n            return -1;\r\n        const index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));\r\n        if (index > -1)\r\n            return index;\r\n        // possible parent record\r\n        const parentRecordPath = getOriginalPath(matched[length - 2]);\r\n        return (\r\n        // we are dealing with nested routes\r\n        length > 1 &&\r\n            // if the parent and matched route have the same path, this link is\r\n            // referring to the empty child. Or we currently are on a different\r\n            // child of the same parent\r\n            getOriginalPath(routeMatched) === parentRecordPath &&\r\n            // avoid comparing the child with its parent\r\n            currentMatched[currentMatched.length - 1].path !== parentRecordPath\r\n            ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2]))\r\n            : index);\r\n    });\r\n    const isActive = vue.computed(() => activeRecordIndex.value > -1 &&\r\n        includesParams(currentRoute.params, route.value.params));\r\n    const isExactActive = vue.computed(() => activeRecordIndex.value > -1 &&\r\n        activeRecordIndex.value === currentRoute.matched.length - 1 &&\r\n        isSameRouteLocationParams(currentRoute.params, route.value.params));\r\n    function navigate(e = {}) {\r\n        if (guardEvent(e)) {\r\n            return router[vue.unref(props.replace) ? 'replace' : 'push'](vue.unref(props.to)\r\n            // avoid uncaught errors are they are logged anyway\r\n            ).catch(noop);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    // devtools only\r\n    if (isBrowser) {\r\n        const instance = vue.getCurrentInstance();\r\n        if (instance) {\r\n            const linkContextDevtools = {\r\n                route: route.value,\r\n                isActive: isActive.value,\r\n                isExactActive: isExactActive.value,\r\n            };\r\n            // @ts-expect-error: this is internal\r\n            instance.__vrl_devtools = instance.__vrl_devtools || [];\r\n            // @ts-expect-error: this is internal\r\n            instance.__vrl_devtools.push(linkContextDevtools);\r\n            vue.watchEffect(() => {\r\n                linkContextDevtools.route = route.value;\r\n                linkContextDevtools.isActive = isActive.value;\r\n                linkContextDevtools.isExactActive = isExactActive.value;\r\n            }, { flush: 'post' });\r\n        }\r\n    }\r\n    return {\r\n        route,\r\n        href: vue.computed(() => route.value.href),\r\n        isActive,\r\n        isExactActive,\r\n        navigate,\r\n    };\r\n}\r\nconst RouterLinkImpl = /*#__PURE__*/ vue.defineComponent({\r\n    name: 'RouterLink',\r\n    props: {\r\n        to: {\r\n            type: [String, Object],\r\n            required: true,\r\n        },\r\n        replace: Boolean,\r\n        activeClass: String,\r\n        // inactiveClass: String,\r\n        exactActiveClass: String,\r\n        custom: Boolean,\r\n        ariaCurrentValue: {\r\n            type: String,\r\n            default: 'page',\r\n        },\r\n    },\r\n    useLink,\r\n    setup(props, { slots }) {\r\n        const link = vue.reactive(useLink(props));\r\n        const { options } = vue.inject(routerKey);\r\n        const elClass = vue.computed(() => ({\r\n            [getLinkClass(props.activeClass, options.linkActiveClass, 'router-link-active')]: link.isActive,\r\n            // [getLinkClass(\r\n            //   props.inactiveClass,\r\n            //   options.linkInactiveClass,\r\n            //   'router-link-inactive'\r\n            // )]: !link.isExactActive,\r\n            [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, 'router-link-exact-active')]: link.isExactActive,\r\n        }));\r\n        return () => {\r\n            const children = slots.default && slots.default(link);\r\n            return props.custom\r\n                ? children\r\n                : vue.h('a', {\r\n                    'aria-current': link.isExactActive\r\n                        ? props.ariaCurrentValue\r\n                        : null,\r\n                    href: link.href,\r\n                    // this would override user added attrs but Vue will still add\r\n                    // the listener so we end up triggering both\r\n                    onClick: link.navigate,\r\n                    class: elClass.value,\r\n                }, children);\r\n        };\r\n    },\r\n});\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\n/**\r\n * Component to render a link that triggers a navigation on click.\r\n */\r\nconst RouterLink = RouterLinkImpl;\r\nfunction guardEvent(e) {\r\n    // don't redirect with control keys\r\n    if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)\r\n        return;\r\n    // don't redirect when preventDefault called\r\n    if (e.defaultPrevented)\r\n        return;\r\n    // don't redirect on right click\r\n    if (e.button !== undefined && e.button !== 0)\r\n        return;\r\n    // don't redirect if `target=\"_blank\"`\r\n    // @ts-expect-error getAttribute does exist\r\n    if (e.currentTarget && e.currentTarget.getAttribute) {\r\n        // @ts-expect-error getAttribute exists\r\n        const target = e.currentTarget.getAttribute('target');\r\n        if (/\\b_blank\\b/i.test(target))\r\n            return;\r\n    }\r\n    // this may be a Weex event which doesn't have this method\r\n    if (e.preventDefault)\r\n        e.preventDefault();\r\n    return true;\r\n}\r\nfunction includesParams(outer, inner) {\r\n    for (const key in inner) {\r\n        const innerValue = inner[key];\r\n        const outerValue = outer[key];\r\n        if (typeof innerValue === 'string') {\r\n            if (innerValue !== outerValue)\r\n                return false;\r\n        }\r\n        else {\r\n            if (!Array.isArray(outerValue) ||\r\n                outerValue.length !== innerValue.length ||\r\n                innerValue.some((value, i) => value !== outerValue[i]))\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Get the original path value of a record by following its aliasOf\r\n * @param record\r\n */\r\nfunction getOriginalPath(record) {\r\n    return record ? (record.aliasOf ? record.aliasOf.path : record.path) : '';\r\n}\r\n/**\r\n * Utility class to get the active class based on defaults.\r\n * @param propClass\r\n * @param globalClass\r\n * @param defaultClass\r\n */\r\nconst getLinkClass = (propClass, globalClass, defaultClass) => propClass != null\r\n    ? propClass\r\n    : globalClass != null\r\n        ? globalClass\r\n        : defaultClass;\n\nconst RouterViewImpl = /*#__PURE__*/ vue.defineComponent({\r\n    name: 'RouterView',\r\n    // #674 we manually inherit them\r\n    inheritAttrs: false,\r\n    props: {\r\n        name: {\r\n            type: String,\r\n            default: 'default',\r\n        },\r\n        route: Object,\r\n    },\r\n    setup(props, { attrs, slots }) {\r\n        warnDeprecatedUsage();\r\n        const injectedRoute = vue.inject(routerViewLocationKey);\r\n        const routeToDisplay = vue.computed(() => props.route || injectedRoute.value);\r\n        const depth = vue.inject(viewDepthKey, 0);\r\n        const matchedRouteRef = vue.computed(() => routeToDisplay.value.matched[depth]);\r\n        vue.provide(viewDepthKey, depth + 1);\r\n        vue.provide(matchedRouteKey, matchedRouteRef);\r\n        vue.provide(routerViewLocationKey, routeToDisplay);\r\n        const viewRef = vue.ref();\r\n        // watch at the same time the component instance, the route record we are\r\n        // rendering, and the name\r\n        vue.watch(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to, name], [oldInstance, from, oldName]) => {\r\n            // copy reused instances\r\n            if (to) {\r\n                // this will update the instance for new instances as well as reused\r\n                // instances when navigating to a new route\r\n                to.instances[name] = instance;\r\n                // the component instance is reused for a different route or name so\r\n                // we copy any saved update or leave guards. With async setup, the\r\n                // mounting component will mount before the matchedRoute changes,\r\n                // making instance === oldInstance, so we check if guards have been\r\n                // added before. This works because we remove guards when\r\n                // unmounting/deactivating components\r\n                if (from && from !== to && instance && instance === oldInstance) {\r\n                    if (!to.leaveGuards.size) {\r\n                        to.leaveGuards = from.leaveGuards;\r\n                    }\r\n                    if (!to.updateGuards.size) {\r\n                        to.updateGuards = from.updateGuards;\r\n                    }\r\n                }\r\n            }\r\n            // trigger beforeRouteEnter next callbacks\r\n            if (instance &&\r\n                to &&\r\n                // if there is no instance but to and from are the same this might be\r\n                // the first visit\r\n                (!from || !isSameRouteRecord(to, from) || !oldInstance)) {\r\n                (to.enterCallbacks[name] || []).forEach(callback => callback(instance));\r\n            }\r\n        }, { flush: 'post' });\r\n        return () => {\r\n            const route = routeToDisplay.value;\r\n            const matchedRoute = matchedRouteRef.value;\r\n            const ViewComponent = matchedRoute && matchedRoute.components[props.name];\r\n            // we need the value at the time we render because when we unmount, we\r\n            // navigated to a different location so the value is different\r\n            const currentName = props.name;\r\n            if (!ViewComponent) {\r\n                return normalizeSlot(slots.default, { Component: ViewComponent, route });\r\n            }\r\n            // props from route configuration\r\n            const routePropsOption = matchedRoute.props[props.name];\r\n            const routeProps = routePropsOption\r\n                ? routePropsOption === true\r\n                    ? route.params\r\n                    : typeof routePropsOption === 'function'\r\n                        ? routePropsOption(route)\r\n                        : routePropsOption\r\n                : null;\r\n            const onVnodeUnmounted = vnode => {\r\n                // remove the instance reference to prevent leak\r\n                if (vnode.component.isUnmounted) {\r\n                    matchedRoute.instances[currentName] = null;\r\n                }\r\n            };\r\n            const component = vue.h(ViewComponent, assign({}, routeProps, attrs, {\r\n                onVnodeUnmounted,\r\n                ref: viewRef,\r\n            }));\r\n            if (isBrowser &&\r\n                component.ref) {\r\n                // TODO: can display if it's an alias, its props\r\n                const info = {\r\n                    depth,\r\n                    name: matchedRoute.name,\r\n                    path: matchedRoute.path,\r\n                    meta: matchedRoute.meta,\r\n                };\r\n                const internalInstances = Array.isArray(component.ref)\r\n                    ? component.ref.map(r => r.i)\r\n                    : [component.ref.i];\r\n                internalInstances.forEach(instance => {\r\n                    // @ts-expect-error\r\n                    instance.__vrv_devtools = info;\r\n                });\r\n            }\r\n            return (\r\n            // pass the vnode to the slot as a prop.\r\n            // h and <component :is=\"...\"> both accept vnodes\r\n            normalizeSlot(slots.default, { Component: component, route }) ||\r\n                component);\r\n        };\r\n    },\r\n});\r\nfunction normalizeSlot(slot, data) {\r\n    if (!slot)\r\n        return null;\r\n    const slotContent = slot(data);\r\n    return slotContent.length === 1 ? slotContent[0] : slotContent;\r\n}\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\n/**\r\n * Component to display the current route the user is at.\r\n */\r\nconst RouterView = RouterViewImpl;\r\n// warn against deprecated usage with <transition> & <keep-alive>\r\n// due to functional component being no longer eager in Vue 3\r\nfunction warnDeprecatedUsage() {\r\n    const instance = vue.getCurrentInstance();\r\n    const parentName = instance.parent && instance.parent.type.name;\r\n    if (parentName &&\r\n        (parentName === 'KeepAlive' || parentName.includes('Transition'))) {\r\n        const comp = parentName === 'KeepAlive' ? 'keep-alive' : 'transition';\r\n        warn(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.\\n` +\r\n            `Use slot props instead:\\n\\n` +\r\n            `<router-view v-slot=\"{ Component }\">\\n` +\r\n            `  <${comp}>\\n` +\r\n            `    <component :is=\"Component\" />\\n` +\r\n            `  </${comp}>\\n` +\r\n            `</router-view>`);\r\n    }\r\n}\n\nfunction formatRouteLocation(routeLocation, tooltip) {\r\n    const copy = assign({}, routeLocation, {\r\n        // remove variables that can contain vue instances\r\n        matched: routeLocation.matched.map(matched => omit(matched, ['instances', 'children', 'aliasOf'])),\r\n    });\r\n    return {\r\n        _custom: {\r\n            type: null,\r\n            readOnly: true,\r\n            display: routeLocation.fullPath,\r\n            tooltip,\r\n            value: copy,\r\n        },\r\n    };\r\n}\r\nfunction formatDisplay(display) {\r\n    return {\r\n        _custom: {\r\n            display,\r\n        },\r\n    };\r\n}\r\n// to support multiple router instances\r\nlet routerId = 0;\r\nfunction addDevtools(app, router, matcher) {\r\n    // Take over router.beforeEach and afterEach\r\n    // make sure we are not registering the devtool twice\r\n    if (router.__hasDevtools)\r\n        return;\r\n    router.__hasDevtools = true;\r\n    // increment to support multiple router instances\r\n    const id = routerId++;\r\n    devtoolsApi.setupDevtoolsPlugin({\r\n        id: 'org.vuejs.router' + (id ? '.' + id : ''),\r\n        label: 'Vue Router',\r\n        packageName: 'vue-router',\r\n        homepage: 'https://router.vuejs.org',\r\n        logo: 'https://router.vuejs.org/logo.png',\r\n        componentStateTypes: ['Routing'],\r\n        app,\r\n    }, api => {\r\n        // display state added by the router\r\n        api.on.inspectComponent((payload, ctx) => {\r\n            if (payload.instanceData) {\r\n                payload.instanceData.state.push({\r\n                    type: 'Routing',\r\n                    key: '$route',\r\n                    editable: false,\r\n                    value: formatRouteLocation(router.currentRoute.value, 'Current Route'),\r\n                });\r\n            }\r\n        });\r\n        // mark router-link as active and display tags on router views\r\n        api.on.visitComponentTree(({ treeNode: node, componentInstance }) => {\r\n            if (componentInstance.__vrv_devtools) {\r\n                const info = componentInstance.__vrv_devtools;\r\n                node.tags.push({\r\n                    label: (info.name ? `${info.name.toString()}: ` : '') + info.path,\r\n                    textColor: 0,\r\n                    tooltip: 'This component is rendered by &lt;router-view&gt;',\r\n                    backgroundColor: PINK_500,\r\n                });\r\n            }\r\n            // if multiple useLink are used\r\n            if (Array.isArray(componentInstance.__vrl_devtools)) {\r\n                componentInstance.__devtoolsApi = api;\r\n                componentInstance.__vrl_devtools.forEach(devtoolsData => {\r\n                    let backgroundColor = ORANGE_400;\r\n                    let tooltip = '';\r\n                    if (devtoolsData.isExactActive) {\r\n                        backgroundColor = LIME_500;\r\n                        tooltip = 'This is exactly active';\r\n                    }\r\n                    else if (devtoolsData.isActive) {\r\n                        backgroundColor = BLUE_600;\r\n                        tooltip = 'This link is active';\r\n                    }\r\n                    node.tags.push({\r\n                        label: devtoolsData.route.path,\r\n                        textColor: 0,\r\n                        tooltip,\r\n                        backgroundColor,\r\n                    });\r\n                });\r\n            }\r\n        });\r\n        vue.watch(router.currentRoute, () => {\r\n            // refresh active state\r\n            refreshRoutesView();\r\n            api.notifyComponentUpdate();\r\n            api.sendInspectorTree(routerInspectorId);\r\n            api.sendInspectorState(routerInspectorId);\r\n        });\r\n        const navigationsLayerId = 'router:navigations:' + id;\r\n        api.addTimelineLayer({\r\n            id: navigationsLayerId,\r\n            label: `Router${id ? ' ' + id : ''} Navigations`,\r\n            color: 0x40a8c4,\r\n        });\r\n        // const errorsLayerId = 'router:errors'\r\n        // api.addTimelineLayer({\r\n        //   id: errorsLayerId,\r\n        //   label: 'Router Errors',\r\n        //   color: 0xea5455,\r\n        // })\r\n        router.onError((error, to) => {\r\n            api.addTimelineEvent({\r\n                layerId: navigationsLayerId,\r\n                event: {\r\n                    title: 'Error during Navigation',\r\n                    subtitle: to.fullPath,\r\n                    logType: 'error',\r\n                    time: Date.now(),\r\n                    data: { error },\r\n                    groupId: to.meta.__navigationId,\r\n                },\r\n            });\r\n        });\r\n        // attached to `meta` and used to group events\r\n        let navigationId = 0;\r\n        router.beforeEach((to, from) => {\r\n            const data = {\r\n                guard: formatDisplay('beforeEach'),\r\n                from: formatRouteLocation(from, 'Current Location during this navigation'),\r\n                to: formatRouteLocation(to, 'Target location'),\r\n            };\r\n            // Used to group navigations together, hide from devtools\r\n            Object.defineProperty(to.meta, '__navigationId', {\r\n                value: navigationId++,\r\n            });\r\n            api.addTimelineEvent({\r\n                layerId: navigationsLayerId,\r\n                event: {\r\n                    time: Date.now(),\r\n                    title: 'Start of navigation',\r\n                    subtitle: to.fullPath,\r\n                    data,\r\n                    groupId: to.meta.__navigationId,\r\n                },\r\n            });\r\n        });\r\n        router.afterEach((to, from, failure) => {\r\n            const data = {\r\n                guard: formatDisplay('afterEach'),\r\n            };\r\n            if (failure) {\r\n                data.failure = {\r\n                    _custom: {\r\n                        type: Error,\r\n                        readOnly: true,\r\n                        display: failure ? failure.message : '',\r\n                        tooltip: 'Navigation Failure',\r\n                        value: failure,\r\n                    },\r\n                };\r\n                data.status = formatDisplay('❌');\r\n            }\r\n            else {\r\n                data.status = formatDisplay('✅');\r\n            }\r\n            // we set here to have the right order\r\n            data.from = formatRouteLocation(from, 'Current Location during this navigation');\r\n            data.to = formatRouteLocation(to, 'Target location');\r\n            api.addTimelineEvent({\r\n                layerId: navigationsLayerId,\r\n                event: {\r\n                    title: 'End of navigation',\r\n                    subtitle: to.fullPath,\r\n                    time: Date.now(),\r\n                    data,\r\n                    logType: failure ? 'warning' : 'default',\r\n                    groupId: to.meta.__navigationId,\r\n                },\r\n            });\r\n        });\r\n        /**\r\n         * Inspector of Existing routes\r\n         */\r\n        const routerInspectorId = 'router-inspector:' + id;\r\n        api.addInspector({\r\n            id: routerInspectorId,\r\n            label: 'Routes' + (id ? ' ' + id : ''),\r\n            icon: 'book',\r\n            treeFilterPlaceholder: 'Search routes',\r\n        });\r\n        function refreshRoutesView() {\r\n            // the routes view isn't active\r\n            if (!activeRoutesPayload)\r\n                return;\r\n            const payload = activeRoutesPayload;\r\n            // children routes will appear as nested\r\n            let routes = matcher.getRoutes().filter(route => !route.parent);\r\n            // reset match state to false\r\n            routes.forEach(resetMatchStateOnRouteRecord);\r\n            // apply a match state if there is a payload\r\n            if (payload.filter) {\r\n                routes = routes.filter(route => \r\n                // save matches state based on the payload\r\n                isRouteMatching(route, payload.filter.toLowerCase()));\r\n            }\r\n            // mark active routes\r\n            routes.forEach(route => markRouteRecordActive(route, router.currentRoute.value));\r\n            payload.rootNodes = routes.map(formatRouteRecordForInspector);\r\n        }\r\n        let activeRoutesPayload;\r\n        api.on.getInspectorTree(payload => {\r\n            activeRoutesPayload = payload;\r\n            if (payload.app === app && payload.inspectorId === routerInspectorId) {\r\n                refreshRoutesView();\r\n            }\r\n        });\r\n        /**\r\n         * Display information about the currently selected route record\r\n         */\r\n        api.on.getInspectorState(payload => {\r\n            if (payload.app === app && payload.inspectorId === routerInspectorId) {\r\n                const routes = matcher.getRoutes();\r\n                const route = routes.find(route => route.record.__vd_id === payload.nodeId);\r\n                if (route) {\r\n                    payload.state = {\r\n                        options: formatRouteRecordMatcherForStateInspector(route),\r\n                    };\r\n                }\r\n            }\r\n        });\r\n        api.sendInspectorTree(routerInspectorId);\r\n        api.sendInspectorState(routerInspectorId);\r\n    });\r\n}\r\nfunction modifierForKey(key) {\r\n    if (key.optional) {\r\n        return key.repeatable ? '*' : '?';\r\n    }\r\n    else {\r\n        return key.repeatable ? '+' : '';\r\n    }\r\n}\r\nfunction formatRouteRecordMatcherForStateInspector(route) {\r\n    const { record } = route;\r\n    const fields = [\r\n        { editable: false, key: 'path', value: record.path },\r\n    ];\r\n    if (record.name != null) {\r\n        fields.push({\r\n            editable: false,\r\n            key: 'name',\r\n            value: record.name,\r\n        });\r\n    }\r\n    fields.push({ editable: false, key: 'regexp', value: route.re });\r\n    if (route.keys.length) {\r\n        fields.push({\r\n            editable: false,\r\n            key: 'keys',\r\n            value: {\r\n                _custom: {\r\n                    type: null,\r\n                    readOnly: true,\r\n                    display: route.keys\r\n                        .map(key => `${key.name}${modifierForKey(key)}`)\r\n                        .join(' '),\r\n                    tooltip: 'Param keys',\r\n                    value: route.keys,\r\n                },\r\n            },\r\n        });\r\n    }\r\n    if (record.redirect != null) {\r\n        fields.push({\r\n            editable: false,\r\n            key: 'redirect',\r\n            value: record.redirect,\r\n        });\r\n    }\r\n    if (route.alias.length) {\r\n        fields.push({\r\n            editable: false,\r\n            key: 'aliases',\r\n            value: route.alias.map(alias => alias.record.path),\r\n        });\r\n    }\r\n    fields.push({\r\n        key: 'score',\r\n        editable: false,\r\n        value: {\r\n            _custom: {\r\n                type: null,\r\n                readOnly: true,\r\n                display: route.score.map(score => score.join(', ')).join(' | '),\r\n                tooltip: 'Score used to sort routes',\r\n                value: route.score,\r\n            },\r\n        },\r\n    });\r\n    return fields;\r\n}\r\n/**\r\n * Extracted from tailwind palette\r\n */\r\nconst PINK_500 = 0xec4899;\r\nconst BLUE_600 = 0x2563eb;\r\nconst LIME_500 = 0x84cc16;\r\nconst CYAN_400 = 0x22d3ee;\r\nconst ORANGE_400 = 0xfb923c;\r\n// const GRAY_100 = 0xf4f4f5\r\nconst DARK = 0x666666;\r\nfunction formatRouteRecordForInspector(route) {\r\n    const tags = [];\r\n    const { record } = route;\r\n    if (record.name != null) {\r\n        tags.push({\r\n            label: String(record.name),\r\n            textColor: 0,\r\n            backgroundColor: CYAN_400,\r\n        });\r\n    }\r\n    if (record.aliasOf) {\r\n        tags.push({\r\n            label: 'alias',\r\n            textColor: 0,\r\n            backgroundColor: ORANGE_400,\r\n        });\r\n    }\r\n    if (route.__vd_match) {\r\n        tags.push({\r\n            label: 'matches',\r\n            textColor: 0,\r\n            backgroundColor: PINK_500,\r\n        });\r\n    }\r\n    if (route.__vd_exactActive) {\r\n        tags.push({\r\n            label: 'exact',\r\n            textColor: 0,\r\n            backgroundColor: LIME_500,\r\n        });\r\n    }\r\n    if (route.__vd_active) {\r\n        tags.push({\r\n            label: 'active',\r\n            textColor: 0,\r\n            backgroundColor: BLUE_600,\r\n        });\r\n    }\r\n    if (record.redirect) {\r\n        tags.push({\r\n            label: 'redirect: ' +\r\n                (typeof record.redirect === 'string' ? record.redirect : 'Object'),\r\n            textColor: 0xffffff,\r\n            backgroundColor: DARK,\r\n        });\r\n    }\r\n    // add an id to be able to select it. Using the `path` is not possible because\r\n    // empty path children would collide with their parents\r\n    let id = record.__vd_id;\r\n    if (id == null) {\r\n        id = String(routeRecordId++);\r\n        record.__vd_id = id;\r\n    }\r\n    return {\r\n        id,\r\n        label: record.path,\r\n        tags,\r\n        children: route.children.map(formatRouteRecordForInspector),\r\n    };\r\n}\r\n//  incremental id for route records and inspector state\r\nlet routeRecordId = 0;\r\nconst EXTRACT_REGEXP_RE = /^\\/(.*)\\/([a-z]*)$/;\r\nfunction markRouteRecordActive(route, currentRoute) {\r\n    // no route will be active if matched is empty\r\n    // reset the matching state\r\n    const isExactActive = currentRoute.matched.length &&\r\n        isSameRouteRecord(currentRoute.matched[currentRoute.matched.length - 1], route.record);\r\n    route.__vd_exactActive = route.__vd_active = isExactActive;\r\n    if (!isExactActive) {\r\n        route.__vd_active = currentRoute.matched.some(match => isSameRouteRecord(match, route.record));\r\n    }\r\n    route.children.forEach(childRoute => markRouteRecordActive(childRoute, currentRoute));\r\n}\r\nfunction resetMatchStateOnRouteRecord(route) {\r\n    route.__vd_match = false;\r\n    route.children.forEach(resetMatchStateOnRouteRecord);\r\n}\r\nfunction isRouteMatching(route, filter) {\r\n    const found = String(route.re).match(EXTRACT_REGEXP_RE);\r\n    route.__vd_match = false;\r\n    if (!found || found.length < 3) {\r\n        return false;\r\n    }\r\n    // use a regexp without $ at the end to match nested routes better\r\n    const nonEndingRE = new RegExp(found[1].replace(/\\$$/, ''), found[2]);\r\n    if (nonEndingRE.test(filter)) {\r\n        // mark children as matches\r\n        route.children.forEach(child => isRouteMatching(child, filter));\r\n        // exception case: `/`\r\n        if (route.record.path !== '/' || filter === '/') {\r\n            route.__vd_match = route.re.test(filter);\r\n            return true;\r\n        }\r\n        // hide the / route\r\n        return false;\r\n    }\r\n    const path = route.record.path.toLowerCase();\r\n    const decodedPath = decode(path);\r\n    // also allow partial matching on the path\r\n    if (!filter.startsWith('/') &&\r\n        (decodedPath.includes(filter) || path.includes(filter)))\r\n        return true;\r\n    if (decodedPath.startsWith(filter) || path.startsWith(filter))\r\n        return true;\r\n    if (route.record.name && String(route.record.name).includes(filter))\r\n        return true;\r\n    return route.children.some(child => isRouteMatching(child, filter));\r\n}\r\nfunction omit(obj, keys) {\r\n    const ret = {};\r\n    for (const key in obj) {\r\n        if (!keys.includes(key)) {\r\n            // @ts-expect-error\r\n            ret[key] = obj[key];\r\n        }\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * Creates a Router instance that can be used by a Vue app.\r\n *\r\n * @param options - {@link RouterOptions}\r\n */\r\nfunction createRouter(options) {\r\n    const matcher = createRouterMatcher(options.routes, options);\r\n    const parseQuery$1 = options.parseQuery || parseQuery;\r\n    const stringifyQuery$1 = options.stringifyQuery || stringifyQuery;\r\n    const routerHistory = options.history;\r\n    if (!routerHistory)\r\n        throw new Error('Provide the \"history\" option when calling \"createRouter()\":' +\r\n            ' https://next.router.vuejs.org/api/#history.');\r\n    const beforeGuards = useCallbacks();\r\n    const beforeResolveGuards = useCallbacks();\r\n    const afterGuards = useCallbacks();\r\n    const currentRoute = vue.shallowRef(START_LOCATION_NORMALIZED);\r\n    let pendingLocation = START_LOCATION_NORMALIZED;\r\n    // leave the scrollRestoration if no scrollBehavior is provided\r\n    if (isBrowser && options.scrollBehavior && 'scrollRestoration' in history) {\r\n        history.scrollRestoration = 'manual';\r\n    }\r\n    const normalizeParams = applyToParams.bind(null, paramValue => '' + paramValue);\r\n    const encodeParams = applyToParams.bind(null, encodeParam);\r\n    const decodeParams = \r\n    // @ts-expect-error: intentionally avoid the type check\r\n    applyToParams.bind(null, decode);\r\n    function addRoute(parentOrRoute, route) {\r\n        let parent;\r\n        let record;\r\n        if (isRouteName(parentOrRoute)) {\r\n            parent = matcher.getRecordMatcher(parentOrRoute);\r\n            record = route;\r\n        }\r\n        else {\r\n            record = parentOrRoute;\r\n        }\r\n        return matcher.addRoute(record, parent);\r\n    }\r\n    function removeRoute(name) {\r\n        const recordMatcher = matcher.getRecordMatcher(name);\r\n        if (recordMatcher) {\r\n            matcher.removeRoute(recordMatcher);\r\n        }\r\n        else {\r\n            warn(`Cannot remove non-existent route \"${String(name)}\"`);\r\n        }\r\n    }\r\n    function getRoutes() {\r\n        return matcher.getRoutes().map(routeMatcher => routeMatcher.record);\r\n    }\r\n    function hasRoute(name) {\r\n        return !!matcher.getRecordMatcher(name);\r\n    }\r\n    function resolve(rawLocation, currentLocation) {\r\n        // const objectLocation = routerLocationAsObject(rawLocation)\r\n        // we create a copy to modify it later\r\n        currentLocation = assign({}, currentLocation || currentRoute.value);\r\n        if (typeof rawLocation === 'string') {\r\n            const locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);\r\n            const matchedRoute = matcher.resolve({ path: locationNormalized.path }, currentLocation);\r\n            const href = routerHistory.createHref(locationNormalized.fullPath);\r\n            {\r\n                if (href.startsWith('//'))\r\n                    warn(`Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`);\r\n                else if (!matchedRoute.matched.length) {\r\n                    warn(`No match found for location with path \"${rawLocation}\"`);\r\n                }\r\n            }\r\n            // locationNormalized is always a new object\r\n            return assign(locationNormalized, matchedRoute, {\r\n                params: decodeParams(matchedRoute.params),\r\n                hash: decode(locationNormalized.hash),\r\n                redirectedFrom: undefined,\r\n                href,\r\n            });\r\n        }\r\n        let matcherLocation;\r\n        // path could be relative in object as well\r\n        if ('path' in rawLocation) {\r\n            if ('params' in rawLocation &&\r\n                !('name' in rawLocation) &&\r\n                // @ts-expect-error: the type is never\r\n                Object.keys(rawLocation.params).length) {\r\n                warn(`Path \"${\r\n                // @ts-expect-error: the type is never\r\n                rawLocation.path}\" was passed with params but they will be ignored. Use a named route alongside params instead.`);\r\n            }\r\n            matcherLocation = assign({}, rawLocation, {\r\n                path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path,\r\n            });\r\n        }\r\n        else {\r\n            // remove any nullish param\r\n            const targetParams = assign({}, rawLocation.params);\r\n            for (const key in targetParams) {\r\n                if (targetParams[key] == null) {\r\n                    delete targetParams[key];\r\n                }\r\n            }\r\n            // pass encoded values to the matcher so it can produce encoded path and fullPath\r\n            matcherLocation = assign({}, rawLocation, {\r\n                params: encodeParams(rawLocation.params),\r\n            });\r\n            // current location params are decoded, we need to encode them in case the\r\n            // matcher merges the params\r\n            currentLocation.params = encodeParams(currentLocation.params);\r\n        }\r\n        const matchedRoute = matcher.resolve(matcherLocation, currentLocation);\r\n        const hash = rawLocation.hash || '';\r\n        if (hash && !hash.startsWith('#')) {\r\n            warn(`A \\`hash\\` should always start with the character \"#\". Replace \"${hash}\" with \"#${hash}\".`);\r\n        }\r\n        // decoding them) the matcher might have merged current location params so\r\n        // we need to run the decoding again\r\n        matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));\r\n        const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {\r\n            hash: encodeHash(hash),\r\n            path: matchedRoute.path,\r\n        }));\r\n        const href = routerHistory.createHref(fullPath);\r\n        {\r\n            if (href.startsWith('//')) {\r\n                warn(`Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`);\r\n            }\r\n            else if (!matchedRoute.matched.length) {\r\n                warn(`No match found for location with path \"${'path' in rawLocation ? rawLocation.path : rawLocation}\"`);\r\n            }\r\n        }\r\n        return assign({\r\n            fullPath,\r\n            // keep the hash encoded so fullPath is effectively path + encodedQuery +\r\n            // hash\r\n            hash,\r\n            query: \r\n            // if the user is using a custom query lib like qs, we might have\r\n            // nested objects, so we keep the query as is, meaning it can contain\r\n            // numbers at `$route.query`, but at the point, the user will have to\r\n            // use their own type anyway.\r\n            // https://github.com/vuejs/router/issues/328#issuecomment-649481567\r\n            stringifyQuery$1 === stringifyQuery\r\n                ? normalizeQuery(rawLocation.query)\r\n                : (rawLocation.query || {}),\r\n        }, matchedRoute, {\r\n            redirectedFrom: undefined,\r\n            href,\r\n        });\r\n    }\r\n    function locationAsObject(to) {\r\n        return typeof to === 'string'\r\n            ? parseURL(parseQuery$1, to, currentRoute.value.path)\r\n            : assign({}, to);\r\n    }\r\n    function checkCanceledNavigation(to, from) {\r\n        if (pendingLocation !== to) {\r\n            return createRouterError(8 /* NAVIGATION_CANCELLED */, {\r\n                from,\r\n                to,\r\n            });\r\n        }\r\n    }\r\n    function push(to) {\r\n        return pushWithRedirect(to);\r\n    }\r\n    function replace(to) {\r\n        return push(assign(locationAsObject(to), { replace: true }));\r\n    }\r\n    function handleRedirectRecord(to) {\r\n        const lastMatched = to.matched[to.matched.length - 1];\r\n        if (lastMatched && lastMatched.redirect) {\r\n            const { redirect } = lastMatched;\r\n            let newTargetLocation = typeof redirect === 'function' ? redirect(to) : redirect;\r\n            if (typeof newTargetLocation === 'string') {\r\n                newTargetLocation =\r\n                    newTargetLocation.includes('?') || newTargetLocation.includes('#')\r\n                        ? (newTargetLocation = locationAsObject(newTargetLocation))\r\n                        : // force empty params\r\n                            { path: newTargetLocation };\r\n                // @ts-expect-error: force empty params when a string is passed to let\r\n                // the router parse them again\r\n                newTargetLocation.params = {};\r\n            }\r\n            if (!('path' in newTargetLocation) &&\r\n                !('name' in newTargetLocation)) {\r\n                warn(`Invalid redirect found:\\n${JSON.stringify(newTargetLocation, null, 2)}\\n when navigating to \"${to.fullPath}\". A redirect must contain a name or path. This will break in production.`);\r\n                throw new Error('Invalid redirect');\r\n            }\r\n            return assign({\r\n                query: to.query,\r\n                hash: to.hash,\r\n                params: to.params,\r\n            }, newTargetLocation);\r\n        }\r\n    }\r\n    function pushWithRedirect(to, redirectedFrom) {\r\n        const targetLocation = (pendingLocation = resolve(to));\r\n        const from = currentRoute.value;\r\n        const data = to.state;\r\n        const force = to.force;\r\n        // to could be a string where `replace` is a function\r\n        const replace = to.replace === true;\r\n        const shouldRedirect = handleRedirectRecord(targetLocation);\r\n        if (shouldRedirect)\r\n            return pushWithRedirect(assign(locationAsObject(shouldRedirect), {\r\n                state: data,\r\n                force,\r\n                replace,\r\n            }), \r\n            // keep original redirectedFrom if it exists\r\n            redirectedFrom || targetLocation);\r\n        // if it was a redirect we already called `pushWithRedirect` above\r\n        const toLocation = targetLocation;\r\n        toLocation.redirectedFrom = redirectedFrom;\r\n        let failure;\r\n        if (!force && isSameRouteLocation(stringifyQuery$1, from, targetLocation)) {\r\n            failure = createRouterError(16 /* NAVIGATION_DUPLICATED */, { to: toLocation, from });\r\n            // trigger scroll to allow scrolling to the same anchor\r\n            handleScroll(from, from, \r\n            // this is a push, the only way for it to be triggered from a\r\n            // history.listen is with a redirect, which makes it become a push\r\n            true, \r\n            // This cannot be the first navigation because the initial location\r\n            // cannot be manually navigated to\r\n            false);\r\n        }\r\n        return (failure ? Promise.resolve(failure) : navigate(toLocation, from))\r\n            .catch((error) => isNavigationFailure(error)\r\n            ? // navigation redirects still mark the router as ready\r\n                isNavigationFailure(error, 2 /* NAVIGATION_GUARD_REDIRECT */)\r\n                    ? error\r\n                    : markAsReady(error) // also returns the error\r\n            : // reject any unknown error\r\n                triggerError(error, toLocation, from))\r\n            .then((failure) => {\r\n            if (failure) {\r\n                if (isNavigationFailure(failure, 2 /* NAVIGATION_GUARD_REDIRECT */)) {\r\n                    if (// we are redirecting to the same location we were already at\r\n                        isSameRouteLocation(stringifyQuery$1, resolve(failure.to), toLocation) &&\r\n                        // and we have done it a couple of times\r\n                        redirectedFrom &&\r\n                        // @ts-expect-error: added only in dev\r\n                        (redirectedFrom._count = redirectedFrom._count\r\n                            ? // @ts-expect-error\r\n                                redirectedFrom._count + 1\r\n                            : 1) > 10) {\r\n                        warn(`Detected an infinite redirection in a navigation guard when going from \"${from.fullPath}\" to \"${toLocation.fullPath}\". Aborting to avoid a Stack Overflow. This will break in production if not fixed.`);\r\n                        return Promise.reject(new Error('Infinite redirect in navigation guard'));\r\n                    }\r\n                    return pushWithRedirect(\r\n                    // keep options\r\n                    assign(locationAsObject(failure.to), {\r\n                        state: data,\r\n                        force,\r\n                        replace,\r\n                    }), \r\n                    // preserve the original redirectedFrom if any\r\n                    redirectedFrom || toLocation);\r\n                }\r\n            }\r\n            else {\r\n                // if we fail we don't finalize the navigation\r\n                failure = finalizeNavigation(toLocation, from, true, replace, data);\r\n            }\r\n            triggerAfterEach(toLocation, from, failure);\r\n            return failure;\r\n        });\r\n    }\r\n    /**\r\n     * Helper to reject and skip all navigation guards if a new navigation happened\r\n     * @param to\r\n     * @param from\r\n     */\r\n    function checkCanceledNavigationAndReject(to, from) {\r\n        const error = checkCanceledNavigation(to, from);\r\n        return error ? Promise.reject(error) : Promise.resolve();\r\n    }\r\n    // TODO: refactor the whole before guards by internally using router.beforeEach\r\n    function navigate(to, from) {\r\n        let guards;\r\n        const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to, from);\r\n        // all components here have been resolved once because we are leaving\r\n        guards = extractComponentsGuards(leavingRecords.reverse(), 'beforeRouteLeave', to, from);\r\n        // leavingRecords is already reversed\r\n        for (const record of leavingRecords) {\r\n            record.leaveGuards.forEach(guard => {\r\n                guards.push(guardToPromiseFn(guard, to, from));\r\n            });\r\n        }\r\n        const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to, from);\r\n        guards.push(canceledNavigationCheck);\r\n        // run the queue of per route beforeRouteLeave guards\r\n        return (runGuardQueue(guards)\r\n            .then(() => {\r\n            // check global guards beforeEach\r\n            guards = [];\r\n            for (const guard of beforeGuards.list()) {\r\n                guards.push(guardToPromiseFn(guard, to, from));\r\n            }\r\n            guards.push(canceledNavigationCheck);\r\n            return runGuardQueue(guards);\r\n        })\r\n            .then(() => {\r\n            // check in components beforeRouteUpdate\r\n            guards = extractComponentsGuards(updatingRecords, 'beforeRouteUpdate', to, from);\r\n            for (const record of updatingRecords) {\r\n                record.updateGuards.forEach(guard => {\r\n                    guards.push(guardToPromiseFn(guard, to, from));\r\n                });\r\n            }\r\n            guards.push(canceledNavigationCheck);\r\n            // run the queue of per route beforeEnter guards\r\n            return runGuardQueue(guards);\r\n        })\r\n            .then(() => {\r\n            // check the route beforeEnter\r\n            guards = [];\r\n            for (const record of to.matched) {\r\n                // do not trigger beforeEnter on reused views\r\n                if (record.beforeEnter && !from.matched.includes(record)) {\r\n                    if (Array.isArray(record.beforeEnter)) {\r\n                        for (const beforeEnter of record.beforeEnter)\r\n                            guards.push(guardToPromiseFn(beforeEnter, to, from));\r\n                    }\r\n                    else {\r\n                        guards.push(guardToPromiseFn(record.beforeEnter, to, from));\r\n                    }\r\n                }\r\n            }\r\n            guards.push(canceledNavigationCheck);\r\n            // run the queue of per route beforeEnter guards\r\n            return runGuardQueue(guards);\r\n        })\r\n            .then(() => {\r\n            // NOTE: at this point to.matched is normalized and does not contain any () => Promise<Component>\r\n            // clear existing enterCallbacks, these are added by extractComponentsGuards\r\n            to.matched.forEach(record => (record.enterCallbacks = {}));\r\n            // check in-component beforeRouteEnter\r\n            guards = extractComponentsGuards(enteringRecords, 'beforeRouteEnter', to, from);\r\n            guards.push(canceledNavigationCheck);\r\n            // run the queue of per route beforeEnter guards\r\n            return runGuardQueue(guards);\r\n        })\r\n            .then(() => {\r\n            // check global guards beforeResolve\r\n            guards = [];\r\n            for (const guard of beforeResolveGuards.list()) {\r\n                guards.push(guardToPromiseFn(guard, to, from));\r\n            }\r\n            guards.push(canceledNavigationCheck);\r\n            return runGuardQueue(guards);\r\n        })\r\n            // catch any navigation canceled\r\n            .catch(err => isNavigationFailure(err, 8 /* NAVIGATION_CANCELLED */)\r\n            ? err\r\n            : Promise.reject(err)));\r\n    }\r\n    function triggerAfterEach(to, from, failure) {\r\n        // navigation is confirmed, call afterGuards\r\n        // TODO: wrap with error handlers\r\n        for (const guard of afterGuards.list())\r\n            guard(to, from, failure);\r\n    }\r\n    /**\r\n     * - Cleans up any navigation guards\r\n     * - Changes the url if necessary\r\n     * - Calls the scrollBehavior\r\n     */\r\n    function finalizeNavigation(toLocation, from, isPush, replace, data) {\r\n        // a more recent navigation took place\r\n        const error = checkCanceledNavigation(toLocation, from);\r\n        if (error)\r\n            return error;\r\n        // only consider as push if it's not the first navigation\r\n        const isFirstNavigation = from === START_LOCATION_NORMALIZED;\r\n        const state = !isBrowser ? {} : history.state;\r\n        // change URL only if the user did a push/replace and if it's not the initial navigation because\r\n        // it's just reflecting the url\r\n        if (isPush) {\r\n            // on the initial navigation, we want to reuse the scroll position from\r\n            // history state if it exists\r\n            if (replace || isFirstNavigation)\r\n                routerHistory.replace(toLocation.fullPath, assign({\r\n                    scroll: isFirstNavigation && state && state.scroll,\r\n                }, data));\r\n            else\r\n                routerHistory.push(toLocation.fullPath, data);\r\n        }\r\n        // accept current navigation\r\n        currentRoute.value = toLocation;\r\n        handleScroll(toLocation, from, isPush, isFirstNavigation);\r\n        markAsReady();\r\n    }\r\n    let removeHistoryListener;\r\n    // attach listener to history to trigger navigations\r\n    function setupListeners() {\r\n        removeHistoryListener = routerHistory.listen((to, _from, info) => {\r\n            // cannot be a redirect route because it was in history\r\n            const toLocation = resolve(to);\r\n            // due to dynamic routing, and to hash history with manual navigation\r\n            // (manually changing the url or calling history.hash = '#/somewhere'),\r\n            // there could be a redirect record in history\r\n            const shouldRedirect = handleRedirectRecord(toLocation);\r\n            if (shouldRedirect) {\r\n                pushWithRedirect(assign(shouldRedirect, { replace: true }), toLocation).catch(noop);\r\n                return;\r\n            }\r\n            pendingLocation = toLocation;\r\n            const from = currentRoute.value;\r\n            // TODO: should be moved to web history?\r\n            if (isBrowser) {\r\n                saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());\r\n            }\r\n            navigate(toLocation, from)\r\n                .catch((error) => {\r\n                if (isNavigationFailure(error, 4 /* NAVIGATION_ABORTED */ | 8 /* NAVIGATION_CANCELLED */)) {\r\n                    return error;\r\n                }\r\n                if (isNavigationFailure(error, 2 /* NAVIGATION_GUARD_REDIRECT */)) {\r\n                    // Here we could call if (info.delta) routerHistory.go(-info.delta,\r\n                    // false) but this is bug prone as we have no way to wait the\r\n                    // navigation to be finished before calling pushWithRedirect. Using\r\n                    // a setTimeout of 16ms seems to work but there is not guarantee for\r\n                    // it to work on every browser. So Instead we do not restore the\r\n                    // history entry and trigger a new navigation as requested by the\r\n                    // navigation guard.\r\n                    // the error is already handled by router.push we just want to avoid\r\n                    // logging the error\r\n                    pushWithRedirect(error.to, toLocation\r\n                    // avoid an uncaught rejection, let push call triggerError\r\n                    )\r\n                        .then(failure => {\r\n                        // manual change in hash history #916 ending up in the URL not\r\n                        // changing but it was changed by the manual url change, so we\r\n                        // need to manually change it ourselves\r\n                        if (isNavigationFailure(failure, 4 /* NAVIGATION_ABORTED */ |\r\n                            16 /* NAVIGATION_DUPLICATED */) &&\r\n                            !info.delta &&\r\n                            info.type === NavigationType.pop) {\r\n                            routerHistory.go(-1, false);\r\n                        }\r\n                    })\r\n                        .catch(noop);\r\n                    // avoid the then branch\r\n                    return Promise.reject();\r\n                }\r\n                // do not restore history on unknown direction\r\n                if (info.delta)\r\n                    routerHistory.go(-info.delta, false);\r\n                // unrecognized error, transfer to the global handler\r\n                return triggerError(error, toLocation, from);\r\n            })\r\n                .then((failure) => {\r\n                failure =\r\n                    failure ||\r\n                        finalizeNavigation(\r\n                        // after navigation, all matched components are resolved\r\n                        toLocation, from, false);\r\n                // revert the navigation\r\n                if (failure) {\r\n                    if (info.delta) {\r\n                        routerHistory.go(-info.delta, false);\r\n                    }\r\n                    else if (info.type === NavigationType.pop &&\r\n                        isNavigationFailure(failure, 4 /* NAVIGATION_ABORTED */ | 16 /* NAVIGATION_DUPLICATED */)) {\r\n                        // manual change in hash history #916\r\n                        // it's like a push but lacks the information of the direction\r\n                        routerHistory.go(-1, false);\r\n                    }\r\n                }\r\n                triggerAfterEach(toLocation, from, failure);\r\n            })\r\n                .catch(noop);\r\n        });\r\n    }\r\n    // Initialization and Errors\r\n    let readyHandlers = useCallbacks();\r\n    let errorHandlers = useCallbacks();\r\n    let ready;\r\n    /**\r\n     * Trigger errorHandlers added via onError and throws the error as well\r\n     *\r\n     * @param error - error to throw\r\n     * @param to - location we were navigating to when the error happened\r\n     * @param from - location we were navigating from when the error happened\r\n     * @returns the error as a rejected promise\r\n     */\r\n    function triggerError(error, to, from) {\r\n        markAsReady(error);\r\n        const list = errorHandlers.list();\r\n        if (list.length) {\r\n            list.forEach(handler => handler(error, to, from));\r\n        }\r\n        else {\r\n            {\r\n                warn('uncaught error during route navigation:');\r\n            }\r\n            console.error(error);\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n    function isReady() {\r\n        if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)\r\n            return Promise.resolve();\r\n        return new Promise((resolve, reject) => {\r\n            readyHandlers.add([resolve, reject]);\r\n        });\r\n    }\r\n    function markAsReady(err) {\r\n        if (!ready) {\r\n            // still not ready if an error happened\r\n            ready = !err;\r\n            setupListeners();\r\n            readyHandlers\r\n                .list()\r\n                .forEach(([resolve, reject]) => (err ? reject(err) : resolve()));\r\n            readyHandlers.reset();\r\n        }\r\n        return err;\r\n    }\r\n    // Scroll behavior\r\n    function handleScroll(to, from, isPush, isFirstNavigation) {\r\n        const { scrollBehavior } = options;\r\n        if (!isBrowser || !scrollBehavior)\r\n            return Promise.resolve();\r\n        const scrollPosition = (!isPush && getSavedScrollPosition(getScrollKey(to.fullPath, 0))) ||\r\n            ((isFirstNavigation || !isPush) &&\r\n                history.state &&\r\n                history.state.scroll) ||\r\n            null;\r\n        return vue.nextTick()\r\n            .then(() => scrollBehavior(to, from, scrollPosition))\r\n            .then(position => position && scrollToPosition(position))\r\n            .catch(err => triggerError(err, to, from));\r\n    }\r\n    const go = (delta) => routerHistory.go(delta);\r\n    let started;\r\n    const installedApps = new Set();\r\n    const router = {\r\n        currentRoute,\r\n        addRoute,\r\n        removeRoute,\r\n        hasRoute,\r\n        getRoutes,\r\n        resolve,\r\n        options,\r\n        push,\r\n        replace,\r\n        go,\r\n        back: () => go(-1),\r\n        forward: () => go(1),\r\n        beforeEach: beforeGuards.add,\r\n        beforeResolve: beforeResolveGuards.add,\r\n        afterEach: afterGuards.add,\r\n        onError: errorHandlers.add,\r\n        isReady,\r\n        install(app) {\r\n            const router = this;\r\n            app.component('RouterLink', RouterLink);\r\n            app.component('RouterView', RouterView);\r\n            app.config.globalProperties.$router = router;\r\n            Object.defineProperty(app.config.globalProperties, '$route', {\r\n                enumerable: true,\r\n                get: () => vue.unref(currentRoute),\r\n            });\r\n            // this initial navigation is only necessary on client, on server it doesn't\r\n            // make sense because it will create an extra unnecessary navigation and could\r\n            // lead to problems\r\n            if (isBrowser &&\r\n                // used for the initial navigation client side to avoid pushing\r\n                // multiple times when the router is used in multiple apps\r\n                !started &&\r\n                currentRoute.value === START_LOCATION_NORMALIZED) {\r\n                // see above\r\n                started = true;\r\n                push(routerHistory.location).catch(err => {\r\n                    warn('Unexpected error when starting the router:', err);\r\n                });\r\n            }\r\n            const reactiveRoute = {};\r\n            for (const key in START_LOCATION_NORMALIZED) {\r\n                // @ts-expect-error: the key matches\r\n                reactiveRoute[key] = vue.computed(() => currentRoute.value[key]);\r\n            }\r\n            app.provide(routerKey, router);\r\n            app.provide(routeLocationKey, vue.reactive(reactiveRoute));\r\n            app.provide(routerViewLocationKey, currentRoute);\r\n            const unmountApp = app.unmount;\r\n            installedApps.add(app);\r\n            app.unmount = function () {\r\n                installedApps.delete(app);\r\n                // the router is not attached to an app anymore\r\n                if (installedApps.size < 1) {\r\n                    // invalidate the current navigation\r\n                    pendingLocation = START_LOCATION_NORMALIZED;\r\n                    removeHistoryListener && removeHistoryListener();\r\n                    currentRoute.value = START_LOCATION_NORMALIZED;\r\n                    started = false;\r\n                    ready = false;\r\n                }\r\n                unmountApp();\r\n            };\r\n            if (isBrowser) {\r\n                addDevtools(app, router, matcher);\r\n            }\r\n        },\r\n    };\r\n    return router;\r\n}\r\nfunction runGuardQueue(guards) {\r\n    return guards.reduce((promise, guard) => promise.then(() => guard()), Promise.resolve());\r\n}\r\nfunction extractChangingRecords(to, from) {\r\n    const leavingRecords = [];\r\n    const updatingRecords = [];\r\n    const enteringRecords = [];\r\n    const len = Math.max(from.matched.length, to.matched.length);\r\n    for (let i = 0; i < len; i++) {\r\n        const recordFrom = from.matched[i];\r\n        if (recordFrom) {\r\n            if (to.matched.find(record => isSameRouteRecord(record, recordFrom)))\r\n                updatingRecords.push(recordFrom);\r\n            else\r\n                leavingRecords.push(recordFrom);\r\n        }\r\n        const recordTo = to.matched[i];\r\n        if (recordTo) {\r\n            // the type doesn't matter because we are comparing per reference\r\n            if (!from.matched.find(record => isSameRouteRecord(record, recordTo))) {\r\n                enteringRecords.push(recordTo);\r\n            }\r\n        }\r\n    }\r\n    return [leavingRecords, updatingRecords, enteringRecords];\r\n}\n\n/**\r\n * Returns the router instance. Equivalent to using `$router` inside\r\n * templates.\r\n */\r\nfunction useRouter() {\r\n    return vue.inject(routerKey);\r\n}\r\n/**\r\n * Returns the current route location. Equivalent to using `$route` inside\r\n * templates.\r\n */\r\nfunction useRoute() {\r\n    return vue.inject(routeLocationKey);\r\n}\n\nexports.RouterLink = RouterLink;\nexports.RouterView = RouterView;\nexports.START_LOCATION = START_LOCATION_NORMALIZED;\nexports.createMemoryHistory = createMemoryHistory;\nexports.createRouter = createRouter;\nexports.createRouterMatcher = createRouterMatcher;\nexports.createWebHashHistory = createWebHashHistory;\nexports.createWebHistory = createWebHistory;\nexports.isNavigationFailure = isNavigationFailure;\nexports.matchedRouteKey = matchedRouteKey;\nexports.onBeforeRouteLeave = onBeforeRouteLeave;\nexports.onBeforeRouteUpdate = onBeforeRouteUpdate;\nexports.parseQuery = parseQuery;\nexports.routeLocationKey = routeLocationKey;\nexports.routerKey = routerKey;\nexports.routerViewLocationKey = routerViewLocationKey;\nexports.stringifyQuery = stringifyQuery;\nexports.useLink = useLink;\nexports.useRoute = useRoute;\nexports.useRouter = useRouter;\nexports.viewDepthKey = viewDepthKey;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}